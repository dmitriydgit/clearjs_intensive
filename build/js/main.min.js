import{updateRoute}from"./router.js";window.addEventListener("load",updateRoute),window.addEventListener("hashchange",updateRoute);import Utils from"./utils.js";import Observer from"./gallery/observer.js";import MainModel from"./mainPage/main.model.js";import MainView from"./mainPage/main.view.js";import MainController from"./mainPage/main.controller.js";import ProfileController from"./profile/profile.controller.js";import ProfileModel from"./profile/profile.model.js";import ProfileView from"./profile/profile.view.js";import GalleryController from"./gallery/gallery.controller.js";import GalleryModel from"./gallery/gallery.model.js";import GalleryView from"./gallery/gallery.view.js";import LoginController from"./login/login.controller.js";import LoginModel from"./login/login.model.js";import LoginView from"./login/login.view.js";let mainPage=document.querySelector("#main-view"),profile=document.querySelector("#profile-view"),gallery=document.querySelector("#gallery-view"),mainPageBtn=document.querySelector("#mainPageBtn"),profileBtn=document.querySelector("#profileBtn"),galleryBtn=document.querySelector("#galleryBtn"),activatedRoutes={},routeConfig={mainPage:{show:()=>{Utils.showView([mainPage]),Utils.hideView([profile,gallery]),Utils.activateBtn([mainPageBtn]),Utils.disactivateBtn([profileBtn,galleryBtn])},init:()=>{let e=new MainModel,t=new MainView,i=new Utils;new MainController(e,t,i).init()}},profile:{show:()=>{Utils.showView([profile]),Utils.hideView([mainPage,gallery]),Utils.activateBtn([profileBtn]),Utils.disactivateBtn([mainPageBtn,galleryBtn]),console.log("Contacts route is loaded")},init:()=>{let e=new ProfileModel,t=new ProfileView,i=new Utils;new ProfileController(e,t,i)}},gallery:{show:()=>{Utils.showView([gallery]),Utils.hideView([mainPage,profile]),Utils.activateBtn([galleryBtn]),Utils.disactivateBtn([mainPageBtn,profileBtn]),console.log("Main route is loaded")},init:()=>{let e=new Observer,t=new GalleryModel,i=new GalleryView;new GalleryController(t,i,e,new Utils)}}};function activateRoute(e){if(activatedRoutes[e])activatedRoutes[e]();else{let t=routeConfig[e];t&&(t.init(),t.show(),activatedRoutes[e]=t.show)}}export function updateRoute(){let e=document.location.hash.replace(/^#/,"");e&&!Utils.isLoggedIn()?Utils.navigateTo(""):activateRoute(e)};export default class Utils{constructor(){this.sortingConfig={A:e=>(e.sort((e,t)=>e.email>t.email?1:-1),e),Z:e=>(e.sort((e,t)=>e.email<t.email?1:-1),e),Admin:e=>e.filter(e=>"Admin"==e.role),User:e=>e.filter(e=>"User"==e.role),Find:e=>{let t=new RegExp(event.target.value,"i");return e.filter(e=>t.test(e.name))}}}static showView(e){e.forEach(e=>{e.classList.remove("hide")})}static hideView(e){e.forEach(e=>{e.classList.add("hide")})}static navigateTo(e){window.location.hash="#"+e}static isLoggedIn(){return!0}static activateBtn(e){e.forEach(e=>{e.parentElement.classList.add("active")})}static disactivateBtn(e){e.forEach(e=>{e.parentElement.classList.remove("active")})}};export default class GalleryController{constructor(e,t,i,s){this.model=e,this.view=t,this.observer=i,this.utils=s,this.pageConfig={itemsPerPage:10,currentPage:0},this.init()}initListeners(){this.view.DOMElements.userList.addEventListener("click",this.tableLineHandler.bind(this)),this.view.DOMElements.search.addEventListener("keyup",this.searchHandler.bind(this)),this.view.DOMElements.emailDropdown.addEventListener("click",this.sortingHandler.bind(this)),this.view.DOMElements.roleDropdown.addEventListener("click",this.sortingHandler.bind(this)),this.view.DOMElements.nextBtn.addEventListener("click",this.getNextPageHandler.bind(this))}tableLineHandler(e){e.preventDefault();let t=e.target.getAttribute("data-row-id");t?this.openDetail(t):this.view.selectTableLine(e)}openDetail(e){this.model.getUserById(e).then(e=>{this.view.showSingleUser(e)})}searchHandler(e){e.preventDefault();let t=e.target.value;13===e.keyCode&&(0==t.length||t.length>2)&&(this.pageConfig.currentPage=0,this.view.clearList(),this.view.buildUsersList(this.getNextPage(),this.utils.sortingConfig.Find))}sortingHandler(e){e.preventDefault(),this.view.updateButtonText(e),this.applySortingMethod(this.view.getSortingType(e))}getNextPageHandler(e){e&&e.preventDefault(),this.view.buildUsersList(this.getNextPage()),this.isLastPage()}applySortingMethod(e){e&&(this.pageConfig.currentPage=0,this.view.clearList(),this.view.buildUsersList(this.getNextPage(),this.utils.sortingConfig[e]))}getNextPage(){let e=this.pageConfig.itemsPerPage*this.pageConfig.currentPage,t=this.pageConfig.itemsPerPage+e;return this.pageConfig.currentPage++,this.model.usersListData.slice(e,t)}isLastPage(){this.isMaxPage()&&(this.view.hideNextPage(),this.countStats())}isMaxPage(){return this.pageConfig.currentPage*this.pageConfig.itemsPerPage>=this.model.usersListData.length}countStats(){let e=this.model.usersListData.reduce((e,t)=>("Admin"==t.role?e.admins++:e.users++,e),{admins:0,users:0});this.view.showStats(e)}init(){console.log("gallery inited")}};export default class GalleryModel{constructor(){this.getUrl="http://localhost:3000/usersList",this.usersListData=[]}getUserList(){return fetch(this.getUrl).then(e=>e.json()).then(e=>(console.log("Data is loaded"),this.usersListData=e,e))}getUserById(e){return fetch(this.getUrl+"/"+e).then(e=>e.json()).then(e=>e)}saveUser(e){}updateUser(e){}};export default class GalleryView{constructor(){this.DOMElements={}}};export default class Observer{constructor(){this.events={}}subscribeEvent(e,t){this.events[e]=t}callEvent(e,t){this.events[e]&&this.events[e](t)}};export default class LoginController{constructor(e,t,i){this.model=e,this.view=t,this.utils=i}initListeners(){this.view.DOMElements.logInBtn.addEventListener("click",this.loginHandler.bind(this)),this.view.DOMElements.logOutBtn.addEventListener("click",this.logoutHandler.bind(this))}loginHandler(e){e.preventDefault();let t=this.view.getCredentials();this.model.validate(t)?this.model.login(t).then(e=>{e.loginStatus?(this.view.hideMsg(),this.view.showLogout(),this.utils.navigateTo("gallery")):this.view.showMsg(this.model.getErrorMsg())}):this.view.showMsg(this.model.getErrorMsg())}logoutHandler(){this.view.hideLogout(),this.model.logout(),this.utils.navigateTo("")}init(){console.log("login inited")}};export default class LoginModel{constructor(){this.loginUrl="http://localhost:3000/login",this.emailPattern=/^\w+@\w+\.\w{2,4}$/i,this.passwordPattern=/^[a-zA-Z0-9]{8,30}$/,this.errorMsg=null,this.errorMsgMap={empty:"Пожалуйста заполните поля логин и пароль",loginError:"Логин введен неверно. Только латинские буквы.",passError:"Пароль введен неверно. Тольк латинские буквы, цифры. Длина не менее 8 символов",missmatch:"Неправильные логин или пароль."}}validate(e){return this.isEmpty(e)&&this.isEmailAssertPattern(e)&&this.isPasswordAssertPattern(e)}login(e){let t={headers:{"Content-type":"application/json; charset=utf-8"},method:"post",body:JSON.stringify(e)};return fetch(this.loginUrl,t).then(e=>e.json()).then(t=>(t.loginStatus?localStorage.setItem("credentials",JSON.stringify(e)):this.setErrorMsg("missmatch"),t))}getErrorMsg(){return this.errorMsg}setErrorMsg(e){return this.errorMsg=this.errorMsgMap[e],!1}isEmpty(e){return e.login&&e.password||this.setErrorMsg("empty")}isEmailAssertPattern(e){return this.emailPattern.test(e.login)||this.setErrorMsg("loginError")}isPasswordAssertPattern(e){return this.passwordPattern.test(e.password)||this.setErrorMsg("passError")}logout(){localStorage.removeItem("credentials")}};export default class LoginView{constructor(){this.DOMElements={login:document.querySelector("#inputEmail"),password:document.querySelector("#inputPassword"),alert:document.querySelector(".alert"),logInBtn:document.querySelector("#log-in-btn"),logOutBtn:document.querySelector("#log-out-btn")}}showMsg(e){e&&(this.DOMElements.alert.classList.remove("hide"),this.DOMElements.alert.innerHTML=e)}hideMsg(){this.DOMElements.alert.classList.add("hide")}showLogout(){this.DOMElements.logOutBtn.classList.remove("hide")}hideLogout(){this.DOMElements.logOutBtn.classList.add("hide")}getCredentials(){return{login:this.DOMElements.login.value,password:this.DOMElements.password.value}}};export default class MainController{constructor(e,t,i){this.model=e,this.view=t,this.utils=i}init(){console.log("main inited")}};export default class MainModel{constructor(){}};export default class MainView{constructor(){this.DOMElements={}}};export default class ProfileController{constructor(e,t,i){this.model=e,this.view=t,this.utils=i}init(){console.log("profile inited")}};export default class ProfileModel{constructor(){}};export default class ProfileView{constructor(){this.DOMElements={}}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInJvdXRlci5qcyIsInV0aWxzLmpzIiwiZ2FsbGVyeS9nYWxsZXJ5LmNvbnRyb2xsZXIuanMiLCJnYWxsZXJ5L2dhbGxlcnkubW9kZWwuanMiLCJnYWxsZXJ5L2dhbGxlcnkudmlldy5qcyIsImdhbGxlcnkvb2JzZXJ2ZXIuanMiLCJsb2dpbi9sb2dpbi5jb250cm9sbGVyLmpzIiwibG9naW4vbG9naW4ubW9kZWwuanMiLCJsb2dpbi9sb2dpbi52aWV3LmpzIiwibWFpblBhZ2UvbWFpbi5jb250cm9sbGVyLmpzIiwibWFpblBhZ2UvbWFpbi5tb2RlbC5qcyIsIm1haW5QYWdlL21haW4udmlldy5qcyIsInByb2ZpbGUvcHJvZmlsZS5jb250cm9sbGVyLmpzIiwicHJvZmlsZS9wcm9maWxlLm1vZGVsLmpzIiwicHJvZmlsZS9wcm9maWxlLnZpZXcuanMiXSwibmFtZXMiOlsidXBkYXRlUm91dGUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiVXRpbHMiLCJPYnNlcnZlciIsIk1haW5Nb2RlbCIsIk1haW5WaWV3IiwiTWFpbkNvbnRyb2xsZXIiLCJQcm9maWxlQ29udHJvbGxlciIsIlByb2ZpbGVNb2RlbCIsIlByb2ZpbGVWaWV3IiwiR2FsbGVyeUNvbnRyb2xsZXIiLCJHYWxsZXJ5TW9kZWwiLCJHYWxsZXJ5VmlldyIsIkxvZ2luQ29udHJvbGxlciIsIkxvZ2luTW9kZWwiLCJMb2dpblZpZXciLCJtYWluUGFnZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInByb2ZpbGUiLCJnYWxsZXJ5IiwibWFpblBhZ2VCdG4iLCJwcm9maWxlQnRuIiwiZ2FsbGVyeUJ0biIsImFjdGl2YXRlZFJvdXRlcyIsInJvdXRlQ29uZmlnIiwic2hvdyIsInNob3dWaWV3IiwiaGlkZVZpZXciLCJhY3RpdmF0ZUJ0biIsImRpc2FjdGl2YXRlQnRuIiwiaW5pdCIsIm1vZGVsIiwidmlldyIsInV0aWxzIiwiY29uc29sZSIsImxvZyIsIm9ic2VydmVyIiwiYWN0aXZhdGVSb3V0ZSIsInJvdXRlTmFtZSIsInJvdXRlIiwibG9jYXRpb24iLCJoYXNoIiwicmVwbGFjZSIsImlzTG9nZ2VkSW4iLCJuYXZpZ2F0ZVRvIiwiW29iamVjdCBPYmplY3RdIiwidGhpcyIsInNvcnRpbmdDb25maWciLCJBIiwicGFnZSIsInNvcnQiLCJhIiwiYiIsImVtYWlsIiwiWiIsIkFkbWluIiwiZmlsdGVyIiwiaXRlbSIsInJvbGUiLCJVc2VyIiwiRmluZCIsImV4cCIsIlJlZ0V4cCIsImV2ZW50IiwidGFyZ2V0IiwidmFsdWUiLCJ0ZXN0IiwibmFtZSIsInZpZXdzIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJidG5zIiwicGFyZW50RWxlbWVudCIsInBhZ2VDb25maWciLCJpdGVtc1BlclBhZ2UiLCJjdXJyZW50UGFnZSIsIkRPTUVsZW1lbnRzIiwidXNlckxpc3QiLCJ0YWJsZUxpbmVIYW5kbGVyIiwiYmluZCIsInNlYXJjaCIsInNlYXJjaEhhbmRsZXIiLCJlbWFpbERyb3Bkb3duIiwic29ydGluZ0hhbmRsZXIiLCJyb2xlRHJvcGRvd24iLCJuZXh0QnRuIiwiZ2V0TmV4dFBhZ2VIYW5kbGVyIiwicHJldmVudERlZmF1bHQiLCJpc0J1dHRvbiIsImdldEF0dHJpYnV0ZSIsIm9wZW5EZXRhaWwiLCJzZWxlY3RUYWJsZUxpbmUiLCJidXR0b25JZCIsImdldFVzZXJCeUlkIiwidGhlbiIsImRhdGEiLCJzaG93U2luZ2xlVXNlciIsImtleUNvZGUiLCJsZW5ndGgiLCJjbGVhckxpc3QiLCJidWlsZFVzZXJzTGlzdCIsImdldE5leHRQYWdlIiwidXBkYXRlQnV0dG9uVGV4dCIsImFwcGx5U29ydGluZ01ldGhvZCIsImdldFNvcnRpbmdUeXBlIiwiaXNMYXN0UGFnZSIsInNvcnRpbmdUeXBlIiwic3RhcnQiLCJlbmQiLCJ1c2Vyc0xpc3REYXRhIiwic2xpY2UiLCJpc01heFBhZ2UiLCJoaWRlTmV4dFBhZ2UiLCJjb3VudFN0YXRzIiwic3RhdHMiLCJyZWR1Y2UiLCJzdW0iLCJhZG1pbnMiLCJ1c2VycyIsInNob3dTdGF0cyIsImdldFVybCIsImZldGNoIiwicmVzcG9uY2UiLCJqc29uIiwiaWQiLCJjb3VudGVyIiwiZXZlbnRzIiwiZnVuYyIsImFyZyIsImxvZ0luQnRuIiwibG9naW5IYW5kbGVyIiwibG9nT3V0QnRuIiwibG9nb3V0SGFuZGxlciIsImUiLCJjcmVkZW50aWFscyIsImdldENyZWRlbnRpYWxzIiwidmFsaWRhdGUiLCJsb2dpbiIsImxvZ2luU3RhdHVzIiwiaGlkZU1zZyIsInNob3dMb2dvdXQiLCJzaG93TXNnIiwiZ2V0RXJyb3JNc2ciLCJoaWRlTG9nb3V0IiwibG9nb3V0IiwibG9naW5VcmwiLCJlbWFpbFBhdHRlcm4iLCJwYXNzd29yZFBhdHRlcm4iLCJlcnJvck1zZyIsImVycm9yTXNnTWFwIiwiZW1wdHkiLCJsb2dpbkVycm9yIiwicGFzc0Vycm9yIiwibWlzc21hdGNoIiwiaXNFbXB0eSIsImlzRW1haWxBc3NlcnRQYXR0ZXJuIiwiaXNQYXNzd29yZEFzc2VydFBhdHRlcm4iLCJvcHRpb25zIiwiaGVhZGVycyIsIkNvbnRlbnQtdHlwZSIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInNldEVycm9yTXNnIiwia2V5IiwicGFzc3dvcmQiLCJyZW1vdmVJdGVtIiwiYWxlcnQiLCJtc2ciLCJpbm5lckhUTUwiXSwibWFwcGluZ3MiOiJPQUFBQSxnQkFBQSxjQUdBQyxPQUFBQyxpQkFBQSxPQUFBRixhQUNBQyxPQUFBQyxpQkFBQSxhQUFBRixvQkNKQUcsVUFBQSxvQkFDQUMsYUFBQSwrQkFFQUMsY0FBQSxrQ0FDQUMsYUFBQSxpQ0FDQUMsbUJBQUEsdUNBRUFDLHNCQUFBLHlDQUNBQyxpQkFBQSxvQ0FDQUMsZ0JBQUEsbUNBR0FDLHNCQUFBLHlDQUNBQyxpQkFBQSxvQ0FDQUMsZ0JBQUEsbUNBSUFDLG9CQUFBLHFDQUNBQyxlQUFBLGdDQUNBQyxjQUFBLHdC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Q0E0SixNQUFBN0osU0FBQUMsY0FBQSxVQUVBbUgsU0FBQXBILFNBQUFDLGNBQUEsZUFDQXFILFVBQUF0SCxTQUFBQyxjQUFBLGlCQUlBNEIsUUFBQWlJLEdBQ0FBLElBQ0FoSSxLQUFBaUMsWUFBQThGLE1BQUF0RyxVQUFBQyxPQUFBLFFBQ0ExQixLQUFBaUMsWUFBQThGLE1BQUFFLFVBQUFELEdBSUFqSSxVQUNBQyxLQUFBaUMsWUFBQThGLE1BQUF0RyxVQUFBRSxJQUFBLFFBR0E1QixhQUNBQyxLQUFBaUMsWUFBQXVELFVBQUEvRCxVQUFBQyxPQUFBLFFBR0EzQixhQUNBQyxLQUFBaUMsWUFBQXVELFVBQUEvRCxVQUFBRSxJQUFBLFFBR0E1QixpQkFDQSxPQUNBK0YsTUFBQTlGLEtBQUFpQyxZQUFBNkQsTUFBQTNFLE1BQ0EwRyxTQUFBN0gsS0FBQWlDLFlBQUE0RixTQUFBMUcsOEJDbENBNUQsZUFDQXdDLFlBQUFkLEVBQUFDLEVBQUFDLEdBQ0FhLEtBQUFmLE1BQUFBLEVBQ0FlLEtBQUFkLEtBQUFBLEVBQ0FjLEtBQUFiLE1BQUFBLEVBSUFZLE9BQ0FYLFFBQUFDLElBQUEsc0NDVEFoQyxVQUNBMEMsc0NDREF6QyxTQUNBeUMsY0FDQUMsS0FBQWlDLHNDQ0ZBekUsa0JBQ0F1QyxZQUFBZCxFQUFBQyxFQUFBQyxHQUNBYSxLQUFBZixNQUFBQSxFQUNBZSxLQUFBZCxLQUFBQSxFQUNBYyxLQUFBYixNQUFBQSxFQUtBWSxPQUNBWCxRQUFBQyxJQUFBLHlDQ1ZBNUIsYUFDQXNDLHNDQ0RBckMsWUFDQXFDLGNBQ0FDLEtBQUFpQyIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dXBkYXRlUm91dGV9IGZyb20gJy4vcm91dGVyLmpzJ1xuXG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdXBkYXRlUm91dGUpO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB1cGRhdGVSb3V0ZSk7XG5cbiIsImltcG9ydCBVdGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBPYnNlcnZlciBmcm9tICcuL2dhbGxlcnkvb2JzZXJ2ZXIuanMnO1xuXG5pbXBvcnRcdE1haW5Nb2RlbCBmcm9tXHQnLi9tYWluUGFnZS9tYWluLm1vZGVsLmpzJztcbmltcG9ydFx0TWFpblZpZXcgZnJvbVx0Jy4vbWFpblBhZ2UvbWFpbi52aWV3LmpzJztcbmltcG9ydFx0TWFpbkNvbnRyb2xsZXIgZnJvbVx0Jy4vbWFpblBhZ2UvbWFpbi5jb250cm9sbGVyLmpzJztcblxuaW1wb3J0IFByb2ZpbGVDb250cm9sbGVyIGZyb20gJy4vcHJvZmlsZS9wcm9maWxlLmNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IFByb2ZpbGVNb2RlbCBmcm9tICcuL3Byb2ZpbGUvcHJvZmlsZS5tb2RlbC5qcyc7XG5pbXBvcnQgUHJvZmlsZVZpZXcgZnJvbSAnLi9wcm9maWxlL3Byb2ZpbGUudmlldy5qcyc7XG5cblxuaW1wb3J0IEdhbGxlcnlDb250cm9sbGVyIGZyb20gJy4vZ2FsbGVyeS9nYWxsZXJ5LmNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IEdhbGxlcnlNb2RlbCBmcm9tICcuL2dhbGxlcnkvZ2FsbGVyeS5tb2RlbC5qcyc7XG5pbXBvcnQgR2FsbGVyeVZpZXcgZnJvbSAnLi9nYWxsZXJ5L2dhbGxlcnkudmlldy5qcyc7XG5cblxuXG5pbXBvcnQgTG9naW5Db250cm9sbGVyIGZyb20gJy4vbG9naW4vbG9naW4uY29udHJvbGxlci5qcyc7XG5pbXBvcnQgTG9naW5Nb2RlbCBmcm9tICcuL2xvZ2luL2xvZ2luLm1vZGVsLmpzJztcbmltcG9ydCBMb2dpblZpZXcgZnJvbSAnLi9sb2dpbi9sb2dpbi52aWV3LmpzJztcblxubGV0IG1haW5QYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtYWluLXZpZXdcIik7XG5sZXQgcHJvZmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS12aWV3XCIpO1xubGV0IGdhbGxlcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dhbGxlcnktdmlld1wiKTtcbmxldCBtYWluUGFnZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWFpblBhZ2VCdG5cIik7XG5sZXQgcHJvZmlsZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZUJ0blwiKTtcbmxldCBnYWxsZXJ5QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNnYWxsZXJ5QnRuXCIpO1xuLy9sZXQgbG9naW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xvZ2luLXZpZXdcIik7XG4vL2xldCBjb250YWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb250YWN0LXZpZXdcIik7XG5cblxuXG5sZXQgYWN0aXZhdGVkUm91dGVzID0ge307XG5cbmxldCByb3V0ZUNvbmZpZyA9IHtcbiAgICBcIm1haW5QYWdlXCIgOiB7XG4gICAgICAgIHNob3cgOiAoKSA9PiB7XG5cdFx0XHRcdFx0XHRVdGlscy5zaG93VmlldyhbbWFpblBhZ2VdKTtcbiAgICAgICAgICAgIFV0aWxzLmhpZGVWaWV3KFtwcm9maWxlLCBnYWxsZXJ5XSk7XG5cdFx0XHRcdFx0XHRVdGlscy5hY3RpdmF0ZUJ0bihbbWFpblBhZ2VCdG5dKTtcblx0XHRcdFx0XHRcdFV0aWxzLmRpc2FjdGl2YXRlQnRuKFtwcm9maWxlQnRuLCBnYWxsZXJ5QnRuXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGluaXQgOiAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgbW9kZWwgPSBuZXcgTWFpbk1vZGVsO1xuICAgICAgICAgICAgbGV0IHZpZXcgPSBuZXcgTWFpblZpZXc7XG5cdFx0XHRcdFx0XHRsZXQgdXRpbHMgPSBuZXcgVXRpbHM7XG4gICAgICAgICAgICBsZXQgbWFpbkNvbnRlcm9sbGVyID0gbmV3IE1haW5Db250cm9sbGVyKG1vZGVsLCB2aWV3LCB1dGlscyk7XG5cdFx0XHRcdFx0XHRtYWluQ29udGVyb2xsZXIuaW5pdCgpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBcInByb2ZpbGVcIiA6IHtcbiAgICAgICAgc2hvdyA6ICgpID0+IHtcbiAgICAgICAgICAgIFV0aWxzLnNob3dWaWV3KFtwcm9maWxlXSk7XG4gICAgICAgICAgICBVdGlscy5oaWRlVmlldyhbbWFpblBhZ2UsIGdhbGxlcnldKTtcblx0XHRcdFx0XHRcdFV0aWxzLmFjdGl2YXRlQnRuKFtwcm9maWxlQnRuXSk7XG5cdFx0XHRcdFx0XHRVdGlscy5kaXNhY3RpdmF0ZUJ0bihbbWFpblBhZ2VCdG4sIGdhbGxlcnlCdG5dKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ29udGFjdHMgcm91dGUgaXMgbG9hZGVkXCIpXG4gICAgICAgIH0sXG4gICAgICAgIGluaXQgOiAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgbW9kZWwgPSBuZXcgUHJvZmlsZU1vZGVsO1xuICAgICAgICAgICAgbGV0IHZpZXcgPSBuZXcgUHJvZmlsZVZpZXc7XG5cdFx0XHRcdFx0XHRsZXQgdXRpbHMgPSBuZXcgVXRpbHM7XG4gICAgICAgICAgICBuZXcgUHJvZmlsZUNvbnRyb2xsZXIobW9kZWwsIHZpZXcsIHV0aWxzKVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImdhbGxlcnlcIiA6IHtcbiAgICAgICAgc2hvdyA6ICgpID0+IHtcbiAgICAgICAgICAgIFV0aWxzLnNob3dWaWV3KFtnYWxsZXJ5XSk7XG4gICAgICAgICAgICBVdGlscy5oaWRlVmlldyhbbWFpblBhZ2UsIHByb2ZpbGVdKTtcblx0XHRcdFx0XHRcdFV0aWxzLmFjdGl2YXRlQnRuKFtnYWxsZXJ5QnRuXSk7XG5cdFx0XHRcdFx0XHRVdGlscy5kaXNhY3RpdmF0ZUJ0bihbbWFpblBhZ2VCdG4sIHByb2ZpbGVCdG5dKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTWFpbiByb3V0ZSBpcyBsb2FkZWRcIilcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdCA6ICgpID0+IHtcbiAgICAgICAgICAgIGxldCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlcjtcbiAgICAgICAgICAgIGxldCBtb2RlbCA9IG5ldyBHYWxsZXJ5TW9kZWw7XG4gICAgICAgICAgICBsZXQgdmlldyA9IG5ldyBHYWxsZXJ5VmlldztcbiAgICAgICAgICAgIG5ldyBHYWxsZXJ5Q29udHJvbGxlcihtb2RlbCwgdmlldywgb2JzZXJ2ZXIsIG5ldyBVdGlscylcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVSb3V0ZShyb3V0ZU5hbWUpe1xuICAgIGlmIChhY3RpdmF0ZWRSb3V0ZXNbcm91dGVOYW1lXSkge1xuICAgICAgICBhY3RpdmF0ZWRSb3V0ZXNbcm91dGVOYW1lXSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCByb3V0ZSA9IHJvdXRlQ29uZmlnW3JvdXRlTmFtZV07XG4gICAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICAgICAgcm91dGUuaW5pdCgpO1xuICAgICAgICAgICAgcm91dGUuc2hvdygpO1xuICAgICAgICAgICAgYWN0aXZhdGVkUm91dGVzW3JvdXRlTmFtZV0gPSByb3V0ZS5zaG93O1xuICAgICAgICB9XG4gICAgfSBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVJvdXRlKCkge1xuICAgIGxldCByb3V0ZU5hbWUgPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoL14jLywgJycpO1xuICAgIGlmKHJvdXRlTmFtZSAmJiAhVXRpbHMuaXNMb2dnZWRJbigpKSB7XG4gICAgICAgIFV0aWxzLm5hdmlnYXRlVG8oXCJcIik7IFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlUm91dGUocm91dGVOYW1lKTtcbiAgICB9XG4gICAgXG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlscyB7XG5cbiAgICBjb25zdHJ1Y3Rvcigpe1xuXG5cdFx0XHRcbiAgICAgICAgdGhpcy5zb3J0aW5nQ29uZmlnID0ge1xuICAgICAgICAgIFxuICAgICAgICAgICAgXCJBXCI6IHBhZ2UgPT4ge1xuICAgICAgICAgICAgICAgIHBhZ2Uuc29ydCgoYSwgYikgPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmVtYWlsID4gYi5lbWFpbCA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICB9KTsgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJaXCI6IHBhZ2UgPT4ge1xuICAgICAgICAgICAgICAgIHBhZ2Uuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5lbWFpbCA8IGIuZW1haWwgPyAxIDogLTE7O1xuICAgICAgICAgICAgICAgIH0pOyBcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFnZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIkFkbWluXCI6IHBhZ2UgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYWdlLmZpbHRlcigoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5yb2xlID09IFwiQWRtaW5cIjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiVXNlclwiOiBwYWdlID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFnZS5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ucm9sZSA9PSBcIlVzZXJcIjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiRmluZFwiOiBwYWdlID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXhwID0gbmV3IFJlZ0V4cChldmVudC50YXJnZXQudmFsdWUsIFwiaVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBwYWdlLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cC50ZXN0KGl0ZW0ubmFtZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBzaG93Vmlldyh2aWV3cykge1xuICAgICAgICB2aWV3cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZVwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGhpZGVWaWV3KHZpZXdzKSB7XG4gICAgICAgIHZpZXdzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbmF2aWdhdGVUbyhyb3V0ZU5hbWUpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2g9IFwiI1wiICsgcm91dGVOYW1lO1xuICAgIH1cblxuICAgIC8vIHN0YXRpYyBpc0xvZ2dlZEluKCkge1xuICAgIC8vICAgICBsZXQgY3JlZGVudGlhbHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjcmVkZW50aWFscycpKTtcbiAgICAvLyAgICAgcmV0dXJuICEhY3JlZGVudGlhbHM7XG4gICAgLy8gfVxuXHRcdHN0YXRpYyBpc0xvZ2dlZEluKCkge1xuICAgICAgICAvL2xldCBjcmVkZW50aWFscyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NyZWRlbnRpYWxzJykpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cblx0XHRzdGF0aWMgYWN0aXZhdGVCdG4oYnRucyl7XG5cdFx0XHRcdGJ0bnMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgICAgICB9KTtcblx0XHR9XG5cdFx0c3RhdGljIGRpc2FjdGl2YXRlQnRuKGJ0bnMpe1xuXHRcdFx0XHRidG5zLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgICAgfSk7XG5cdFx0fVxuIFxuXG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBHYWxsZXJ5Q29udHJvbGxlciB7IFxyXG4gICAgY29uc3RydWN0b3IobW9kZWwsIHZpZXcsIG9ic2VydmVyLCB1dGlscykge1xyXG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBvYnNlcnZlcjtcclxuICAgICAgICB0aGlzLnV0aWxzID0gdXRpbHM7XHJcbiAgICAgICAgdGhpcy5wYWdlQ29uZmlnID0ge1xyXG4gICAgICAgICAgICBpdGVtc1BlclBhZ2UgOiAxMCxcclxuXHRcdFx0Y3VycmVudFBhZ2U6IDBcclxuXHRcdH1cclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH0gICAgICAgIFxyXG5cclxuICAgIGluaXRMaXN0ZW5lcnMoKSB7XHJcblx0XHR0aGlzLnZpZXcuRE9NRWxlbWVudHMudXNlckxpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMudGFibGVMaW5lSGFuZGxlci5iaW5kKHRoaXMpKTtcclxuXHRcdFxyXG5cdFx0dGhpcy52aWV3LkRPTUVsZW1lbnRzLnNlYXJjaC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5zZWFyY2hIYW5kbGVyLmJpbmQodGhpcykpO1xyXG5cdFx0dGhpcy52aWV3LkRPTUVsZW1lbnRzLmVtYWlsRHJvcGRvd24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuc29ydGluZ0hhbmRsZXIuYmluZCh0aGlzKSk7XHJcblx0XHR0aGlzLnZpZXcuRE9NRWxlbWVudHMucm9sZURyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnNvcnRpbmdIYW5kbGVyLmJpbmQodGhpcykpO1xyXG5cdFx0XHJcbiAgICAgICAgdGhpcy52aWV3LkRPTUVsZW1lbnRzLm5leHRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuZ2V0TmV4dFBhZ2VIYW5kbGVyLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIHRhYmxlTGluZUhhbmRsZXIoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0bGV0IGlzQnV0dG9uID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtcm93LWlkXCIpO1xyXG5cdFx0aXNCdXR0b24gPyB0aGlzLm9wZW5EZXRhaWwoaXNCdXR0b24pIDogdGhpcy52aWV3LnNlbGVjdFRhYmxlTGluZShldmVudCk7XHJcblx0fVxyXG5cclxuXHRvcGVuRGV0YWlsKGJ1dHRvbklkKSB7XHJcblx0XHRsZXQgdXNlciA9IHRoaXMubW9kZWwuZ2V0VXNlckJ5SWQoYnV0dG9uSWQpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgdGhpcy52aWV3LnNob3dTaW5nbGVVc2VyKGRhdGEpO1xyXG4gICAgICAgIH0pOyBcdFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzZWFyY2hIYW5kbGVyKGV2ZW50KSB7XHJcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0bGV0IHZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xyXG5cdFx0aWYgKGV2ZW50LmtleUNvZGUgPT09IDEzICYmICh2YWx1ZS5sZW5ndGggPT0gMCB8fCB2YWx1ZS5sZW5ndGggPiAyKSkge1xyXG5cdFx0XHR0aGlzLnBhZ2VDb25maWcuY3VycmVudFBhZ2UgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcuY2xlYXJMaXN0KCk7XHJcblx0XHRcdHRoaXMudmlldy5idWlsZFVzZXJzTGlzdCh0aGlzLmdldE5leHRQYWdlKCksIHRoaXMudXRpbHMuc29ydGluZ0NvbmZpZ1tcIkZpbmRcIl0pO1xyXG5cdFx0IH1cclxuXHR9XHJcblxyXG5cdHNvcnRpbmdIYW5kbGVyKGV2ZW50KSB7XHJcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0dGhpcy52aWV3LnVwZGF0ZUJ1dHRvblRleHQoZXZlbnQpO1xyXG5cdFx0dGhpcy5hcHBseVNvcnRpbmdNZXRob2QodGhpcy52aWV3LmdldFNvcnRpbmdUeXBlKGV2ZW50KSk7XHJcblx0fVxyXG4gICAgXHJcbiAgICBnZXROZXh0UGFnZUhhbmRsZXIoZXZlbnQpIHtcclxuICAgICAgICBldmVudCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMudmlldy5idWlsZFVzZXJzTGlzdCh0aGlzLmdldE5leHRQYWdlKCkpO1xyXG4gICAgICAgIHRoaXMuaXNMYXN0UGFnZSgpOyBcclxuICAgIH1cclxuXHJcblx0YXBwbHlTb3J0aW5nTWV0aG9kKHNvcnRpbmdUeXBlKSB7XHJcbiAgICAgICAgaWYgKCFzb3J0aW5nVHlwZSl7cmV0dXJufVxyXG5cdFx0dGhpcy5wYWdlQ29uZmlnLmN1cnJlbnRQYWdlID0gMDtcclxuICAgICAgICB0aGlzLnZpZXcuY2xlYXJMaXN0KCk7XHJcblx0XHR0aGlzLnZpZXcuYnVpbGRVc2Vyc0xpc3QodGhpcy5nZXROZXh0UGFnZSgpLCB0aGlzLnV0aWxzLnNvcnRpbmdDb25maWdbc29ydGluZ1R5cGVdKTtcclxuXHR9XHJcblxyXG4gICAgZ2V0TmV4dFBhZ2UoKXtcclxuXHRcdGxldCBzdGFydCA9IHRoaXMucGFnZUNvbmZpZy5pdGVtc1BlclBhZ2UgKiB0aGlzLnBhZ2VDb25maWcuY3VycmVudFBhZ2U7XHJcblx0XHRsZXQgZW5kID0gdGhpcy5wYWdlQ29uZmlnLml0ZW1zUGVyUGFnZSArIHN0YXJ0O1xyXG5cdFx0dGhpcy5wYWdlQ29uZmlnLmN1cnJlbnRQYWdlKys7XHJcblx0XHRyZXR1cm4gdGhpcy5tb2RlbC51c2Vyc0xpc3REYXRhLnNsaWNlKHN0YXJ0LCBlbmQpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpc0xhc3RQYWdlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzTWF4UGFnZSgpKXtcclxuICAgICAgICAgICAgdGhpcy52aWV3LmhpZGVOZXh0UGFnZSgpO1x0XHJcbiAgICAgICAgICAgIHRoaXMuY291bnRTdGF0cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblx0aXNNYXhQYWdlKCkge1xyXG5cdFx0cmV0dXJuICh0aGlzLnBhZ2VDb25maWcuY3VycmVudFBhZ2UgKiB0aGlzLnBhZ2VDb25maWcuaXRlbXNQZXJQYWdlKSA+PSB0aGlzLm1vZGVsLnVzZXJzTGlzdERhdGEubGVuZ3RoO1xyXG5cdH1cclxuXHJcblx0Y291bnRTdGF0cygpe1xyXG5cdFx0bGV0IHN0YXRzID0gdGhpcy5tb2RlbC51c2Vyc0xpc3REYXRhLnJlZHVjZSgoc3VtLCBpdGVtKSA9PiB7XHJcblx0XHRcdChpdGVtLnJvbGUgPT0gXCJBZG1pblwiKSA/IHN1bS5hZG1pbnMrKyA6XHRzdW0udXNlcnMrKztcclxuXHRcdFx0cmV0dXJuIHN1bTtcclxuXHRcdH0sIHthZG1pbnM6MCwgdXNlcnM6MH0pO1xyXG5cdFx0dGhpcy52aWV3LnNob3dTdGF0cyhzdGF0cyk7XHJcblx0fVxyXG5cdFxyXG5cdGluaXQoKXtcclxuXHRcdGNvbnNvbGUubG9nKFwiZ2FsbGVyeSBpbml0ZWRcIilcclxuICAgICAgICAvLyB0aGlzLm1vZGVsLmdldFVzZXJMaXN0KCkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmluaXRMaXN0ZW5lcnMoKVxyXG4gICAgICAgIC8vICAgICB0aGlzLnZpZXcuYnVpbGRVc2Vyc0xpc3QodGhpcy5nZXROZXh0UGFnZSgpKTtcclxuICAgICAgICAvLyAgICAgdGhpcy5pc0xhc3RQYWdlKCk7XHJcbiAgICAgICAgLy8gfSk7IFx0XHJcblx0fVxyXG4gICAgXHJcbn1cclxuXHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbGxlcnlNb2RlbCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmdldFVybCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvdXNlcnNMaXN0JztcclxuICAgICAgICB0aGlzLnVzZXJzTGlzdERhdGEgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VyTGlzdCgpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2godGhpcy5nZXRVcmwpLnRoZW4ocmVzcG9uY2UgPT4gcmVzcG9uY2UuanNvbigpKVxyXG4gICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRhdGEgaXMgbG9hZGVkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJzTGlzdERhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICB9KSAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJCeUlkKGlkKSB7XHJcbiAgICAgIHJldHVybiBmZXRjaCh0aGlzLmdldFVybCArIFwiL1wiICsgaWQpLnRoZW4ocmVzcG9uY2UgPT4gcmVzcG9uY2UuanNvbigpKVxyXG4gICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICB9KSAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzYXZlVXNlcihpdGVtKSB7ICAgICAgICAgXHJcblxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB1cGRhdGVVc2VyKGNvdW50ZXIpIHtcclxuICAgICAgXHJcbiAgICB9XHJcblxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbGxlcnlWaWV3IHsgICAgICAgIFxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5ET01FbGVtZW50cyA9IHtcclxuICAgICAgICB9OyAgICAgXHJcbiAgICAgICBcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE9ic2VydmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICB9XG5cbiAgICBzdWJzY3JpYmVFdmVudChuYW1lLCBmdW5jKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzW25hbWVdID0gZnVuYztcbiAgICB9XG4gICAgXG4gICAgY2FsbEV2ZW50KG5hbWUsIGFyZykge1xuICAgICAgICBpZiAodGhpcy5ldmVudHNbbmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW25hbWVdKGFyZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBMb2dpbkNvbnRyb2xsZXIgeyBcclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsLCB2aWV3LCB1dGlscykge1xyXG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgICAgIHRoaXMudXRpbHMgPSB1dGlscztcclxuICAgICAgICAvL3RoaXMuaW5pdExpc3RlbmVycygpO1xyXG4gICAgfSBcclxuXHJcbiAgICBpbml0TGlzdGVuZXJzKCkgeyBcclxuICAgICAgICB0aGlzLnZpZXcuRE9NRWxlbWVudHMubG9nSW5CdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMubG9naW5IYW5kbGVyLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMudmlldy5ET01FbGVtZW50cy5sb2dPdXRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMubG9nb3V0SGFuZGxlci5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2dpbkhhbmRsZXIoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBsZXQgY3JlZGVudGlhbHMgPSB0aGlzLnZpZXcuZ2V0Q3JlZGVudGlhbHMoKTtcclxuICAgICAgICBpZiAodGhpcy5tb2RlbC52YWxpZGF0ZShjcmVkZW50aWFscykpe1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxvZ2luKGNyZWRlbnRpYWxzKS50aGVuKFxyXG4gICAgICAgICAgICAgICAgZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubG9naW5TdGF0dXMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuaGlkZU1zZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2hvd0xvZ291dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWxzLm5hdmlnYXRlVG8oXCJnYWxsZXJ5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zaG93TXNnKHRoaXMubW9kZWwuZ2V0RXJyb3JNc2coKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlldy5zaG93TXNnKHRoaXMubW9kZWwuZ2V0RXJyb3JNc2coKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxvZ291dEhhbmRsZXIoKSB7XHJcbiAgICAgICAgdGhpcy52aWV3LmhpZGVMb2dvdXQoKTtcclxuICAgICAgICB0aGlzLm1vZGVsLmxvZ291dCgpO1xyXG4gICAgICAgIHRoaXMudXRpbHMubmF2aWdhdGVUbyhcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0KCkgeyBcclxuXHRcdFx0Y29uc29sZS5sb2coXCJsb2dpbiBpbml0ZWRcIilcclxuXHRcdH1cclxuICAgIFxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIExvZ2luTW9kZWwge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMubG9naW5VcmwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9sb2dpblwiO1xyXG4gICAgICAgIHRoaXMuZW1haWxQYXR0ZXJuID0gL15cXHcrQFxcdytcXC5cXHd7Miw0fSQvaTtcclxuICAgICAgICB0aGlzLnBhc3N3b3JkUGF0dGVybiA9IC9eW2EtekEtWjAtOV17OCwzMH0kLztcclxuICAgICAgICB0aGlzLmVycm9yTXNnID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVycm9yTXNnTWFwID0ge1xyXG4gICAgICAgICAgICBcImVtcHR5XCIgICAgIDogJ9Cf0L7QttCw0LvRg9C50YHRgtCwINC30LDQv9C+0LvQvdC40YLQtSDQv9C+0LvRjyDQu9C+0LPQuNC9INC4INC/0LDRgNC+0LvRjCcsXHJcbiAgICAgICAgICAgIFwibG9naW5FcnJvclwiOiAn0JvQvtCz0LjQvSDQstCy0LXQtNC10L0g0L3QtdCy0LXRgNC90L4uINCi0L7Qu9GM0LrQviDQu9Cw0YLQuNC90YHQutC40LUg0LHRg9C60LLRiy4nLFxyXG4gICAgICAgICAgICBcInBhc3NFcnJvclwiIDogJ9Cf0LDRgNC+0LvRjCDQstCy0LXQtNC10L0g0L3QtdCy0LXRgNC90L4uINCi0L7Qu9GM0Log0LvQsNGC0LjQvdGB0LrQuNC1INCx0YPQutCy0YssINGG0LjRhNGA0YsuINCU0LvQuNC90LAg0L3QtSDQvNC10L3QtdC1IDgg0YHQuNC80LLQvtC70L7QsicsXHJcbiAgICAgICAgICAgIFwibWlzc21hdGNoXCIgOiAn0J3QtdC/0YDQsNCy0LjQu9GM0L3Ri9C1INC70L7Qs9C40L0g0LjQu9C4INC/0LDRgNC+0LvRjC4nXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZShjcmVkZW50aWFscykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzRW1wdHkoY3JlZGVudGlhbHMpIFxyXG4gICAgICAgICAgICAmJiB0aGlzLmlzRW1haWxBc3NlcnRQYXR0ZXJuKGNyZWRlbnRpYWxzKSBcclxuICAgICAgICAgICAgJiYgdGhpcy5pc1Bhc3N3b3JkQXNzZXJ0UGF0dGVybihjcmVkZW50aWFscyk7ICAgICBcclxuICAgIH1cclxuXHJcbiAgICBsb2dpbihjcmVkZW50aWFscyl7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGNyZWRlbnRpYWxzKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKHRoaXMubG9naW5VcmwsIG9wdGlvbnMpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbmNlID0+IHJlc3BvbmNlLmpzb24oKSlcclxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5sb2dpblN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjcmVkZW50aWFscycsIEpTT04uc3RyaW5naWZ5KGNyZWRlbnRpYWxzKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNc2coXCJtaXNzbWF0Y2hcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldEVycm9yTXNnKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yTXNnO1xyXG4gICAgfVxyXG4gICAgc2V0RXJyb3JNc2coa2V5KXtcclxuICAgICAgICB0aGlzLmVycm9yTXNnID0gdGhpcy5lcnJvck1zZ01hcFtrZXldO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlzRW1wdHkoY3JlZGVudGlhbHMpIHtcclxuICAgICAgICByZXR1cm4gKGNyZWRlbnRpYWxzLmxvZ2luICYmIGNyZWRlbnRpYWxzLnBhc3N3b3JkKSB8fCB0aGlzLnNldEVycm9yTXNnKFwiZW1wdHlcIik7XHJcbiAgICB9XHJcbiAgICBpc0VtYWlsQXNzZXJ0UGF0dGVybihjcmVkZW50aWFscykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVtYWlsUGF0dGVybi50ZXN0KGNyZWRlbnRpYWxzLmxvZ2luKSB8fCB0aGlzLnNldEVycm9yTXNnKFwibG9naW5FcnJvclwiKVxyXG4gICAgfVxyXG4gICAgaXNQYXNzd29yZEFzc2VydFBhdHRlcm4oY3JlZGVudGlhbHMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXNzd29yZFBhdHRlcm4udGVzdChjcmVkZW50aWFscy5wYXNzd29yZCkgfHwgdGhpcy5zZXRFcnJvck1zZyhcInBhc3NFcnJvclwiKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsb2dvdXQoKXtcclxuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnY3JlZGVudGlhbHMnKTtcclxuICAgIH1cclxuXHJcbn1cclxuIFxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBMb2dpblZpZXcgIHsgICAgICAgIFxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5ET01FbGVtZW50cyA9IHtcclxuICAgICAgICAgICAgbG9naW46IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbnB1dEVtYWlsJyksXHJcbiAgICAgICAgICAgIHBhc3N3b3JkOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW5wdXRQYXNzd29yZCcpLFxyXG4gICAgICAgICAgICBhbGVydDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFsZXJ0JyksXHJcblxyXG4gICAgICAgICAgICBsb2dJbkJ0bjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xvZy1pbi1idG4nKSxcclxuICAgICAgICAgICAgbG9nT3V0QnRuOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG9nLW91dC1idG4nKSxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd01zZyhtc2cpIHtcclxuICAgICAgICBpZiAobXNnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuRE9NRWxlbWVudHMuYWxlcnQuY2xhc3NMaXN0LnJlbW92ZShcImhpZGVcIik7XHJcbiAgICAgICAgICAgIHRoaXMuRE9NRWxlbWVudHMuYWxlcnQuaW5uZXJIVE1MID0gbXNnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoaWRlTXNnKCkge1xyXG4gICAgICAgIHRoaXMuRE9NRWxlbWVudHMuYWxlcnQuY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd0xvZ291dCgpIHtcclxuICAgICAgICB0aGlzLkRPTUVsZW1lbnRzLmxvZ091dEJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlTG9nb3V0KCkge1xyXG4gICAgICAgIHRoaXMuRE9NRWxlbWVudHMubG9nT3V0QnRuLmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENyZWRlbnRpYWxzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxvZ2luOiB0aGlzLkRPTUVsZW1lbnRzLmxvZ2luLnZhbHVlLFxyXG4gICAgICAgICAgICBwYXNzd29yZDogdGhpcy5ET01FbGVtZW50cy5wYXNzd29yZC52YWx1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuICAgICIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW5Db250cm9sbGVyIHsgXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCwgdmlldywgdXRpbHMpIHtcclxuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7XHJcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgICAgICB0aGlzLnV0aWxzID0gdXRpbHM7XHJcbiAgICB9ICAgICAgICBcclxuXHJcblx0XHJcblx0aW5pdCgpe1xyXG5cdFx0Y29uc29sZS5sb2coXCJtYWluIGluaXRlZFwiKVxyXG4gICAgICAgIC8vIHRoaXMubW9kZWwuZ2V0VXNlckxpc3QoKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuaW5pdExpc3RlbmVycygpXHJcbiAgICAgICAgLy8gICAgIHRoaXMudmlldy5idWlsZFVzZXJzTGlzdCh0aGlzLmdldE5leHRQYWdlKCkpO1xyXG4gICAgICAgIC8vICAgICB0aGlzLmlzTGFzdFBhZ2UoKTtcclxuICAgICAgICAvLyB9KTsgXHRcclxuXHR9XHJcbiAgICBcclxufVxyXG5cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFpbk1vZGVsIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgXHJcbiAgICB9XHJcblxyXG5cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNYWluVmlldyB7ICAgICAgICBcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuRE9NRWxlbWVudHMgPSB7XHJcbiAgICAgICAgfTsgICAgIFxyXG4gICAgICAgXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9maWxlQ29udHJvbGxlciB7IFxyXG5cdGNvbnN0cnVjdG9yKG1vZGVsLCB2aWV3LCB1dGlscykge1xyXG5cdFx0XHR0aGlzLm1vZGVsID0gbW9kZWw7XHJcblx0XHRcdHRoaXMudmlldyA9IHZpZXc7XHJcblx0XHRcdHRoaXMudXRpbHMgPSB1dGlscztcclxuXHRcdFx0XHJcblx0fVxyXG4gICBcclxuXHRcclxuXHRpbml0KCl7XHJcblx0XHRjb25zb2xlLmxvZyhcInByb2ZpbGUgaW5pdGVkXCIpO1xyXG5cdFx0XHJcbiAgICAgICAgLy8gdGhpcy5tb2RlbC5nZXRVc2VyTGlzdCgpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAvLyAgICAgdGhpcy5pbml0TGlzdGVuZXJzKClcclxuICAgICAgICAvLyAgICAgdGhpcy52aWV3LmJ1aWxkVXNlcnNMaXN0KHRoaXMuZ2V0TmV4dFBhZ2UoKSk7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuaXNMYXN0UGFnZSgpO1xyXG4gICAgICAgIC8vIH0pOyBcdFxyXG5cdH1cclxuICAgIFxyXG59XHJcblxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9maWxlTW9kZWwge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9maWxlVmlldyB7ICAgICAgICBcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuRE9NRWxlbWVudHMgPSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH07ICAgICBcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBcclxufVxyXG5cclxuIl19
