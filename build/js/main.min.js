'use strict';

var _router = require('./router.js');

window.addEventListener('load', _router.updateRoute);
window.addEventListener('hashchange', _router.updateRoute);
"use strict";

var $input = $('<div class="modal-body"><input type="text" class="form-control" placeholder="Message"></div>');$(document).on("click", ".js-msgGroup", function () {
  $(".js-msgGroup, .js-newMsg").addClass("d-none"), $(".js-conversation").removeClass("d-none"), $(".modal-title").html('<a href="#" class="js-gotoMsgs">Back</a>'), $input.insertBefore(".js-modalBody");
}), $(function () {
  function o() {
    return $('[data-toggle="popover"]').length ? $(window).width() - ($('[data-toggle="popover"]').offset().left + $('[data-toggle="popover"]').outerWidth()) : 0;
  }$(window).on("resize", function () {
    var t = $('[data-toggle="popover"]').data("bs.popover");t && (t.config.viewport.padding = o());
  }), $('[data-toggle="popover"]').popover({ template: '<div class="popover" role="tooltip"><div class="arrow"></div><div class="popover-body popover-content px-0"></div></div>', title: "", html: !0, trigger: "manual", placement: "bottom", viewport: { selector: "body", padding: o() }, content: function content() {
      var o = $("#js-popoverContent").clone();return '<ul class="nav nav-pills nav-stacked flex-column" style="width: 120px">' + o.html() + "</ul>";
    } }), $('[data-toggle="popover"]').on("click", function (o) {
    o.stopPropagation(), $($('[data-toggle="popover"]').data("bs.popover").getTipElement()).hasClass("in") ? ($('[data-toggle="popover"]').popover("hide"), $(document).off("click.app.popover")) : ($('[data-toggle="popover"]').popover("show"), setTimeout(function () {
      $(document).one("click.app.popover", function () {
        $('[data-toggle="popover"]').popover("hide");
      });
    }, 1));
  });
}), $(document).on("click", ".js-gotoMsgs", function () {
  $input.remove(), $(".js-conversation").addClass("d-none"), $(".js-msgGroup, .js-newMsg").removeClass("d-none"), $(".modal-title").html("Messages");
}), $(document).on("click", "[data-action=growl]", function (o) {
  o.preventDefault(), $("#app-growl").append('<div class="alert alert-dark alert-dismissible fade show" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>Click the x on the upper right to dismiss this little thing. Or click growl again to show more growls</div>');
}), $(document).on("focus", '[data-action="grow"]', function () {
  $(window).width() > 1e3 && $(this).animate({ width: 300 });
}), $(document).on("blur", '[data-action="grow"]', function () {
  if ($(window).width() > 1e3) {
    $(this).animate({ width: 180 });
  }
}), $(function () {
  function o() {
    $(window).scrollTop() > $(window).height() ? $(".docs-top").fadeIn() : $(".docs-top").fadeOut();
  }$(".docs-top").length && (o(), $(window).on("scroll", o));
}), $(function () {
  function o() {
    a.width() > 768 ? e() : t();
  }function t() {
    a.off("resize.theme.nav"), a.off("scroll.theme.nav"), n.css({ position: "", left: "", top: "" });
  }function e() {
    function o() {
      e.containerTop = $(".docs-content").offset().top - 40, e.containerRight = $(".docs-content").offset().left + $(".docs-content").width() + 45, t();
    }function t() {
      var o = a.scrollTop(),
          t = Math.max(o - e.containerTop, 0);return t ? void n.css({ position: "fixed", left: e.containerRight, top: 40 }) : ($(n.find("li a")[1]).addClass("active"), n.css({ position: "", left: "", top: "" }));
    }var e = {};o(), $(window).on("resize.theme.nav", o).on("scroll.theme.nav", t), $("body").scrollspy({ target: "#markdown-toc" }), setTimeout(function () {
      $("body").scrollspy("refresh");
    }, 1e3);
  }var n = $("#markdown-toc");$("#markdown-toc li").addClass("nav-item"), $("#markdown-toc li > a").addClass("nav-link"), $("#markdown-toc li > ul").addClass("nav");var a = $(window);n[0] && (o(), a.on("resize", o));
});
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function () {
  "use strict";
  var t = this,
      i = t.Chart,
      e = function e(t) {
    this.canvas = t.canvas, this.ctx = t;var i = function i(t, _i) {
      return t["offset" + _i] ? t["offset" + _i] : document.defaultView.getComputedStyle(t).getPropertyValue(_i);
    },
        e = this.width = i(t.canvas, "Width"),
        n = this.height = i(t.canvas, "Height");t.canvas.width = e, t.canvas.height = n;var e = this.width = t.canvas.width,
        n = this.height = t.canvas.height;return this.aspectRatio = this.width / this.height, s.retinaScale(this), this;
  };e.defaults = { global: { animation: !0, animationSteps: 60, animationEasing: "easeOutQuart", showScale: !0, scaleOverride: !1, scaleSteps: null, scaleStepWidth: null, scaleStartValue: null, scaleLineColor: "rgba(0,0,0,.1)", scaleLineWidth: 1, scaleShowLabels: !0, scaleLabel: "<%=value%>", scaleIntegersOnly: !0, scaleBeginAtZero: !1, scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif", scaleFontSize: 12, scaleFontStyle: "normal", scaleFontColor: "#666", responsive: !1, maintainAspectRatio: !0, showTooltips: !0, customTooltips: !1, tooltipEvents: ["mousemove", "touchstart", "touchmove", "mouseout"], tooltipFillColor: "rgba(0,0,0,0.8)", tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif", tooltipFontSize: 14, tooltipFontStyle: "normal", tooltipFontColor: "#fff", tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif", tooltipTitleFontSize: 14, tooltipTitleFontStyle: "bold", tooltipTitleFontColor: "#fff", tooltipYPadding: 6, tooltipXPadding: 6, tooltipCaretSize: 8, tooltipCornerRadius: 6, tooltipXOffset: 10, tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>", multiTooltipTemplate: "<%= value %>", multiTooltipKeyBackground: "#fff", onAnimationProgress: function onAnimationProgress() {}, onAnimationComplete: function onAnimationComplete() {} } }, e.types = {};var s = e.helpers = {},
      n = s.each = function (t, i, e) {
    var s = Array.prototype.slice.call(arguments, 3);if (t) if (t.length === +t.length) {
      var n;for (n = 0; n < t.length; n++) {
        i.apply(e, [t[n], n].concat(s));
      }
    } else for (var o in t) {
      i.apply(e, [t[o], o].concat(s));
    }
  },
      o = s.clone = function (t) {
    var i = {};return n(t, function (e, s) {
      t.hasOwnProperty(s) && (i[s] = e);
    }), i;
  },
      a = s.extend = function (t) {
    return n(Array.prototype.slice.call(arguments, 1), function (i) {
      n(i, function (e, s) {
        i.hasOwnProperty(s) && (t[s] = e);
      });
    }), t;
  },
      h = s.merge = function (t, i) {
    var e = Array.prototype.slice.call(arguments, 0);return e.unshift({}), a.apply(null, e);
  },
      l = s.indexOf = function (t, i) {
    if (Array.prototype.indexOf) return t.indexOf(i);for (var e = 0; e < t.length; e++) {
      if (t[e] === i) return e;
    }return -1;
  },
      r = (s.where = function (t, i) {
    var e = [];return s.each(t, function (t) {
      i(t) && e.push(t);
    }), e;
  }, s.findNextWhere = function (t, i, e) {
    e || (e = -1);for (var s = e + 1; s < t.length; s++) {
      var n = t[s];if (i(n)) return n;
    }
  }, s.findPreviousWhere = function (t, i, e) {
    e || (e = t.length);for (var s = e - 1; s >= 0; s--) {
      var n = t[s];if (i(n)) return n;
    }
  }, s.inherits = function (t) {
    var i = this,
        e = t && t.hasOwnProperty("constructor") ? t.constructor : function () {
      return i.apply(this, arguments);
    },
        s = function s() {
      this.constructor = e;
    };return s.prototype = i.prototype, e.prototype = new s(), e.extend = r, t && a(e.prototype, t), e.__super__ = i.prototype, e;
  }),
      c = s.noop = function () {},
      u = s.uid = function () {
    var t = 0;return function () {
      return "chart-" + t++;
    };
  }(),
      d = s.warn = function (t) {
    window.console && "function" == typeof window.console.warn && console.warn(t);
  },
      p = s.amd = "function" == typeof define && define.amd,
      f = s.isNumber = function (t) {
    return !isNaN(parseFloat(t)) && isFinite(t);
  },
      g = s.max = function (t) {
    return Math.max.apply(Math, t);
  },
      v = s.min = function (t) {
    return Math.min.apply(Math, t);
  },
      m = (s.cap = function (t, i, e) {
    if (f(i)) {
      if (t > i) return i;
    } else if (f(e) && t < e) return e;return t;
  }, s.getDecimalPlaces = function (t) {
    return t % 1 !== 0 && f(t) ? t.toString().split(".")[1].length : 0;
  }),
      x = s.radians = function (t) {
    return t * (Math.PI / 180);
  },
      S = (s.getAngleFromPoint = function (t, i) {
    var e = i.x - t.x,
        s = i.y - t.y,
        n = Math.sqrt(e * e + s * s),
        o = 2 * Math.PI + Math.atan2(s, e);return e < 0 && s < 0 && (o += 2 * Math.PI), { angle: o, distance: n };
  }, s.aliasPixel = function (t) {
    return t % 2 === 0 ? 0 : .5;
  }),
      y = (s.splineCurve = function (t, i, e, s) {
    var n = Math.sqrt(Math.pow(i.x - t.x, 2) + Math.pow(i.y - t.y, 2)),
        o = Math.sqrt(Math.pow(e.x - i.x, 2) + Math.pow(e.y - i.y, 2)),
        a = s * n / (n + o),
        h = s * o / (n + o);return { inner: { x: i.x - a * (e.x - t.x), y: i.y - a * (e.y - t.y) }, outer: { x: i.x + h * (e.x - t.x), y: i.y + h * (e.y - t.y) } };
  }, s.calculateOrderOfMagnitude = function (t) {
    return Math.floor(Math.log(t) / Math.LN10);
  }),
      C = (s.calculateScaleRange = function (t, i, e, s, n) {
    var o = 2,
        a = Math.floor(i / (1.5 * e)),
        h = o >= a,
        l = g(t),
        r = v(t);l === r && (l += .5, r >= .5 && !s ? r -= .5 : l += .5);for (var c = Math.abs(l - r), u = y(c), d = Math.ceil(l / (1 * Math.pow(10, u))) * Math.pow(10, u), p = s ? 0 : Math.floor(r / (1 * Math.pow(10, u))) * Math.pow(10, u), f = d - p, m = Math.pow(10, u), x = Math.round(f / m); (x > a || 2 * x < a) && !h;) {
      if (x > a) m *= 2, x = Math.round(f / m), x % 1 !== 0 && (h = !0);else if (n && u >= 0) {
        if (m / 2 % 1 !== 0) break;m /= 2, x = Math.round(f / m);
      } else m /= 2, x = Math.round(f / m);
    }return h && (x = o, m = f / x), { steps: x, stepValue: m, min: p, max: p + x * m };
  }, s.template = function (t, i) {
    function e(t, i) {
      var e = /\W/.test(t) ? new Function("obj", "var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('" + t.replace(/[\r\t\n]/g, " ").split("<%").join("\t").replace(/((^|%>)[^\t]*)'/g, "$1\r").replace(/\t=(.*?)%>/g, "',$1,'").split("\t").join("');").split("%>").join("p.push('").split("\r").join("\\'") + "');}return p.join('');") : s[t] = s[t];return i ? e(i) : e;
    }if (t instanceof Function) return t(i);var s = {};return e(t, i);
  }),
      w = (s.generateLabels = function (t, i, e, s) {
    var o = new Array(i);return labelTemplateString && n(o, function (i, n) {
      o[n] = C(t, { value: e + s * (n + 1) });
    }), o;
  }, s.easingEffects = { linear: function linear(t) {
      return t;
    }, easeInQuad: function easeInQuad(t) {
      return t * t;
    }, easeOutQuad: function easeOutQuad(t) {
      return -1 * t * (t - 2);
    }, easeInOutQuad: function easeInOutQuad(t) {
      return (t /= .5) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);
    }, easeInCubic: function easeInCubic(t) {
      return t * t * t;
    }, easeOutCubic: function easeOutCubic(t) {
      return 1 * ((t = t / 1 - 1) * t * t + 1);
    }, easeInOutCubic: function easeInOutCubic(t) {
      return (t /= .5) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);
    }, easeInQuart: function easeInQuart(t) {
      return t * t * t * t;
    }, easeOutQuart: function easeOutQuart(t) {
      return -1 * ((t = t / 1 - 1) * t * t * t - 1);
    }, easeInOutQuart: function easeInOutQuart(t) {
      return (t /= .5) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);
    }, easeInQuint: function easeInQuint(t) {
      return 1 * (t /= 1) * t * t * t * t;
    }, easeOutQuint: function easeOutQuint(t) {
      return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
    }, easeInOutQuint: function easeInOutQuint(t) {
      return (t /= .5) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);
    }, easeInSine: function easeInSine(t) {
      return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
    }, easeOutSine: function easeOutSine(t) {
      return 1 * Math.sin(t / 1 * (Math.PI / 2));
    }, easeInOutSine: function easeInOutSine(t) {
      return -.5 * (Math.cos(Math.PI * t / 1) - 1);
    }, easeInExpo: function easeInExpo(t) {
      return 0 === t ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
    }, easeOutExpo: function easeOutExpo(t) {
      return 1 === t ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
    }, easeInOutExpo: function easeInOutExpo(t) {
      return 0 === t ? 0 : 1 === t ? 1 : (t /= .5) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (-Math.pow(2, -10 * --t) + 2);
    }, easeInCirc: function easeInCirc(t) {
      return t >= 1 ? t : -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
    }, easeOutCirc: function easeOutCirc(t) {
      return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
    }, easeInOutCirc: function easeInOutCirc(t) {
      return (t /= .5) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    }, easeInElastic: function easeInElastic(t) {
      var i = 1.70158,
          e = 0,
          s = 1;return 0 === t ? 0 : 1 == (t /= 1) ? 1 : (e || (e = .3), s < Math.abs(1) ? (s = 1, i = e / 4) : i = e / (2 * Math.PI) * Math.asin(1 / s), -(s * Math.pow(2, 10 * (t -= 1)) * Math.sin((1 * t - i) * (2 * Math.PI) / e)));
    }, easeOutElastic: function easeOutElastic(t) {
      var i = 1.70158,
          e = 0,
          s = 1;return 0 === t ? 0 : 1 == (t /= 1) ? 1 : (e || (e = .3), s < Math.abs(1) ? (s = 1, i = e / 4) : i = e / (2 * Math.PI) * Math.asin(1 / s), s * Math.pow(2, -10 * t) * Math.sin((1 * t - i) * (2 * Math.PI) / e) + 1);
    }, easeInOutElastic: function easeInOutElastic(t) {
      var i = 1.70158,
          e = 0,
          s = 1;return 0 === t ? 0 : 2 == (t /= .5) ? 1 : (e || (e = 1 * (.3 * 1.5)), s < Math.abs(1) ? (s = 1, i = e / 4) : i = e / (2 * Math.PI) * Math.asin(1 / s), t < 1 ? -.5 * (s * Math.pow(2, 10 * (t -= 1)) * Math.sin((1 * t - i) * (2 * Math.PI) / e)) : s * Math.pow(2, -10 * (t -= 1)) * Math.sin((1 * t - i) * (2 * Math.PI) / e) * .5 + 1);
    }, easeInBack: function easeInBack(t) {
      var i = 1.70158;return 1 * (t /= 1) * t * ((i + 1) * t - i);
    }, easeOutBack: function easeOutBack(t) {
      var i = 1.70158;return 1 * ((t = t / 1 - 1) * t * ((i + 1) * t + i) + 1);
    }, easeInOutBack: function easeInOutBack(t) {
      var i = 1.70158;return (t /= .5) < 1 ? .5 * (t * t * (((i *= 1.525) + 1) * t - i)) : .5 * ((t -= 2) * t * (((i *= 1.525) + 1) * t + i) + 2);
    }, easeInBounce: function easeInBounce(t) {
      return 1 - w.easeOutBounce(1 - t);
    }, easeOutBounce: function easeOutBounce(t) {
      return (t /= 1) < 1 / 2.75 ? 1 * (7.5625 * t * t) : t < 2 / 2.75 ? 1 * (7.5625 * (t -= 1.5 / 2.75) * t + .75) : t < 2.5 / 2.75 ? 1 * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) : 1 * (7.5625 * (t -= 2.625 / 2.75) * t + .984375);
    }, easeInOutBounce: function easeInOutBounce(t) {
      return t < .5 ? .5 * w.easeInBounce(2 * t) : .5 * w.easeOutBounce(2 * t - 1) + .5;
    } }),
      b = s.requestAnimFrame = function () {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {
      return window.setTimeout(t, 1e3 / 60);
    };
  }(),
      P = s.cancelAnimFrame = function () {
    return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || function (t) {
      return window.clearTimeout(t, 1e3 / 60);
    };
  }(),
      L = (s.animationLoop = function (t, i, e, s, n, o) {
    var a = 0,
        h = w[e] || w.linear,
        l = function l() {
      a++;var e = a / i,
          r = h(e);t.call(o, r, e, a), s.call(o, r, e), a < i ? o.animationFrame = b(l) : n.apply(o);
    };b(l);
  }, s.getRelativePosition = function (t) {
    var i,
        e,
        s = t.originalEvent || t,
        n = t.currentTarget || t.srcElement,
        o = n.getBoundingClientRect();return s.touches ? (i = s.touches[0].clientX - o.left, e = s.touches[0].clientY - o.top) : (i = s.clientX - o.left, e = s.clientY - o.top), { x: i, y: e };
  }, s.addEvent = function (t, i, e) {
    t.addEventListener ? t.addEventListener(i, e) : t.attachEvent ? t.attachEvent("on" + i, e) : t["on" + i] = e;
  }),
      k = s.removeEvent = function (t, i, e) {
    t.removeEventListener ? t.removeEventListener(i, e, !1) : t.detachEvent ? t.detachEvent("on" + i, e) : t["on" + i] = c;
  },
      F = (s.bindEvents = function (t, i, e) {
    t.events || (t.events = {}), n(i, function (i) {
      t.events[i] = function () {
        e.apply(t, arguments);
      }, L(t.chart.canvas, i, t.events[i]);
    });
  }, s.unbindEvents = function (t, i) {
    n(i, function (i, e) {
      k(t.chart.canvas, e, i);
    });
  }),
      R = s.getMaximumWidth = function (t) {
    var i = t.parentNode;return i.clientWidth;
  },
      A = s.getMaximumHeight = function (t) {
    var i = t.parentNode;return i.clientHeight;
  },
      T = (s.getMaximumSize = s.getMaximumWidth, s.retinaScale = function (t) {
    var i = t.ctx,
        e = t.canvas.width,
        s = t.canvas.height;window.devicePixelRatio && (i.canvas.style.width = e + "px", i.canvas.style.height = s + "px", i.canvas.height = s * window.devicePixelRatio, i.canvas.width = e * window.devicePixelRatio, i.scale(window.devicePixelRatio, window.devicePixelRatio));
  }),
      M = s.clear = function (t) {
    t.ctx.clearRect(0, 0, t.width, t.height);
  },
      W = s.fontString = function (t, i, e) {
    return i + " " + t + "px " + e;
  },
      z = s.longestText = function (t, i, e) {
    t.font = i;var s = 0;return n(e, function (i) {
      var e = t.measureText(i).width;s = e > s ? e : s;
    }), s;
  },
      B = s.drawRoundedRectangle = function (t, i, e, s, n, o) {
    t.beginPath(), t.moveTo(i + o, e), t.lineTo(i + s - o, e), t.quadraticCurveTo(i + s, e, i + s, e + o), t.lineTo(i + s, e + n - o), t.quadraticCurveTo(i + s, e + n, i + s - o, e + n), t.lineTo(i + o, e + n), t.quadraticCurveTo(i, e + n, i, e + n - o), t.lineTo(i, e + o), t.quadraticCurveTo(i, e, i + o, e), t.closePath();
  };e.instances = {}, e.Type = function (t, i, s) {
    this.options = i, this.chart = s, this.id = u(), e.instances[this.id] = this, i.responsive && this.resize(), this.initialize.call(this, t);
  }, a(e.Type.prototype, { initialize: function initialize() {
      return this;
    }, clear: function clear() {
      return M(this.chart), this;
    }, stop: function stop() {
      return P(this.animationFrame), this;
    }, resize: function resize(t) {
      this.stop();var i = this.chart.canvas,
          e = R(this.chart.canvas),
          s = this.options.maintainAspectRatio ? e / this.chart.aspectRatio : A(this.chart.canvas);return i.width = this.chart.width = e, i.height = this.chart.height = s, T(this.chart), "function" == typeof t && t.apply(this, Array.prototype.slice.call(arguments, 1)), this;
    }, reflow: c, render: function render(t) {
      return t && this.reflow(), this.options.animation && !t ? s.animationLoop(this.draw, this.options.animationSteps, this.options.animationEasing, this.options.onAnimationProgress, this.options.onAnimationComplete, this) : (this.draw(), this.options.onAnimationComplete.call(this)), this;
    }, generateLegend: function generateLegend() {
      return C(this.options.legendTemplate, this);
    }, destroy: function destroy() {
      this.clear(), F(this, this.events);var t = this.chart.canvas;t.width = this.chart.width, t.height = this.chart.height, t.style.removeProperty ? (t.style.removeProperty("width"), t.style.removeProperty("height")) : (t.style.removeAttribute("width"), t.style.removeAttribute("height")), delete e.instances[this.id];
    }, showTooltip: function showTooltip(t, i) {
      "undefined" == typeof this.activeElements && (this.activeElements = []);var o = function (t) {
        var i = !1;return t.length !== this.activeElements.length ? i = !0 : (n(t, function (t, e) {
          t !== this.activeElements[e] && (i = !0);
        }, this), i);
      }.call(this, t);if (o || i) {
        if (this.activeElements = t, this.draw(), this.options.customTooltips && this.options.customTooltips(!1), t.length > 0) if (this.datasets && this.datasets.length > 1) {
          for (var a, h, r = this.datasets.length - 1; r >= 0 && (a = this.datasets[r].points || this.datasets[r].bars || this.datasets[r].segments, h = l(a, t[0]), h === -1); r--) {}var c = [],
              u = [],
              d = function (t) {
            var i,
                e,
                n,
                o,
                a,
                l = [],
                r = [],
                d = [];return s.each(this.datasets, function (t) {
              i = t.points || t.bars || t.segments, i[h] && i[h].hasValue() && l.push(i[h]);
            }), s.each(l, function (t) {
              r.push(t.x), d.push(t.y), c.push(s.template(this.options.multiTooltipTemplate, t)), u.push({ fill: t._saved.fillColor || t.fillColor, stroke: t._saved.strokeColor || t.strokeColor });
            }, this), a = v(d), n = g(d), o = v(r), e = g(r), { x: o > this.chart.width / 2 ? o : e, y: (a + n) / 2 };
          }.call(this, h);new e.MultiTooltip({ x: d.x, y: d.y, xPadding: this.options.tooltipXPadding, yPadding: this.options.tooltipYPadding, xOffset: this.options.tooltipXOffset, fillColor: this.options.tooltipFillColor, textColor: this.options.tooltipFontColor, fontFamily: this.options.tooltipFontFamily, fontStyle: this.options.tooltipFontStyle, fontSize: this.options.tooltipFontSize, titleTextColor: this.options.tooltipTitleFontColor, titleFontFamily: this.options.tooltipTitleFontFamily, titleFontStyle: this.options.tooltipTitleFontStyle, titleFontSize: this.options.tooltipTitleFontSize, cornerRadius: this.options.tooltipCornerRadius, labels: c, legendColors: u, legendColorBackground: this.options.multiTooltipKeyBackground, title: t[0].label, chart: this.chart, ctx: this.chart.ctx, custom: this.options.customTooltips }).draw();
        } else n(t, function (t) {
          var i = t.tooltipPosition();new e.Tooltip({ x: Math.round(i.x), y: Math.round(i.y), xPadding: this.options.tooltipXPadding, yPadding: this.options.tooltipYPadding, fillColor: this.options.tooltipFillColor, textColor: this.options.tooltipFontColor, fontFamily: this.options.tooltipFontFamily, fontStyle: this.options.tooltipFontStyle, fontSize: this.options.tooltipFontSize, caretHeight: this.options.tooltipCaretSize, cornerRadius: this.options.tooltipCornerRadius, text: C(this.options.tooltipTemplate, t), chart: this.chart, custom: this.options.customTooltips }).draw();
        }, this);return this;
      }
    }, toBase64Image: function toBase64Image() {
      return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
    } }), e.Type.extend = function (t) {
    var i = this,
        s = function s() {
      return i.apply(this, arguments);
    };if (s.prototype = o(i.prototype), a(s.prototype, t), s.extend = e.Type.extend, t.name || i.prototype.name) {
      var n = t.name || i.prototype.name,
          l = e.defaults[i.prototype.name] ? o(e.defaults[i.prototype.name]) : {};e.defaults[n] = a(l, t.defaults), e.types[n] = s, e.prototype[n] = function (t, i) {
        var o = h(e.defaults.global, e.defaults[n], i || {});return new s(t, o, this);
      };
    } else d("Name not provided for this chart, so it hasn't been registered");return i;
  }, e.Element = function (t) {
    a(this, t), this.initialize.apply(this, arguments), this.save();
  }, a(e.Element.prototype, { initialize: function initialize() {}, restore: function restore(t) {
      return t ? n(t, function (t) {
        this[t] = this._saved[t];
      }, this) : a(this, this._saved), this;
    }, save: function save() {
      return this._saved = o(this), delete this._saved._saved, this;
    }, update: function update(t) {
      return n(t, function (t, i) {
        this._saved[i] = this[i], this[i] = t;
      }, this), this;
    }, transition: function transition(t, i) {
      return n(t, function (t, e) {
        this[e] = (t - this._saved[e]) * i + this._saved[e];
      }, this), this;
    }, tooltipPosition: function tooltipPosition() {
      return { x: this.x, y: this.y };
    }, hasValue: function hasValue() {
      return f(this.value);
    } }), e.Element.extend = r, e.Point = e.Element.extend({ display: !0, inRange: function inRange(t, i) {
      var e = this.hitDetectionRadius + this.radius;return Math.pow(t - this.x, 2) + Math.pow(i - this.y, 2) < Math.pow(e, 2);
    }, draw: function draw() {
      if (this.display) {
        var t = this.ctx;t.beginPath(), t.arc(this.x, this.y, this.radius, 0, 2 * Math.PI), t.closePath(), t.strokeStyle = this.strokeColor, t.lineWidth = this.strokeWidth, t.fillStyle = this.fillColor, t.fill(), t.stroke();
      }
    } }), e.Arc = e.Element.extend({ inRange: function inRange(t, i) {
      var e = s.getAngleFromPoint(this, { x: t, y: i }),
          n = e.angle >= this.startAngle && e.angle <= this.endAngle,
          o = e.distance >= this.innerRadius && e.distance <= this.outerRadius;return n && o;
    }, tooltipPosition: function tooltipPosition() {
      var t = this.startAngle + (this.endAngle - this.startAngle) / 2,
          i = (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;return { x: this.x + Math.cos(t) * i, y: this.y + Math.sin(t) * i };
    }, draw: function draw(t) {
      var i = this.ctx;i.beginPath(), i.arc(this.x, this.y, this.outerRadius, this.startAngle, this.endAngle), i.arc(this.x, this.y, this.innerRadius, this.endAngle, this.startAngle, !0), i.closePath(), i.strokeStyle = this.strokeColor, i.lineWidth = this.strokeWidth, i.fillStyle = this.fillColor, i.fill(), i.lineJoin = "bevel", this.showStroke && i.stroke();
    } }), e.Rectangle = e.Element.extend({ draw: function draw() {
      var t = this.ctx,
          i = this.width / 2,
          e = this.x - i,
          s = this.x + i,
          n = this.base - (this.base - this.y),
          o = this.strokeWidth / 2;this.showStroke && (e += o, s -= o, n += o), t.beginPath(), t.fillStyle = this.fillColor, t.strokeStyle = this.strokeColor, t.lineWidth = this.strokeWidth, t.moveTo(e, this.base), t.lineTo(e, n), t.lineTo(s, n), t.lineTo(s, this.base), t.fill(), this.showStroke && t.stroke();
    }, height: function height() {
      return this.base - this.y;
    }, inRange: function inRange(t, i) {
      return t >= this.x - this.width / 2 && t <= this.x + this.width / 2 && i >= this.y && i <= this.base;
    } }), e.Tooltip = e.Element.extend({ draw: function draw() {
      var t = this.chart.ctx;t.font = W(this.fontSize, this.fontStyle, this.fontFamily), this.xAlign = "center", this.yAlign = "above";var i = this.caretPadding = 2,
          e = t.measureText(this.text).width + 2 * this.xPadding,
          s = this.fontSize + 2 * this.yPadding,
          n = s + this.caretHeight + i;this.x + e / 2 > this.chart.width ? this.xAlign = "left" : this.x - e / 2 < 0 && (this.xAlign = "right"), this.y - n < 0 && (this.yAlign = "below");var o = this.x - e / 2,
          a = this.y - n;if (t.fillStyle = this.fillColor, this.custom) this.custom(this);else {
        switch (this.yAlign) {case "above":
            t.beginPath(), t.moveTo(this.x, this.y - i), t.lineTo(this.x + this.caretHeight, this.y - (i + this.caretHeight)), t.lineTo(this.x - this.caretHeight, this.y - (i + this.caretHeight)), t.closePath(), t.fill();break;case "below":
            a = this.y + i + this.caretHeight, t.beginPath(), t.moveTo(this.x, this.y + i), t.lineTo(this.x + this.caretHeight, this.y + i + this.caretHeight), t.lineTo(this.x - this.caretHeight, this.y + i + this.caretHeight), t.closePath(), t.fill();}switch (this.xAlign) {case "left":
            o = this.x - e + (this.cornerRadius + this.caretHeight);break;case "right":
            o = this.x - (this.cornerRadius + this.caretHeight);}B(t, o, a, e, s, this.cornerRadius), t.fill(), t.fillStyle = this.textColor, t.textAlign = "center", t.textBaseline = "middle", t.fillText(this.text, o + e / 2, a + s / 2);
      }
    } }), e.MultiTooltip = e.Element.extend({ initialize: function initialize() {
      this.font = W(this.fontSize, this.fontStyle, this.fontFamily), this.titleFont = W(this.titleFontSize, this.titleFontStyle, this.titleFontFamily), this.height = this.labels.length * this.fontSize + (this.labels.length - 1) * (this.fontSize / 2) + 2 * this.yPadding + 1.5 * this.titleFontSize, this.ctx.font = this.titleFont;var t = this.ctx.measureText(this.title).width,
          i = z(this.ctx, this.font, this.labels) + this.fontSize + 3,
          e = g([i, t]);this.width = e + 2 * this.xPadding;var s = this.height / 2;this.y - s < 0 ? this.y = s : this.y + s > this.chart.height && (this.y = this.chart.height - s), this.x > this.chart.width / 2 ? this.x -= this.xOffset + this.width : this.x += this.xOffset;
    }, getLineHeight: function getLineHeight(t) {
      var i = this.y - this.height / 2 + this.yPadding,
          e = t - 1;return 0 === t ? i + this.titleFontSize / 2 : i + (1.5 * this.fontSize * e + this.fontSize / 2) + 1.5 * this.titleFontSize;
    }, draw: function draw() {
      if (this.custom) this.custom(this);else {
        B(this.ctx, this.x, this.y - this.height / 2, this.width, this.height, this.cornerRadius);var t = this.ctx;t.fillStyle = this.fillColor, t.fill(), t.closePath(), t.textAlign = "left", t.textBaseline = "middle", t.fillStyle = this.titleTextColor, t.font = this.titleFont, t.fillText(this.title, this.x + this.xPadding, this.getLineHeight(0)), t.font = this.font, s.each(this.labels, function (i, e) {
          t.fillStyle = this.textColor, t.fillText(i, this.x + this.xPadding + this.fontSize + 3, this.getLineHeight(e + 1)), t.fillStyle = this.legendColorBackground, t.fillRect(this.x + this.xPadding, this.getLineHeight(e + 1) - this.fontSize / 2, this.fontSize, this.fontSize), t.fillStyle = this.legendColors[e].fill, t.fillRect(this.x + this.xPadding, this.getLineHeight(e + 1) - this.fontSize / 2, this.fontSize, this.fontSize);
        }, this);
      }
    } }), e.Scale = e.Element.extend({ initialize: function initialize() {
      this.fit();
    }, buildYLabels: function buildYLabels() {
      this.yLabels = [];for (var t = m(this.stepValue), i = 0; i <= this.steps; i++) {
        this.yLabels.push(C(this.templateString, { value: (this.min + i * this.stepValue).toFixed(t) }));
      }this.yLabelWidth = this.display && this.showLabels ? z(this.ctx, this.font, this.yLabels) : 0;
    }, addXLabel: function addXLabel(t) {
      this.xLabels.push(t), this.valuesCount++, this.fit();
    }, removeXLabel: function removeXLabel() {
      this.xLabels.shift(), this.valuesCount--, this.fit();
    }, fit: function fit() {
      this.startPoint = this.display ? this.fontSize : 0, this.endPoint = this.display ? this.height - 1.5 * this.fontSize - 5 : this.height, this.startPoint += this.padding, this.endPoint -= this.padding;var t,
          i = this.endPoint - this.startPoint;for (this.calculateYRange(i), this.buildYLabels(), this.calculateXLabelRotation(); i > this.endPoint - this.startPoint;) {
        i = this.endPoint - this.startPoint, t = this.yLabelWidth, this.calculateYRange(i), this.buildYLabels(), t < this.yLabelWidth && this.calculateXLabelRotation();
      }
    }, calculateXLabelRotation: function calculateXLabelRotation() {
      this.ctx.font = this.font;var t,
          i,
          e = this.ctx.measureText(this.xLabels[0]).width,
          s = this.ctx.measureText(this.xLabels[this.xLabels.length - 1]).width;if (this.xScalePaddingRight = s / 2 + 3, this.xScalePaddingLeft = e / 2 > this.yLabelWidth + 10 ? e / 2 : this.yLabelWidth + 10, this.xLabelRotation = 0, this.display) {
        var n,
            o = z(this.ctx, this.font, this.xLabels);this.xLabelWidth = o;for (var a = Math.floor(this.calculateX(1) - this.calculateX(0)) - 6; this.xLabelWidth > a && 0 === this.xLabelRotation || this.xLabelWidth > a && this.xLabelRotation <= 90 && this.xLabelRotation > 0;) {
          n = Math.cos(x(this.xLabelRotation)), t = n * e, i = n * s, t + this.fontSize / 2 > this.yLabelWidth + 8 && (this.xScalePaddingLeft = t + this.fontSize / 2), this.xScalePaddingRight = this.fontSize / 2, this.xLabelRotation++, this.xLabelWidth = n * o;
        }this.xLabelRotation > 0 && (this.endPoint -= Math.sin(x(this.xLabelRotation)) * o + 3);
      } else this.xLabelWidth = 0, this.xScalePaddingRight = this.padding, this.xScalePaddingLeft = this.padding;
    }, calculateYRange: c, drawingArea: function drawingArea() {
      return this.startPoint - this.endPoint;
    }, calculateY: function calculateY(t) {
      var i = this.drawingArea() / (this.min - this.max);return this.endPoint - i * (t - this.min);
    }, calculateX: function calculateX(t) {
      var i = (this.xLabelRotation > 0, this.width - (this.xScalePaddingLeft + this.xScalePaddingRight)),
          e = i / Math.max(this.valuesCount - (this.offsetGridLines ? 0 : 1), 1),
          s = e * t + this.xScalePaddingLeft;return this.offsetGridLines && (s += e / 2), Math.round(s);
    }, update: function update(t) {
      s.extend(this, t), this.fit();
    }, draw: function draw() {
      var t = this.ctx,
          i = (this.endPoint - this.startPoint) / this.steps,
          e = Math.round(this.xScalePaddingLeft);this.display && (t.fillStyle = this.textColor, t.font = this.font, n(this.yLabels, function (n, o) {
        var a = this.endPoint - i * o,
            h = Math.round(a),
            l = this.showHorizontalLines;t.textAlign = "right", t.textBaseline = "middle", this.showLabels && t.fillText(n, e - 10, a), 0 !== o || l || (l = !0), l && t.beginPath(), o > 0 ? (t.lineWidth = this.gridLineWidth, t.strokeStyle = this.gridLineColor) : (t.lineWidth = this.lineWidth, t.strokeStyle = this.lineColor), h += s.aliasPixel(t.lineWidth), l && (t.moveTo(e, h), t.lineTo(this.width, h), t.stroke(), t.closePath()), t.lineWidth = this.lineWidth, t.strokeStyle = this.lineColor, t.beginPath(), t.moveTo(e - 5, h), t.lineTo(e, h), t.stroke(), t.closePath();
      }, this), n(this.xLabels, function (i, e) {
        var s = this.calculateX(e) + S(this.lineWidth),
            n = this.calculateX(e - (this.offsetGridLines ? .5 : 0)) + S(this.lineWidth),
            o = this.xLabelRotation > 0,
            a = this.showVerticalLines;0 !== e || a || (a = !0), a && t.beginPath(), e > 0 ? (t.lineWidth = this.gridLineWidth, t.strokeStyle = this.gridLineColor) : (t.lineWidth = this.lineWidth, t.strokeStyle = this.lineColor), a && (t.moveTo(n, this.endPoint), t.lineTo(n, this.startPoint - 3), t.stroke(), t.closePath()), t.lineWidth = this.lineWidth, t.strokeStyle = this.lineColor, t.beginPath(), t.moveTo(n, this.endPoint), t.lineTo(n, this.endPoint + 5), t.stroke(), t.closePath(), t.save(), t.translate(s, o ? this.endPoint + 12 : this.endPoint + 8), t.rotate(x(this.xLabelRotation) * -1), t.font = this.font, t.textAlign = o ? "right" : "center", t.textBaseline = o ? "middle" : "top", t.fillText(i, 0, 0), t.restore();
      }, this));
    } }), e.RadialScale = e.Element.extend({ initialize: function initialize() {
      this.size = v([this.height, this.width]), this.drawingArea = this.display ? this.size / 2 - (this.fontSize / 2 + this.backdropPaddingY) : this.size / 2;
    }, calculateCenterOffset: function calculateCenterOffset(t) {
      var i = this.drawingArea / (this.max - this.min);return (t - this.min) * i;
    }, update: function update() {
      this.lineArc ? this.drawingArea = this.display ? this.size / 2 - (this.fontSize / 2 + this.backdropPaddingY) : this.size / 2 : this.setScaleSize(), this.buildYLabels();
    }, buildYLabels: function buildYLabels() {
      this.yLabels = [];for (var t = m(this.stepValue), i = 0; i <= this.steps; i++) {
        this.yLabels.push(C(this.templateString, { value: (this.min + i * this.stepValue).toFixed(t) }));
      }
    }, getCircumference: function getCircumference() {
      return 2 * Math.PI / this.valuesCount;
    }, setScaleSize: function setScaleSize() {
      var t,
          i,
          e,
          s,
          n,
          o,
          a,
          h,
          l,
          r,
          c,
          u,
          d = v([this.height / 2 - this.pointLabelFontSize - 5, this.width / 2]),
          p = this.width,
          g = 0;for (this.ctx.font = W(this.pointLabelFontSize, this.pointLabelFontStyle, this.pointLabelFontFamily), i = 0; i < this.valuesCount; i++) {
        t = this.getPointPosition(i, d), e = this.ctx.measureText(C(this.templateString, { value: this.labels[i] })).width + 5, 0 === i || i === this.valuesCount / 2 ? (s = e / 2, t.x + s > p && (p = t.x + s, n = i), t.x - s < g && (g = t.x - s, a = i)) : i < this.valuesCount / 2 ? t.x + e > p && (p = t.x + e, n = i) : i > this.valuesCount / 2 && t.x - e < g && (g = t.x - e, a = i);
      }l = g, r = Math.ceil(p - this.width), o = this.getIndexAngle(n), h = this.getIndexAngle(a), c = r / Math.sin(o + Math.PI / 2), u = l / Math.sin(h + Math.PI / 2), c = f(c) ? c : 0, u = f(u) ? u : 0, this.drawingArea = d - (u + c) / 2, this.setCenterPoint(u, c);
    }, setCenterPoint: function setCenterPoint(t, i) {
      var e = this.width - i - this.drawingArea,
          s = t + this.drawingArea;this.xCenter = (s + e) / 2, this.yCenter = this.height / 2;
    }, getIndexAngle: function getIndexAngle(t) {
      var i = 2 * Math.PI / this.valuesCount;return t * i - Math.PI / 2;
    }, getPointPosition: function getPointPosition(t, i) {
      var e = this.getIndexAngle(t);return { x: Math.cos(e) * i + this.xCenter, y: Math.sin(e) * i + this.yCenter };
    }, draw: function draw() {
      if (this.display) {
        var t = this.ctx;if (n(this.yLabels, function (i, e) {
          if (e > 0) {
            var s,
                n = e * (this.drawingArea / this.steps),
                o = this.yCenter - n;if (this.lineWidth > 0) if (t.strokeStyle = this.lineColor, t.lineWidth = this.lineWidth, this.lineArc) t.beginPath(), t.arc(this.xCenter, this.yCenter, n, 0, 2 * Math.PI), t.closePath(), t.stroke();else {
              t.beginPath();for (var a = 0; a < this.valuesCount; a++) {
                s = this.getPointPosition(a, this.calculateCenterOffset(this.min + e * this.stepValue)), 0 === a ? t.moveTo(s.x, s.y) : t.lineTo(s.x, s.y);
              }t.closePath(), t.stroke();
            }if (this.showLabels) {
              if (t.font = W(this.fontSize, this.fontStyle, this.fontFamily), this.showLabelBackdrop) {
                var h = t.measureText(i).width;t.fillStyle = this.backdropColor, t.fillRect(this.xCenter - h / 2 - this.backdropPaddingX, o - this.fontSize / 2 - this.backdropPaddingY, h + 2 * this.backdropPaddingX, this.fontSize + 2 * this.backdropPaddingY);
              }t.textAlign = "center", t.textBaseline = "middle", t.fillStyle = this.fontColor, t.fillText(i, this.xCenter, o);
            }
          }
        }, this), !this.lineArc) {
          t.lineWidth = this.angleLineWidth, t.strokeStyle = this.angleLineColor;for (var i = this.valuesCount - 1; i >= 0; i--) {
            if (this.angleLineWidth > 0) {
              var e = this.getPointPosition(i, this.calculateCenterOffset(this.max));t.beginPath(), t.moveTo(this.xCenter, this.yCenter), t.lineTo(e.x, e.y), t.stroke(), t.closePath();
            }var s = this.getPointPosition(i, this.calculateCenterOffset(this.max) + 5);t.font = W(this.pointLabelFontSize, this.pointLabelFontStyle, this.pointLabelFontFamily), t.fillStyle = this.pointLabelFontColor;var o = this.labels.length,
                a = this.labels.length / 2,
                h = a / 2,
                l = i < h || i > o - h,
                r = i === h || i === o - h;0 === i ? t.textAlign = "center" : i === a ? t.textAlign = "center" : i < a ? t.textAlign = "left" : t.textAlign = "right", r ? t.textBaseline = "middle" : l ? t.textBaseline = "bottom" : t.textBaseline = "top", t.fillText(this.labels[i], s.x, s.y);
          }
        }
      }
    } }), s.addEvent(window, "resize", function () {
    var t;return function () {
      clearTimeout(t), t = setTimeout(function () {
        n(e.instances, function (t) {
          t.options.responsive && t.resize(t.render, !0);
        });
      }, 50);
    };
  }()), p ? define(function () {
    return e;
  }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports && (module.exports = e), t.Chart = e, e.noConflict = function () {
    return t.Chart = i, e;
  };
}).call(undefined), function () {
  "use strict";
  var t = this,
      i = t.Chart,
      e = i.helpers,
      s = { scaleBeginAtZero: !0, scaleShowGridLines: !0, scaleGridLineColor: "rgba(0,0,0,.05)", scaleGridLineWidth: 1, scaleShowHorizontalLines: !0, scaleShowVerticalLines: !0, barShowStroke: !0, barStrokeWidth: 2, barValueSpacing: 5, barDatasetSpacing: 1, legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>' };i.Type.extend({ name: "Bar", defaults: s, initialize: function initialize(t) {
      var s = this.options;this.ScaleClass = i.Scale.extend({ offsetGridLines: !0, calculateBarX: function calculateBarX(t, i, e) {
          var n = this.calculateBaseWidth(),
              o = this.calculateX(e) - n / 2,
              a = this.calculateBarWidth(t);return o + a * i + i * s.barDatasetSpacing + a / 2;
        }, calculateBaseWidth: function calculateBaseWidth() {
          return this.calculateX(1) - this.calculateX(0) - 2 * s.barValueSpacing;
        }, calculateBarWidth: function calculateBarWidth(t) {
          var i = this.calculateBaseWidth() - (t - 1) * s.barDatasetSpacing;return i / t;
        } }), this.datasets = [], this.options.showTooltips && e.bindEvents(this, this.options.tooltipEvents, function (t) {
        var i = "mouseout" !== t.type ? this.getBarsAtEvent(t) : [];this.eachBars(function (t) {
          t.restore(["fillColor", "strokeColor"]);
        }), e.each(i, function (t) {
          t.fillColor = t.highlightFill, t.strokeColor = t.highlightStroke;
        }), this.showTooltip(i);
      }), this.BarClass = i.Rectangle.extend({ strokeWidth: this.options.barStrokeWidth, showStroke: this.options.barShowStroke, ctx: this.chart.ctx }), e.each(t.datasets, function (i, s) {
        var n = { label: i.label || null, fillColor: i.fillColor, strokeColor: i.strokeColor, bars: [] };this.datasets.push(n), e.each(i.data, function (e, s) {
          n.bars.push(new this.BarClass({ value: e, label: t.labels[s], datasetLabel: i.label, strokeColor: i.strokeColor, fillColor: i.fillColor, highlightFill: i.highlightFill || i.fillColor, highlightStroke: i.highlightStroke || i.strokeColor }));
        }, this);
      }, this), this.buildScale(t.labels), this.BarClass.prototype.base = this.scale.endPoint, this.eachBars(function (t, i, s) {
        e.extend(t, { width: this.scale.calculateBarWidth(this.datasets.length), x: this.scale.calculateBarX(this.datasets.length, s, i), y: this.scale.endPoint }), t.save();
      }, this), this.render();
    }, update: function update() {
      this.scale.update(), e.each(this.activeElements, function (t) {
        t.restore(["fillColor", "strokeColor"]);
      }), this.eachBars(function (t) {
        t.save();
      }), this.render();
    }, eachBars: function eachBars(t) {
      e.each(this.datasets, function (i, s) {
        e.each(i.bars, t, this, s);
      }, this);
    }, getBarsAtEvent: function getBarsAtEvent(t) {
      for (var i, s = [], n = e.getRelativePosition(t), o = function o(t) {
        s.push(t.bars[i]);
      }, a = 0; a < this.datasets.length; a++) {
        for (i = 0; i < this.datasets[a].bars.length; i++) {
          if (this.datasets[a].bars[i].inRange(n.x, n.y)) return e.each(this.datasets, o), s;
        }
      }return s;
    }, buildScale: function buildScale(t) {
      var i = this,
          s = function s() {
        var t = [];return i.eachBars(function (i) {
          t.push(i.value);
        }), t;
      },
          n = { templateString: this.options.scaleLabel, height: this.chart.height, width: this.chart.width, ctx: this.chart.ctx, textColor: this.options.scaleFontColor, fontSize: this.options.scaleFontSize, fontStyle: this.options.scaleFontStyle, fontFamily: this.options.scaleFontFamily, valuesCount: t.length, beginAtZero: this.options.scaleBeginAtZero, integersOnly: this.options.scaleIntegersOnly, calculateYRange: function calculateYRange(t) {
          var i = e.calculateScaleRange(s(), t, this.fontSize, this.beginAtZero, this.integersOnly);e.extend(this, i);
        }, xLabels: t, font: e.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily), lineWidth: this.options.scaleLineWidth, lineColor: this.options.scaleLineColor, showHorizontalLines: this.options.scaleShowHorizontalLines, showVerticalLines: this.options.scaleShowVerticalLines, gridLineWidth: this.options.scaleShowGridLines ? this.options.scaleGridLineWidth : 0, gridLineColor: this.options.scaleShowGridLines ? this.options.scaleGridLineColor : "rgba(0,0,0,0)", padding: this.options.showScale ? 0 : this.options.barShowStroke ? this.options.barStrokeWidth : 0, showLabels: this.options.scaleShowLabels, display: this.options.showScale };this.options.scaleOverride && e.extend(n, { calculateYRange: e.noop, steps: this.options.scaleSteps, stepValue: this.options.scaleStepWidth, min: this.options.scaleStartValue, max: this.options.scaleStartValue + this.options.scaleSteps * this.options.scaleStepWidth }), this.scale = new this.ScaleClass(n);
    }, addData: function addData(t, i) {
      e.each(t, function (t, e) {
        this.datasets[e].bars.push(new this.BarClass({ value: t, label: i, x: this.scale.calculateBarX(this.datasets.length, e, this.scale.valuesCount + 1), y: this.scale.endPoint, width: this.scale.calculateBarWidth(this.datasets.length),
          base: this.scale.endPoint, strokeColor: this.datasets[e].strokeColor, fillColor: this.datasets[e].fillColor }));
      }, this), this.scale.addXLabel(i), this.update();
    }, removeData: function removeData() {
      this.scale.removeXLabel(), e.each(this.datasets, function (t) {
        t.bars.shift();
      }, this), this.update();
    }, reflow: function reflow() {
      e.extend(this.BarClass.prototype, { y: this.scale.endPoint, base: this.scale.endPoint });var t = e.extend({ height: this.chart.height, width: this.chart.width });this.scale.update(t);
    }, draw: function draw(t) {
      var i = t || 1;this.clear();this.chart.ctx;this.scale.draw(i), e.each(this.datasets, function (t, s) {
        e.each(t.bars, function (t, e) {
          t.hasValue() && (t.base = this.scale.endPoint, t.transition({ x: this.scale.calculateBarX(this.datasets.length, s, e), y: this.scale.calculateY(t.value), width: this.scale.calculateBarWidth(this.datasets.length) }, i).draw());
        }, this);
      }, this);
    } });
}.call(undefined), function () {
  "use strict";
  var t = this,
      i = t.Chart,
      e = i.helpers,
      s = { segmentShowStroke: !0, segmentStrokeColor: "#fff", segmentStrokeWidth: 2, percentageInnerCutout: 50, animationSteps: 100, animationEasing: "easeOutBounce", animateRotate: !0, animateScale: !1, legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>' };i.Type.extend({ name: "Doughnut", defaults: s, initialize: function initialize(t) {
      this.segments = [], this.outerRadius = (e.min([this.chart.width, this.chart.height]) - this.options.segmentStrokeWidth / 2) / 2, this.SegmentArc = i.Arc.extend({ ctx: this.chart.ctx, x: this.chart.width / 2, y: this.chart.height / 2 }), this.options.showTooltips && e.bindEvents(this, this.options.tooltipEvents, function (t) {
        var i = "mouseout" !== t.type ? this.getSegmentsAtEvent(t) : [];e.each(this.segments, function (t) {
          t.restore(["fillColor"]);
        }), e.each(i, function (t) {
          t.fillColor = t.highlightColor;
        }), this.showTooltip(i);
      }), this.calculateTotal(t), e.each(t, function (t, i) {
        this.addData(t, i, !0);
      }, this), this.render();
    }, getSegmentsAtEvent: function getSegmentsAtEvent(t) {
      var i = [],
          s = e.getRelativePosition(t);return e.each(this.segments, function (t) {
        t.inRange(s.x, s.y) && i.push(t);
      }, this), i;
    }, addData: function addData(t, i, e) {
      var s = i || this.segments.length;this.segments.splice(s, 0, new this.SegmentArc({ value: t.value, outerRadius: this.options.animateScale ? 0 : this.outerRadius, innerRadius: this.options.animateScale ? 0 : this.outerRadius / 100 * this.options.percentageInnerCutout, fillColor: t.color, highlightColor: t.highlight || t.color, showStroke: this.options.segmentShowStroke, strokeWidth: this.options.segmentStrokeWidth, strokeColor: this.options.segmentStrokeColor, startAngle: 1.5 * Math.PI, circumference: this.options.animateRotate ? 0 : this.calculateCircumference(t.value), label: t.label })), e || (this.reflow(), this.update());
    }, calculateCircumference: function calculateCircumference(t) {
      return 2 * Math.PI * (Math.abs(t) / this.total);
    }, calculateTotal: function calculateTotal(t) {
      this.total = 0, e.each(t, function (t) {
        this.total += Math.abs(t.value);
      }, this);
    }, update: function update() {
      this.calculateTotal(this.segments), e.each(this.activeElements, function (t) {
        t.restore(["fillColor"]);
      }), e.each(this.segments, function (t) {
        t.save();
      }), this.render();
    }, removeData: function removeData(t) {
      var i = e.isNumber(t) ? t : this.segments.length - 1;this.segments.splice(i, 1), this.reflow(), this.update();
    }, reflow: function reflow() {
      e.extend(this.SegmentArc.prototype, { x: this.chart.width / 2, y: this.chart.height / 2 }), this.outerRadius = (e.min([this.chart.width, this.chart.height]) - this.options.segmentStrokeWidth / 2) / 2, e.each(this.segments, function (t) {
        t.update({ outerRadius: this.outerRadius, innerRadius: this.outerRadius / 100 * this.options.percentageInnerCutout });
      }, this);
    }, draw: function draw(t) {
      var i = t ? t : 1;this.clear(), e.each(this.segments, function (t, e) {
        t.transition({ circumference: this.calculateCircumference(t.value), outerRadius: this.outerRadius, innerRadius: this.outerRadius / 100 * this.options.percentageInnerCutout }, i), t.endAngle = t.startAngle + t.circumference, t.draw(), 0 === e && (t.startAngle = 1.5 * Math.PI), e < this.segments.length - 1 && (this.segments[e + 1].startAngle = t.endAngle);
      }, this);
    } }), i.types.Doughnut.extend({ name: "Pie", defaults: e.merge(s, { percentageInnerCutout: 0 }) });
}.call(undefined), function () {
  "use strict";
  var t = this,
      i = t.Chart,
      e = i.helpers,
      s = { scaleShowGridLines: !0, scaleGridLineColor: "rgba(0,0,0,.05)", scaleGridLineWidth: 1, scaleShowHorizontalLines: !0, scaleShowVerticalLines: !0, bezierCurve: !0, bezierCurveTension: .4, pointDot: !0, pointDotRadius: 4, pointDotStrokeWidth: 1, pointHitDetectionRadius: 20, datasetStroke: !0, datasetStrokeWidth: 2, datasetFill: !0, legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>' };i.Type.extend({ name: "Line", defaults: s, initialize: function initialize(t) {
      this.PointClass = i.Point.extend({ strokeWidth: this.options.pointDotStrokeWidth, radius: this.options.pointDotRadius, display: this.options.pointDot, hitDetectionRadius: this.options.pointHitDetectionRadius, ctx: this.chart.ctx, inRange: function inRange(t) {
          return Math.pow(t - this.x, 2) < Math.pow(this.radius + this.hitDetectionRadius, 2);
        } }), this.datasets = [], this.options.showTooltips && e.bindEvents(this, this.options.tooltipEvents, function (t) {
        var i = "mouseout" !== t.type ? this.getPointsAtEvent(t) : [];this.eachPoints(function (t) {
          t.restore(["fillColor", "strokeColor"]);
        }), e.each(i, function (t) {
          t.fillColor = t.highlightFill, t.strokeColor = t.highlightStroke;
        }), this.showTooltip(i);
      }), e.each(t.datasets, function (i) {
        var s = { label: i.label || null, fillColor: i.fillColor, strokeColor: i.strokeColor, pointColor: i.pointColor, pointStrokeColor: i.pointStrokeColor, points: [] };this.datasets.push(s), e.each(i.data, function (e, n) {
          s.points.push(new this.PointClass({ value: e, label: t.labels[n], datasetLabel: i.label, strokeColor: i.pointStrokeColor, fillColor: i.pointColor, highlightFill: i.pointHighlightFill || i.pointColor, highlightStroke: i.pointHighlightStroke || i.pointStrokeColor }));
        }, this), this.buildScale(t.labels), this.eachPoints(function (t, i) {
          e.extend(t, { x: this.scale.calculateX(i), y: this.scale.endPoint }), t.save();
        }, this);
      }, this), this.render();
    }, update: function update() {
      this.scale.update(), e.each(this.activeElements, function (t) {
        t.restore(["fillColor", "strokeColor"]);
      }), this.eachPoints(function (t) {
        t.save();
      }), this.render();
    }, eachPoints: function eachPoints(t) {
      e.each(this.datasets, function (i) {
        e.each(i.points, t, this);
      }, this);
    }, getPointsAtEvent: function getPointsAtEvent(t) {
      var i = [],
          s = e.getRelativePosition(t);return e.each(this.datasets, function (t) {
        e.each(t.points, function (t) {
          t.inRange(s.x, s.y) && i.push(t);
        });
      }, this), i;
    }, buildScale: function buildScale(t) {
      var s = this,
          n = function n() {
        var t = [];return s.eachPoints(function (i) {
          t.push(i.value);
        }), t;
      },
          o = { templateString: this.options.scaleLabel, height: this.chart.height, width: this.chart.width, ctx: this.chart.ctx, textColor: this.options.scaleFontColor, fontSize: this.options.scaleFontSize, fontStyle: this.options.scaleFontStyle, fontFamily: this.options.scaleFontFamily, valuesCount: t.length, beginAtZero: this.options.scaleBeginAtZero, integersOnly: this.options.scaleIntegersOnly, calculateYRange: function calculateYRange(t) {
          var i = e.calculateScaleRange(n(), t, this.fontSize, this.beginAtZero, this.integersOnly);e.extend(this, i);
        }, xLabels: t, font: e.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily), lineWidth: this.options.scaleLineWidth, lineColor: this.options.scaleLineColor, showHorizontalLines: this.options.scaleShowHorizontalLines, showVerticalLines: this.options.scaleShowVerticalLines, gridLineWidth: this.options.scaleShowGridLines ? this.options.scaleGridLineWidth : 0, gridLineColor: this.options.scaleShowGridLines ? this.options.scaleGridLineColor : "rgba(0,0,0,0)", padding: this.options.showScale ? 0 : this.options.pointDotRadius + this.options.pointDotStrokeWidth, showLabels: this.options.scaleShowLabels, display: this.options.showScale };this.options.scaleOverride && e.extend(o, { calculateYRange: e.noop, steps: this.options.scaleSteps, stepValue: this.options.scaleStepWidth, min: this.options.scaleStartValue, max: this.options.scaleStartValue + this.options.scaleSteps * this.options.scaleStepWidth }), this.scale = new i.Scale(o);
    }, addData: function addData(t, i) {
      e.each(t, function (t, e) {
        this.datasets[e].points.push(new this.PointClass({ value: t, label: i, x: this.scale.calculateX(this.scale.valuesCount + 1), y: this.scale.endPoint, strokeColor: this.datasets[e].pointStrokeColor, fillColor: this.datasets[e].pointColor }));
      }, this), this.scale.addXLabel(i), this.update();
    }, removeData: function removeData() {
      this.scale.removeXLabel(), e.each(this.datasets, function (t) {
        t.points.shift();
      }, this), this.update();
    }, reflow: function reflow() {
      var t = e.extend({ height: this.chart.height, width: this.chart.width });this.scale.update(t);
    }, draw: function draw(t) {
      var i = t || 1;this.clear();var s = this.chart.ctx,
          n = function n(t) {
        return null !== t.value;
      },
          o = function o(t, i, s) {
        return e.findNextWhere(i, n, s) || t;
      },
          a = function a(t, i, s) {
        return e.findPreviousWhere(i, n, s) || t;
      };this.scale.draw(i), e.each(this.datasets, function (t) {
        var h = e.where(t.points, n);e.each(t.points, function (t, e) {
          t.hasValue() && t.transition({ y: this.scale.calculateY(t.value), x: this.scale.calculateX(e) }, i);
        }, this), this.options.bezierCurve && e.each(h, function (t, i) {
          var s = i > 0 && i < h.length - 1 ? this.options.bezierCurveTension : 0;t.controlPoints = e.splineCurve(a(t, h, i), t, o(t, h, i), s), t.controlPoints.outer.y > this.scale.endPoint ? t.controlPoints.outer.y = this.scale.endPoint : t.controlPoints.outer.y < this.scale.startPoint && (t.controlPoints.outer.y = this.scale.startPoint), t.controlPoints.inner.y > this.scale.endPoint ? t.controlPoints.inner.y = this.scale.endPoint : t.controlPoints.inner.y < this.scale.startPoint && (t.controlPoints.inner.y = this.scale.startPoint);
        }, this), s.lineWidth = this.options.datasetStrokeWidth, s.strokeStyle = t.strokeColor, s.beginPath(), e.each(h, function (t, i) {
          if (0 === i) s.moveTo(t.x, t.y);else if (this.options.bezierCurve) {
            var e = a(t, h, i);s.bezierCurveTo(e.controlPoints.outer.x, e.controlPoints.outer.y, t.controlPoints.inner.x, t.controlPoints.inner.y, t.x, t.y);
          } else s.lineTo(t.x, t.y);
        }, this), s.stroke(), this.options.datasetFill && h.length > 0 && (s.lineTo(h[h.length - 1].x, this.scale.endPoint), s.lineTo(h[0].x, this.scale.endPoint), s.fillStyle = t.fillColor, s.closePath(), s.fill()), e.each(h, function (t) {
          t.draw();
        });
      }, this);
    } });
}.call(undefined), function () {
  "use strict";
  var t = this,
      i = t.Chart,
      e = i.helpers,
      s = { scaleShowLabelBackdrop: !0, scaleBackdropColor: "rgba(255,255,255,0.75)", scaleBeginAtZero: !0, scaleBackdropPaddingY: 2, scaleBackdropPaddingX: 2, scaleShowLine: !0, segmentShowStroke: !0, segmentStrokeColor: "#fff", segmentStrokeWidth: 2, animationSteps: 100, animationEasing: "easeOutBounce", animateRotate: !0, animateScale: !1, legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>' };i.Type.extend({ name: "PolarArea", defaults: s, initialize: function initialize(t) {
      this.segments = [], this.SegmentArc = i.Arc.extend({ showStroke: this.options.segmentShowStroke, strokeWidth: this.options.segmentStrokeWidth, strokeColor: this.options.segmentStrokeColor, ctx: this.chart.ctx, innerRadius: 0, x: this.chart.width / 2, y: this.chart.height / 2 }), this.scale = new i.RadialScale({ display: this.options.showScale, fontStyle: this.options.scaleFontStyle, fontSize: this.options.scaleFontSize, fontFamily: this.options.scaleFontFamily, fontColor: this.options.scaleFontColor, showLabels: this.options.scaleShowLabels, showLabelBackdrop: this.options.scaleShowLabelBackdrop, backdropColor: this.options.scaleBackdropColor, backdropPaddingY: this.options.scaleBackdropPaddingY, backdropPaddingX: this.options.scaleBackdropPaddingX, lineWidth: this.options.scaleShowLine ? this.options.scaleLineWidth : 0, lineColor: this.options.scaleLineColor, lineArc: !0, width: this.chart.width, height: this.chart.height, xCenter: this.chart.width / 2, yCenter: this.chart.height / 2, ctx: this.chart.ctx, templateString: this.options.scaleLabel, valuesCount: t.length }), this.updateScaleRange(t), this.scale.update(), e.each(t, function (t, i) {
        this.addData(t, i, !0);
      }, this), this.options.showTooltips && e.bindEvents(this, this.options.tooltipEvents, function (t) {
        var i = "mouseout" !== t.type ? this.getSegmentsAtEvent(t) : [];e.each(this.segments, function (t) {
          t.restore(["fillColor"]);
        }), e.each(i, function (t) {
          t.fillColor = t.highlightColor;
        }), this.showTooltip(i);
      }), this.render();
    }, getSegmentsAtEvent: function getSegmentsAtEvent(t) {
      var i = [],
          s = e.getRelativePosition(t);return e.each(this.segments, function (t) {
        t.inRange(s.x, s.y) && i.push(t);
      }, this), i;
    }, addData: function addData(t, i, e) {
      var s = i || this.segments.length;this.segments.splice(s, 0, new this.SegmentArc({ fillColor: t.color, highlightColor: t.highlight || t.color, label: t.label, value: t.value, outerRadius: this.options.animateScale ? 0 : this.scale.calculateCenterOffset(t.value), circumference: this.options.animateRotate ? 0 : this.scale.getCircumference(), startAngle: 1.5 * Math.PI })), e || (this.reflow(), this.update());
    }, removeData: function removeData(t) {
      var i = e.isNumber(t) ? t : this.segments.length - 1;this.segments.splice(i, 1), this.reflow(), this.update();
    }, calculateTotal: function calculateTotal(t) {
      this.total = 0, e.each(t, function (t) {
        this.total += t.value;
      }, this), this.scale.valuesCount = this.segments.length;
    }, updateScaleRange: function updateScaleRange(t) {
      var i = [];e.each(t, function (t) {
        i.push(t.value);
      });var s = this.options.scaleOverride ? { steps: this.options.scaleSteps, stepValue: this.options.scaleStepWidth, min: this.options.scaleStartValue, max: this.options.scaleStartValue + this.options.scaleSteps * this.options.scaleStepWidth } : e.calculateScaleRange(i, e.min([this.chart.width, this.chart.height]) / 2, this.options.scaleFontSize, this.options.scaleBeginAtZero, this.options.scaleIntegersOnly);e.extend(this.scale, s, { size: e.min([this.chart.width, this.chart.height]), xCenter: this.chart.width / 2, yCenter: this.chart.height / 2 });
    }, update: function update() {
      this.calculateTotal(this.segments), e.each(this.segments, function (t) {
        t.save();
      }), this.reflow(), this.render();
    }, reflow: function reflow() {
      e.extend(this.SegmentArc.prototype, { x: this.chart.width / 2, y: this.chart.height / 2 }), this.updateScaleRange(this.segments), this.scale.update(), e.extend(this.scale, { xCenter: this.chart.width / 2, yCenter: this.chart.height / 2 }), e.each(this.segments, function (t) {
        t.update({ outerRadius: this.scale.calculateCenterOffset(t.value) });
      }, this);
    }, draw: function draw(t) {
      var i = t || 1;this.clear(), e.each(this.segments, function (t, e) {
        t.transition({ circumference: this.scale.getCircumference(), outerRadius: this.scale.calculateCenterOffset(t.value) }, i), t.endAngle = t.startAngle + t.circumference, 0 === e && (t.startAngle = 1.5 * Math.PI), e < this.segments.length - 1 && (this.segments[e + 1].startAngle = t.endAngle), t.draw();
      }, this), this.scale.draw();
    } });
}.call(undefined), function () {
  "use strict";
  var t = this,
      i = t.Chart,
      e = i.helpers;i.Type.extend({ name: "Radar", defaults: { scaleShowLine: !0, angleShowLineOut: !0, scaleShowLabels: !1, scaleBeginAtZero: !0, angleLineColor: "rgba(0,0,0,.1)", angleLineWidth: 1, pointLabelFontFamily: "'Arial'", pointLabelFontStyle: "normal", pointLabelFontSize: 10, pointLabelFontColor: "#666", pointDot: !0, pointDotRadius: 3, pointDotStrokeWidth: 1, pointHitDetectionRadius: 20, datasetStroke: !0, datasetStrokeWidth: 2, datasetFill: !0, legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>' }, initialize: function initialize(t) {
      this.PointClass = i.Point.extend({ strokeWidth: this.options.pointDotStrokeWidth, radius: this.options.pointDotRadius, display: this.options.pointDot, hitDetectionRadius: this.options.pointHitDetectionRadius, ctx: this.chart.ctx }), this.datasets = [], this.buildScale(t), this.options.showTooltips && e.bindEvents(this, this.options.tooltipEvents, function (t) {
        var i = "mouseout" !== t.type ? this.getPointsAtEvent(t) : [];this.eachPoints(function (t) {
          t.restore(["fillColor", "strokeColor"]);
        }), e.each(i, function (t) {
          t.fillColor = t.highlightFill, t.strokeColor = t.highlightStroke;
        }), this.showTooltip(i);
      }), e.each(t.datasets, function (i) {
        var s = { label: i.label || null, fillColor: i.fillColor, strokeColor: i.strokeColor, pointColor: i.pointColor, pointStrokeColor: i.pointStrokeColor, points: [] };this.datasets.push(s), e.each(i.data, function (e, n) {
          var o;this.scale.animation || (o = this.scale.getPointPosition(n, this.scale.calculateCenterOffset(e))), s.points.push(new this.PointClass({ value: e, label: t.labels[n], datasetLabel: i.label, x: this.options.animation ? this.scale.xCenter : o.x, y: this.options.animation ? this.scale.yCenter : o.y, strokeColor: i.pointStrokeColor, fillColor: i.pointColor, highlightFill: i.pointHighlightFill || i.pointColor, highlightStroke: i.pointHighlightStroke || i.pointStrokeColor }));
        }, this);
      }, this), this.render();
    }, eachPoints: function eachPoints(t) {
      e.each(this.datasets, function (i) {
        e.each(i.points, t, this);
      }, this);
    }, getPointsAtEvent: function getPointsAtEvent(t) {
      var i = e.getRelativePosition(t),
          s = e.getAngleFromPoint({ x: this.scale.xCenter, y: this.scale.yCenter }, i),
          n = 2 * Math.PI / this.scale.valuesCount,
          o = Math.round((s.angle - 1.5 * Math.PI) / n),
          a = [];return (o >= this.scale.valuesCount || o < 0) && (o = 0), s.distance <= this.scale.drawingArea && e.each(this.datasets, function (t) {
        a.push(t.points[o]);
      }), a;
    }, buildScale: function buildScale(t) {
      this.scale = new i.RadialScale({ display: this.options.showScale, fontStyle: this.options.scaleFontStyle, fontSize: this.options.scaleFontSize, fontFamily: this.options.scaleFontFamily, fontColor: this.options.scaleFontColor, showLabels: this.options.scaleShowLabels, showLabelBackdrop: this.options.scaleShowLabelBackdrop, backdropColor: this.options.scaleBackdropColor, backdropPaddingY: this.options.scaleBackdropPaddingY, backdropPaddingX: this.options.scaleBackdropPaddingX, lineWidth: this.options.scaleShowLine ? this.options.scaleLineWidth : 0, lineColor: this.options.scaleLineColor, angleLineColor: this.options.angleLineColor, angleLineWidth: this.options.angleShowLineOut ? this.options.angleLineWidth : 0, pointLabelFontColor: this.options.pointLabelFontColor, pointLabelFontSize: this.options.pointLabelFontSize, pointLabelFontFamily: this.options.pointLabelFontFamily, pointLabelFontStyle: this.options.pointLabelFontStyle, height: this.chart.height, width: this.chart.width, xCenter: this.chart.width / 2, yCenter: this.chart.height / 2, ctx: this.chart.ctx, templateString: this.options.scaleLabel, labels: t.labels, valuesCount: t.datasets[0].data.length }), this.scale.setScaleSize(), this.updateScaleRange(t.datasets), this.scale.buildYLabels();
    }, updateScaleRange: function updateScaleRange(t) {
      var i = function () {
        var i = [];return e.each(t, function (t) {
          t.data ? i = i.concat(t.data) : e.each(t.points, function (t) {
            i.push(t.value);
          });
        }), i;
      }(),
          s = this.options.scaleOverride ? { steps: this.options.scaleSteps, stepValue: this.options.scaleStepWidth, min: this.options.scaleStartValue, max: this.options.scaleStartValue + this.options.scaleSteps * this.options.scaleStepWidth } : e.calculateScaleRange(i, e.min([this.chart.width, this.chart.height]) / 2, this.options.scaleFontSize, this.options.scaleBeginAtZero, this.options.scaleIntegersOnly);e.extend(this.scale, s);
    }, addData: function addData(t, i) {
      this.scale.valuesCount++, e.each(t, function (t, e) {
        var s = this.scale.getPointPosition(this.scale.valuesCount, this.scale.calculateCenterOffset(t));this.datasets[e].points.push(new this.PointClass({ value: t, label: i, x: s.x, y: s.y, strokeColor: this.datasets[e].pointStrokeColor, fillColor: this.datasets[e].pointColor }));
      }, this), this.scale.labels.push(i), this.reflow(), this.update();
    }, removeData: function removeData() {
      this.scale.valuesCount--, this.scale.labels.shift(), e.each(this.datasets, function (t) {
        t.points.shift();
      }, this), this.reflow(), this.update();
    }, update: function update() {
      this.eachPoints(function (t) {
        t.save();
      }), this.reflow(), this.render();
    }, reflow: function reflow() {
      e.extend(this.scale, { width: this.chart.width, height: this.chart.height, size: e.min([this.chart.width, this.chart.height]), xCenter: this.chart.width / 2, yCenter: this.chart.height / 2 }), this.updateScaleRange(this.datasets), this.scale.setScaleSize(), this.scale.buildYLabels();
    }, draw: function draw(t) {
      var i = t || 1,
          s = this.chart.ctx;this.clear(), this.scale.draw(), e.each(this.datasets, function (t) {
        e.each(t.points, function (t, e) {
          t.hasValue() && t.transition(this.scale.getPointPosition(e, this.scale.calculateCenterOffset(t.value)), i);
        }, this), s.lineWidth = this.options.datasetStrokeWidth, s.strokeStyle = t.strokeColor, s.beginPath(), e.each(t.points, function (t, i) {
          0 === i ? s.moveTo(t.x, t.y) : s.lineTo(t.x, t.y);
        }, this), s.closePath(), s.stroke(), s.fillStyle = t.fillColor, s.fill(), e.each(t.points, function (t) {
          t.hasValue() && t.draw();
        });
      }, this);
    } });
}.call(undefined);
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : e.Popper = t();
}(undefined, function () {
  "use strict";
  function e(e) {
    return e && "[object Function]" === {}.toString.call(e);
  }function t(e, t) {
    if (1 !== e.nodeType) return [];var n = window.getComputedStyle(e, null);return t ? n[t] : n;
  }function n(e) {
    return "HTML" === e.nodeName ? e : e.parentNode || e.host;
  }function r(e) {
    if (!e || -1 !== ["HTML", "BODY", "#document"].indexOf(e.nodeName)) return window.document.body;var o = t(e),
        i = o.overflow,
        f = o.overflowX,
        s = o.overflowY;return (/(auto|scroll)/.test(i + s + f) ? e : r(n(e))
    );
  }function o(e) {
    var n = e && e.offsetParent,
        r = n && n.nodeName;return r && "BODY" !== r && "HTML" !== r ? -1 !== ["TD", "TABLE"].indexOf(n.nodeName) && "static" === t(n, "position") ? o(n) : n : window.document.documentElement;
  }function i(e) {
    var t = e.nodeName;return "BODY" !== t && ("HTML" === t || o(e.firstElementChild) === e);
  }function f(e) {
    return null === e.parentNode ? e : f(e.parentNode);
  }function s(e, t) {
    if (!(e && e.nodeType && t && t.nodeType)) return window.document.documentElement;var n = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,
        r = n ? e : t,
        a = n ? t : e,
        p = document.createRange();p.setStart(r, 0), p.setEnd(a, 0);var u = p.commonAncestorContainer;if (e !== u && t !== u || r.contains(a)) return i(u) ? u : o(u);var d = f(e);return d.host ? s(d.host, t) : s(e, f(t).host);
  }function a(e) {
    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "top",
        n = "top" === t ? "scrollTop" : "scrollLeft",
        r = e.nodeName;if ("BODY" === r || "HTML" === r) {
      var o = window.document.documentElement,
          i = window.document.scrollingElement || o;return i[n];
    }return e[n];
  }function p(e, t) {
    var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
        r = a(t, "top"),
        o = a(t, "left"),
        i = n ? -1 : 1;return e.top += r * i, e.bottom += r * i, e.left += o * i, e.right += o * i, e;
  }function u(e, t) {
    var n = "x" === t ? "Left" : "Top",
        r = "Left" == n ? "Right" : "Bottom";return +e["border" + n + "Width"].split("px")[0] + +e["border" + r + "Width"].split("px")[0];
  }function d(e, t, n, r) {
    return V(t["offset" + e], n["client" + e], n["offset" + e], re() ? n["offset" + e] + r["margin" + ("Height" === e ? "Top" : "Left")] + r["margin" + ("Height" === e ? "Bottom" : "Right")] : 0);
  }function l() {
    var e = window.document.body,
        t = window.document.documentElement,
        n = re() && window.getComputedStyle(t);return { height: d("Height", e, t, n), width: d("Width", e, t, n) };
  }function c(e) {
    return se({}, e, { right: e.left + e.width, bottom: e.top + e.height });
  }function h(e) {
    var n = {};if (re()) try {
      n = e.getBoundingClientRect();var r = a(e, "top"),
          o = a(e, "left");n.top += r, n.left += o, n.bottom += r, n.right += o;
    } catch (e) {} else n = e.getBoundingClientRect();var i = { left: n.left, top: n.top, width: n.right - n.left, height: n.bottom - n.top },
        f = "HTML" === e.nodeName ? l() : {},
        s = f.width || e.clientWidth || i.right - i.left,
        p = f.height || e.clientHeight || i.bottom - i.top,
        d = e.offsetWidth - s,
        h = e.offsetHeight - p;if (d || h) {
      var m = t(e);d -= u(m, "x"), h -= u(m, "y"), i.width -= d, i.height -= h;
    }return c(i);
  }function m(e, n) {
    var o = re(),
        i = "HTML" === n.nodeName,
        f = h(e),
        s = h(n),
        a = r(e),
        u = t(n),
        d = +u.borderTopWidth.split("px")[0],
        l = +u.borderLeftWidth.split("px")[0],
        m = c({ top: f.top - s.top - d, left: f.left - s.left - l, width: f.width, height: f.height });if (m.marginTop = 0, m.marginLeft = 0, !o && i) {
      var g = +u.marginTop.split("px")[0],
          v = +u.marginLeft.split("px")[0];m.top -= d - g, m.bottom -= d - g, m.left -= l - v, m.right -= l - v, m.marginTop = g, m.marginLeft = v;
    }return (o ? n.contains(a) : n === a && "BODY" !== a.nodeName) && (m = p(m, n)), m;
  }function g(e) {
    var t = window.document.documentElement,
        n = m(e, t),
        r = V(t.clientWidth, window.innerWidth || 0),
        o = V(t.clientHeight, window.innerHeight || 0),
        i = a(t),
        f = a(t, "left"),
        s = { top: i - n.top + n.marginTop, left: f - n.left + n.marginLeft, width: r, height: o };return c(s);
  }function v(e) {
    var r = e.nodeName;return "BODY" !== r && "HTML" !== r && ("fixed" === t(e, "position") || v(n(e)));
  }function b(e, t, o, i) {
    var f = { top: 0, left: 0 },
        a = s(e, t);if ("viewport" === i) f = g(a);else {
      var p;"scrollParent" === i ? (p = r(n(e)), "BODY" === p.nodeName && (p = window.document.documentElement)) : p = "window" === i ? window.document.documentElement : i;var u = m(p, a);if ("HTML" !== p.nodeName || v(a)) f = u;else {
        var d = l(),
            c = d.height,
            h = d.width;f.top += u.top - u.marginTop, f.bottom = c + u.top, f.left += u.left - u.marginLeft, f.right = h + u.left;
      }
    }return f.left += o, f.top += o, f.right -= o, f.bottom -= o, f;
  }function w(e) {
    var t = e.width,
        n = e.height;return t * n;
  }function y(e, t, n, r, o) {
    var i = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;if (-1 === e.indexOf("auto")) return e;var f = b(n, r, i, o),
        s = { top: { width: f.width, height: t.top - f.top }, right: { width: f.right - t.right, height: f.height }, bottom: { width: f.width, height: f.bottom - t.bottom }, left: { width: t.left - f.left, height: f.height } },
        a = Object.keys(s).map(function (e) {
      return se({ key: e }, s[e], { area: w(s[e]) });
    }).sort(function (e, t) {
      return t.area - e.area;
    }),
        p = a.filter(function (e) {
      var t = e.width,
          r = e.height;return t >= n.clientWidth && r >= n.clientHeight;
    }),
        u = 0 < p.length ? p[0].key : a[0].key,
        d = e.split("-")[1];return u + (d ? "-" + d : "");
  }function O(e, t, n) {
    var r = s(t, n);return m(n, r);
  }function E(e) {
    var t = window.getComputedStyle(e),
        n = parseFloat(t.marginTop) + parseFloat(t.marginBottom),
        r = parseFloat(t.marginLeft) + parseFloat(t.marginRight),
        o = { width: e.offsetWidth + r, height: e.offsetHeight + n };return o;
  }function x(e) {
    var t = { left: "right", right: "left", bottom: "top", top: "bottom" };return e.replace(/left|right|bottom|top/g, function (e) {
      return t[e];
    });
  }function L(e, t, n) {
    n = n.split("-")[0];var r = E(e),
        o = { width: r.width, height: r.height },
        i = -1 !== ["right", "left"].indexOf(n),
        f = i ? "top" : "left",
        s = i ? "left" : "top",
        a = i ? "height" : "width",
        p = i ? "width" : "height";return o[f] = t[f] + t[a] / 2 - r[a] / 2, o[s] = n === s ? t[s] - r[p] : t[x(s)], o;
  }function T(e, t) {
    return Array.prototype.find ? e.find(t) : e.filter(t)[0];
  }function N(e, t, n) {
    if (Array.prototype.findIndex) return e.findIndex(function (e) {
      return e[t] === n;
    });var r = T(e, function (e) {
      return e[t] === n;
    });return e.indexOf(r);
  }function C(t, n, r) {
    var o = void 0 === r ? t : t.slice(0, N(t, "name", r));return o.forEach(function (t) {
      t["function"] && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var r = t["function"] || t.fn;t.enabled && e(r) && (n.offsets.popper = c(n.offsets.popper), n.offsets.reference = c(n.offsets.reference), n = r(n, t));
    }), n;
  }function k() {
    if (!this.state.isDestroyed) {
      var e = { instance: this, styles: {}, attributes: {}, flipped: !1, offsets: {} };e.offsets.reference = O(this.state, this.popper, this.reference), e.placement = y(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.offsets.popper = L(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = "absolute", e = C(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));
    }
  }function W(e, t) {
    return e.some(function (e) {
      var n = e.name,
          r = e.enabled;return r && n === t;
    });
  }function A(e) {
    for (var t = [!1, "ms", "Webkit", "Moz", "O"], n = e.charAt(0).toUpperCase() + e.slice(1), r = 0; r < t.length - 1; r++) {
      var o = t[r],
          i = o ? "" + o + n : e;if ("undefined" != typeof window.document.body.style[i]) return i;
    }return null;
  }function B() {
    return this.state.isDestroyed = !0, W(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), this.popper.style.left = "", this.popper.style.position = "", this.popper.style.top = "", this.popper.style[A("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;
  }function D(e, t, n, o) {
    var i = "BODY" === e.nodeName,
        f = i ? window : e;f.addEventListener(t, n, { passive: !0 }), i || D(r(f.parentNode), t, n, o), o.push(f);
  }function H(e, t, n, o) {
    n.updateBound = o, window.addEventListener("resize", n.updateBound, { passive: !0 });var i = r(e);return D(i, "scroll", n.updateBound, n.scrollParents), n.scrollElement = i, n.eventsEnabled = !0, n;
  }function M() {
    this.state.eventsEnabled || (this.state = H(this.reference, this.options, this.state, this.scheduleUpdate));
  }function P(e, t) {
    return window.removeEventListener("resize", t.updateBound), t.scrollParents.forEach(function (e) {
      e.removeEventListener("scroll", t.updateBound);
    }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;
  }function S() {
    this.state.eventsEnabled && (window.cancelAnimationFrame(this.scheduleUpdate), this.state = P(this.reference, this.state));
  }function j(e) {
    return "" !== e && !isNaN(parseFloat(e)) && isFinite(e);
  }function I(e, t) {
    Object.keys(t).forEach(function (n) {
      var r = "";-1 !== ["width", "height", "top", "right", "bottom", "left"].indexOf(n) && j(t[n]) && (r = "px"), e.style[n] = t[n] + r;
    });
  }function F(e, t) {
    Object.keys(t).forEach(function (n) {
      var r = t[n];!1 === r ? e.removeAttribute(n) : e.setAttribute(n, t[n]);
    });
  }function R(e, t, n) {
    var r = T(e, function (e) {
      var n = e.name;return n === t;
    }),
        o = !!r && e.some(function (e) {
      return e.name === n && e.enabled && e.order < r.order;
    });if (!o) {
      var i = "`" + t + "`";console.warn("`" + n + "` modifier is required by " + i + " modifier in order to work, be sure to include it before " + i + "!");
    }return o;
  }function U(e) {
    return "end" === e ? "start" : "start" === e ? "end" : e;
  }function Y(e) {
    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
        n = pe.indexOf(e),
        r = pe.slice(n + 1).concat(pe.slice(0, n));return t ? r.reverse() : r;
  }function q(e, t, n, r) {
    var o = e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
        i = +o[1],
        f = o[2];if (!i) return e;if (0 === f.indexOf("%")) {
      var s;switch (f) {case "%p":
          s = n;break;case "%":case "%r":default:
          s = r;}var a = c(s);return a[t] / 100 * i;
    }if ("vh" === f || "vw" === f) {
      var p;return p = "vh" === f ? V(document.documentElement.clientHeight, window.innerHeight || 0) : V(document.documentElement.clientWidth, window.innerWidth || 0), p / 100 * i;
    }return i;
  }function K(e, t, n, r) {
    var o = [0, 0],
        i = -1 !== ["right", "left"].indexOf(r),
        f = e.split(/(\+|\-)/).map(function (e) {
      return e.trim();
    }),
        s = f.indexOf(T(f, function (e) {
      return -1 !== e.search(/,|\s/);
    }));f[s] && -1 === f[s].indexOf(",") && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var a = /\s*,\s*|\s+/,
        p = -1 === s ? [f] : [f.slice(0, s).concat([f[s].split(a)[0]]), [f[s].split(a)[1]].concat(f.slice(s + 1))];return p = p.map(function (e, r) {
      var o = (1 === r ? !i : i) ? "height" : "width",
          f = !1;return e.reduce(function (e, t) {
        return "" === e[e.length - 1] && -1 !== ["+", "-"].indexOf(t) ? (e[e.length - 1] = t, f = !0, e) : f ? (e[e.length - 1] += t, f = !1, e) : e.concat(t);
      }, []).map(function (e) {
        return q(e, o, t, n);
      });
    }), p.forEach(function (e, t) {
      e.forEach(function (n, r) {
        j(n) && (o[t] += n * ("-" === e[r - 1] ? -1 : 1));
      });
    }), o;
  }for (var z = Math.min, G = Math.floor, V = Math.max, _ = ["native code", "[object MutationObserverConstructor]"], X = function X(e) {
    return _.some(function (t) {
      return -1 < (e || "").toString().indexOf(t);
    });
  }, J = "undefined" != typeof window, Q = ["Edge", "Trident", "Firefox"], Z = 0, $ = 0; $ < Q.length; $ += 1) {
    if (J && 0 <= navigator.userAgent.indexOf(Q[$])) {
      Z = 1;break;
    }
  }var ee,
      te = J && X(window.MutationObserver),
      ne = te ? function (e) {
    var t = !1,
        n = 0,
        r = document.createElement("span"),
        o = new MutationObserver(function () {
      e(), t = !1;
    });return o.observe(r, { attributes: !0 }), function () {
      t || (t = !0, r.setAttribute("x-index", n), ++n);
    };
  } : function (e) {
    var t = !1;return function () {
      t || (t = !0, setTimeout(function () {
        t = !1, e();
      }, Z));
    };
  },
      re = function re() {
    return void 0 == ee && (ee = -1 !== navigator.appVersion.indexOf("MSIE 10")), ee;
  },
      oe = function oe(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  },
      ie = function () {
    function e(e, t) {
      for (var n, r = 0; r < t.length; r++) {
        n = t[r], n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
      }
    }return function (t, n, r) {
      return n && e(t.prototype, n), r && e(t, r), t;
    };
  }(),
      fe = function fe(e, t, n) {
    return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e;
  },
      se = Object.assign || function (e) {
    for (var t, n = 1; n < arguments.length; n++) {
      for (var r in t = arguments[n]) {
        Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
      }
    }return e;
  },
      ae = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"],
      pe = ae.slice(3),
      ue = { FLIP: "flip", CLOCKWISE: "clockwise", COUNTERCLOCKWISE: "counterclockwise" },
      de = function () {
    function t(n, r) {
      var o = this,
          i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};oe(this, t), this.scheduleUpdate = function () {
        return requestAnimationFrame(o.update);
      }, this.update = ne(this.update.bind(this)), this.options = se({}, t.Defaults, i), this.state = { isDestroyed: !1, isCreated: !1, scrollParents: [] }, this.reference = n.jquery ? n[0] : n, this.popper = r.jquery ? r[0] : r, this.options.modifiers = {}, Object.keys(se({}, t.Defaults.modifiers, i.modifiers)).forEach(function (e) {
        o.options.modifiers[e] = se({}, t.Defaults.modifiers[e] || {}, i.modifiers ? i.modifiers[e] : {});
      }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {
        return se({ name: e }, o.options.modifiers[e]);
      }).sort(function (e, t) {
        return e.order - t.order;
      }), this.modifiers.forEach(function (t) {
        t.enabled && e(t.onLoad) && t.onLoad(o.reference, o.popper, o.options, t, o.state);
      }), this.update();var f = this.options.eventsEnabled;f && this.enableEventListeners(), this.state.eventsEnabled = f;
    }return ie(t, [{ key: "update", value: function value() {
        return k.call(this);
      } }, { key: "destroy", value: function value() {
        return B.call(this);
      } }, { key: "enableEventListeners", value: function value() {
        return M.call(this);
      } }, { key: "disableEventListeners", value: function value() {
        return S.call(this);
      } }]), t;
  }();return de.Utils = ("undefined" == typeof window ? global : window).PopperUtils, de.placements = ae, de.Defaults = { placement: "bottom", eventsEnabled: !0, removeOnDestroy: !1, onCreate: function onCreate() {}, onUpdate: function onUpdate() {}, modifiers: { shift: { order: 100, enabled: !0, fn: function fn(e) {
          var t = e.placement,
              n = t.split("-")[0],
              r = t.split("-")[1];if (r) {
            var o = e.offsets,
                i = o.reference,
                f = o.popper,
                s = -1 !== ["bottom", "top"].indexOf(n),
                a = s ? "left" : "top",
                p = s ? "width" : "height",
                u = { start: fe({}, a, i[a]), end: fe({}, a, i[a] + i[p] - f[p]) };e.offsets.popper = se({}, f, u[r]);
          }return e;
        } }, offset: { order: 200, enabled: !0, fn: function fn(e, t) {
          var n,
              r = t.offset,
              o = e.placement,
              i = e.offsets,
              f = i.popper,
              s = i.reference,
              a = o.split("-")[0];return n = j(+r) ? [+r, 0] : K(r, f, s, a), "left" === a ? (f.top += n[0], f.left -= n[1]) : "right" === a ? (f.top += n[0], f.left += n[1]) : "top" === a ? (f.left += n[0], f.top -= n[1]) : "bottom" === a && (f.left += n[0], f.top += n[1]), e.popper = f, e;
        }, offset: 0 }, preventOverflow: { order: 300, enabled: !0, fn: function fn(e, t) {
          var n = t.boundariesElement || o(e.instance.popper);e.instance.reference === n && (n = o(n));var r = b(e.instance.popper, e.instance.reference, t.padding, n);t.boundaries = r;var i = t.priority,
              f = e.offsets.popper,
              s = { primary: function primary(e) {
              var n = f[e];return f[e] < r[e] && !t.escapeWithReference && (n = V(f[e], r[e])), fe({}, e, n);
            }, secondary: function secondary(e) {
              var n = "right" === e ? "left" : "top",
                  o = f[n];return f[e] > r[e] && !t.escapeWithReference && (o = z(f[n], r[e] - ("right" === e ? f.width : f.height))), fe({}, n, o);
            } };return i.forEach(function (e) {
            var t = -1 === ["left", "top"].indexOf(e) ? "secondary" : "primary";f = se({}, f, s[t](e));
          }), e.offsets.popper = f, e;
        }, priority: ["left", "right", "top", "bottom"], padding: 5, boundariesElement: "scrollParent" }, keepTogether: { order: 400, enabled: !0, fn: function fn(e) {
          var t = e.offsets,
              n = t.popper,
              r = t.reference,
              o = e.placement.split("-")[0],
              i = G,
              f = -1 !== ["top", "bottom"].indexOf(o),
              s = f ? "right" : "bottom",
              a = f ? "left" : "top",
              p = f ? "width" : "height";return n[s] < i(r[a]) && (e.offsets.popper[a] = i(r[a]) - n[p]), n[a] > i(r[s]) && (e.offsets.popper[a] = i(r[s])), e;
        } }, arrow: { order: 500, enabled: !0, fn: function fn(e, t) {
          if (!R(e.instance.modifiers, "arrow", "keepTogether")) return e;var n = t.element;if ("string" == typeof n) {
            if (n = e.instance.popper.querySelector(n), !n) return e;
          } else if (!e.instance.popper.contains(n)) return console.warn("WARNING: `arrow.element` must be child of its popper element!"), e;var r = e.placement.split("-")[0],
              o = e.offsets,
              i = o.popper,
              f = o.reference,
              s = -1 !== ["left", "right"].indexOf(r),
              a = s ? "height" : "width",
              p = s ? "top" : "left",
              u = s ? "left" : "top",
              d = s ? "bottom" : "right",
              l = E(n)[a];f[d] - l < i[p] && (e.offsets.popper[p] -= i[p] - (f[d] - l)), f[p] + l > i[d] && (e.offsets.popper[p] += f[p] + l - i[d]);var h = f[p] + f[a] / 2 - l / 2,
              m = h - c(e.offsets.popper)[p];return m = V(z(i[a] - l, m), 0), e.arrowElement = n, e.offsets.arrow = {}, e.offsets.arrow[p] = Math.round(m), e.offsets.arrow[u] = "", e;
        }, element: "[x-arrow]" }, flip: { order: 600, enabled: !0, fn: function fn(e, t) {
          if (W(e.instance.modifiers, "inner")) return e;if (e.flipped && e.placement === e.originalPlacement) return e;var n = b(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement),
              r = e.placement.split("-")[0],
              o = x(r),
              i = e.placement.split("-")[1] || "",
              f = [];switch (t.behavior) {case ue.FLIP:
              f = [r, o];break;case ue.CLOCKWISE:
              f = Y(r);break;case ue.COUNTERCLOCKWISE:
              f = Y(r, !0);break;default:
              f = t.behavior;}return f.forEach(function (s, a) {
            if (r !== s || f.length === a + 1) return e;r = e.placement.split("-")[0], o = x(r);var p = e.offsets.popper,
                u = e.offsets.reference,
                d = G,
                l = "left" === r && d(p.right) > d(u.left) || "right" === r && d(p.left) < d(u.right) || "top" === r && d(p.bottom) > d(u.top) || "bottom" === r && d(p.top) < d(u.bottom),
                c = d(p.left) < d(n.left),
                h = d(p.right) > d(n.right),
                m = d(p.top) < d(n.top),
                g = d(p.bottom) > d(n.bottom),
                v = "left" === r && c || "right" === r && h || "top" === r && m || "bottom" === r && g,
                b = -1 !== ["top", "bottom"].indexOf(r),
                w = !!t.flipVariations && (b && "start" === i && c || b && "end" === i && h || !b && "start" === i && m || !b && "end" === i && g);(l || v || w) && (e.flipped = !0, (l || v) && (r = f[a + 1]), w && (i = U(i)), e.placement = r + (i ? "-" + i : ""), e.offsets.popper = se({}, e.offsets.popper, L(e.instance.popper, e.offsets.reference, e.placement)), e = C(e.instance.modifiers, e, "flip"));
          }), e;
        }, behavior: "flip", padding: 5, boundariesElement: "viewport" }, inner: { order: 700, enabled: !1, fn: function fn(e) {
          var t = e.placement,
              n = t.split("-")[0],
              r = e.offsets,
              o = r.popper,
              i = r.reference,
              f = -1 !== ["left", "right"].indexOf(n),
              s = -1 === ["top", "left"].indexOf(n);return o[f ? "left" : "top"] = i[t] - (s ? o[f ? "width" : "height"] : 0), e.placement = x(t), e.offsets.popper = c(o), e;
        } }, hide: { order: 800, enabled: !0, fn: function fn(e) {
          if (!R(e.instance.modifiers, "hide", "preventOverflow")) return e;var t = e.offsets.reference,
              n = T(e.instance.modifiers, function (e) {
            return "preventOverflow" === e.name;
          }).boundaries;if (t.bottom < n.top || t.left > n.right || t.top > n.bottom || t.right < n.left) {
            if (!0 === e.hide) return e;e.hide = !0, e.attributes["x-out-of-boundaries"] = "";
          } else {
            if (!1 === e.hide) return e;e.hide = !1, e.attributes["x-out-of-boundaries"] = !1;
          }return e;
        } }, computeStyle: { order: 850, enabled: !0, fn: function fn(e, t) {
          var n = t.x,
              r = t.y,
              i = e.offsets.popper,
              f = T(e.instance.modifiers, function (e) {
            return "applyStyle" === e.name;
          }).gpuAcceleration;void 0 !== f && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s,
              a,
              p = void 0 === f ? t.gpuAcceleration : f,
              u = o(e.instance.popper),
              d = h(u),
              l = { position: i.position },
              c = { left: G(i.left), top: G(i.top), bottom: G(i.bottom), right: G(i.right) },
              m = "bottom" === n ? "top" : "bottom",
              g = "right" === r ? "left" : "right",
              v = A("transform");if (a = "bottom" == m ? -d.height + c.bottom : c.top, s = "right" == g ? -d.width + c.right : c.left, p && v) l[v] = "translate3d(" + s + "px, " + a + "px, 0)", l[m] = 0, l[g] = 0, l.willChange = "transform";else {
            var b = "bottom" == m ? -1 : 1,
                w = "right" == g ? -1 : 1;l[m] = a * b, l[g] = s * w, l.willChange = m + ", " + g;
          }var y = { "x-placement": e.placement };return e.attributes = se({}, y, e.attributes), e.styles = se({}, l, e.styles), e;
        }, gpuAcceleration: !0, x: "bottom", y: "right" }, applyStyle: { order: 900, enabled: !0, fn: function fn(e) {
          return I(e.instance.popper, e.styles), F(e.instance.popper, e.attributes), e.offsets.arrow && I(e.arrowElement, e.offsets.arrow), e;
        }, onLoad: function onLoad(e, t, n, r, o) {
          var i = O(o, t, e),
              f = y(n.placement, i, t, e, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);return t.setAttribute("x-placement", f), I(t, { position: "absolute" }), n;
        }, gpuAcceleration: void 0 } } }, de;
});
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.updateRoute = updateRoute;

var _utils = require('./utils.js');

var _utils2 = _interopRequireDefault(_utils);

var _observer = require('./gallery/observer.js');

var _observer2 = _interopRequireDefault(_observer);

var _mainModel = require('./mainPage/main.model.js');

var _mainModel2 = _interopRequireDefault(_mainModel);

var _mainView = require('./mainPage/main.view.js');

var _mainView2 = _interopRequireDefault(_mainView);

var _mainController = require('./mainPage/main.controller.js');

var _mainController2 = _interopRequireDefault(_mainController);

var _profileController = require('./profile/profile.controller.js');

var _profileController2 = _interopRequireDefault(_profileController);

var _profileModel = require('./profile/profile.model.js');

var _profileModel2 = _interopRequireDefault(_profileModel);

var _profileView = require('./profile/profile.view.js');

var _profileView2 = _interopRequireDefault(_profileView);

var _galleryController = require('./gallery/gallery.controller.js');

var _galleryController2 = _interopRequireDefault(_galleryController);

var _galleryModel = require('./gallery/gallery.model.js');

var _galleryModel2 = _interopRequireDefault(_galleryModel);

var _galleryView = require('./gallery/gallery.view.js');

var _galleryView2 = _interopRequireDefault(_galleryView);

var _loginController = require('./login/login.controller.js');

var _loginController2 = _interopRequireDefault(_loginController);

var _loginModel = require('./login/login.model.js');

var _loginModel2 = _interopRequireDefault(_loginModel);

var _loginView = require('./login/login.view.js');

var _loginView2 = _interopRequireDefault(_loginView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mainPage = document.querySelector("#main-view");
var profile = document.querySelector("#profile-view");
var gallery = document.querySelector("#gallery-view");
var mainPageBtn = document.querySelector("#mainPageBtn");
var profileBtn = document.querySelector("#profileBtn");
var galleryBtn = document.querySelector("#galleryBtn");
//let login = document.querySelector("#login-view");
//let contact = document.querySelector("#contact-view");


var activatedRoutes = {};

var routeConfig = {
    "mainPage": {
        show: function show() {
            _utils2.default.showView([mainPage]);
            _utils2.default.hideView([profile, gallery]);
            _utils2.default.activateBtn([mainPageBtn]);
            _utils2.default.disactivateBtn([profileBtn, galleryBtn]);
        },
        init: function init() {
            var model = new _mainModel2.default();
            var view = new _mainView2.default();
            var utils = new _utils2.default();
            var mainConteroller = new _mainController2.default(model, view, utils);
            mainConteroller.init();
        }
    },
    "profile": {
        show: function show() {
            _utils2.default.showView([profile]);
            _utils2.default.hideView([mainPage, gallery]);
            _utils2.default.activateBtn([profileBtn]);
            _utils2.default.disactivateBtn([mainPageBtn, galleryBtn]);
            console.log("Contacts route is loaded");
        },
        init: function init() {
            var model = new _profileModel2.default();
            var view = new _profileView2.default();
            var utils = new _utils2.default();
            new _profileController2.default(model, view, utils);
        }
    },
    "gallery": {
        show: function show() {
            _utils2.default.showView([gallery]);
            _utils2.default.hideView([mainPage, profile]);
            _utils2.default.activateBtn([galleryBtn]);
            _utils2.default.disactivateBtn([mainPageBtn, profileBtn]);
            console.log("Main route is loaded");
        },
        init: function init() {
            var observer = new _observer2.default();
            var model = new _galleryModel2.default();
            var view = new _galleryView2.default();
            new _galleryController2.default(model, view, observer, new _utils2.default());
        }
    }
};

function activateRoute(routeName) {
    if (activatedRoutes[routeName]) {
        activatedRoutes[routeName]();
    } else {
        var route = routeConfig[routeName];
        if (route) {
            route.init();
            route.show();
            activatedRoutes[routeName] = route.show;
        }
    }
}

function updateRoute() {
    var routeName = document.location.hash.replace(/^#/, '');
    if (routeName && !_utils2.default.isLoggedIn()) {
        _utils2.default.navigateTo("");
    } else {
        activateRoute(routeName);
    }
}
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if ("undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");+function (t) {
  var e = t.fn.jquery.split(" ")[0].split(".");if (e[0] < 2 && e[1] < 9 || 1 == e[0] && 9 == e[1] && e[2] < 1 || e[0] >= 4) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
}(jQuery), +function () {
  "use strict";
  function t(t, e) {
    if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
  }function e(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
  }function n(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  }var i = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
    return typeof t === "undefined" ? "undefined" : _typeof(t);
  } : function (t) {
    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
  },
      o = Object.assign || function (t) {
    for (var e = 1; e < arguments.length; e++) {
      var n = arguments[e];for (var i in n) {
        Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
      }
    }return t;
  },
      r = function () {
    function t(t, e) {
      for (var n = 0; n < e.length; n++) {
        var i = e[n];i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
      }
    }return function (e, n, i) {
      return n && t(e.prototype, n), i && t(e, i), e;
    };
  }(),
      s = function (t) {
    function e(t) {
      return {}.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase();
    }function n() {
      return { bindType: s.end, delegateType: s.end, handle: function handle(e) {
          if (t(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
        } };
    }function i() {
      return ("undefined" == typeof window || !window.QUnit) && { end: "transitionend" };
    }function o(e) {
      var n = this,
          i = !1;return t(this).one(l.TRANSITION_END, function () {
        i = !0;
      }), setTimeout(function () {
        i || l.triggerTransitionEnd(n);
      }, e), this;
    }function r() {
      s = i(), t.fn.emulateTransitionEnd = o, l.supportsTransitionEnd() && (t.event.special[l.TRANSITION_END] = n());
    }var s = !1,
        a = 1e6,
        l = { TRANSITION_END: "bsTransitionEnd", getUID: function getUID(t) {
        do {
          t += ~~(Math.random() * a);
        } while (document.getElementById(t));return t;
      }, getSelectorFromElement: function getSelectorFromElement(e) {
        var n = e.getAttribute("data-target");n && "#" !== n || (n = e.getAttribute("href") || "");try {
          var i = t(document).find(n);return i.length > 0 ? n : null;
        } catch (o) {
          return null;
        }
      }, reflow: function reflow(t) {
        return t.offsetHeight;
      }, triggerTransitionEnd: function triggerTransitionEnd(e) {
        t(e).trigger(s.end);
      }, supportsTransitionEnd: function supportsTransitionEnd() {
        return Boolean(s);
      }, isElement: function isElement(t) {
        return (t[0] || t).nodeType;
      }, typeCheckConfig: function typeCheckConfig(t, n, i) {
        for (var o in i) {
          if (Object.prototype.hasOwnProperty.call(i, o)) {
            var r = i[o],
                s = n[o],
                a = s && l.isElement(s) ? "element" : e(s);if (!new RegExp(r).test(a)) throw new Error(t.toUpperCase() + ": " + ('Option "' + o + '" provided type "' + a + '" ') + ('but expected type "' + r + '".'));
          }
        }
      } };return r(), l;
  }($),
      a = (function (t) {
    var e = "alert",
        i = "4.0.0",
        o = "bs.alert",
        a = "." + o,
        l = ".data-api",
        h = t.fn[e],
        c = 150,
        u = { DISMISS: '[data-dismiss="alert"]' },
        f = { CLOSE: "close" + a, CLOSED: "closed" + a, CLICK_DATA_API: "click" + a + l },
        d = { ALERT: "alert", FADE: "fade", SHOW: "show" },
        _ = function () {
      function e(t) {
        n(this, e), this._element = t;
      }return e.prototype.close = function (t) {
        t = t || this._element;var e = this._getRootElement(t),
            n = this._triggerCloseEvent(e);n.isDefaultPrevented() || this._removeElement(e);
      }, e.prototype.dispose = function () {
        t.removeData(this._element, o), this._element = null;
      }, e.prototype._getRootElement = function (e) {
        var n = s.getSelectorFromElement(e),
            i = !1;return n && (i = t(n)[0]), i || (i = t(e).closest("." + d.ALERT)[0]), i;
      }, e.prototype._triggerCloseEvent = function (e) {
        var n = t.Event(f.CLOSE);return t(e).trigger(n), n;
      }, e.prototype._removeElement = function (e) {
        var n = this;return t(e).removeClass(d.SHOW), s.supportsTransitionEnd() && t(e).hasClass(d.FADE) ? void t(e).one(s.TRANSITION_END, function (t) {
          return n._destroyElement(e, t);
        }).emulateTransitionEnd(c) : void this._destroyElement(e);
      }, e.prototype._destroyElement = function (e) {
        t(e).detach().trigger(f.CLOSED).remove();
      }, e._jQueryInterface = function (n) {
        return this.each(function () {
          var i = t(this),
              r = i.data(o);r || (r = new e(this), i.data(o, r)), "close" === n && r[n](this);
        });
      }, e._handleDismiss = function (t) {
        return function (e) {
          e && e.preventDefault(), t.close(this);
        };
      }, r(e, null, [{ key: "VERSION", get: function get() {
          return i;
        } }]), e;
    }();return t(document).on(f.CLICK_DATA_API, u.DISMISS, _._handleDismiss(new _())), t.fn[e] = _._jQueryInterface, t.fn[e].Constructor = _, t.fn[e].noConflict = function () {
      return t.fn[e] = h, _._jQueryInterface;
    }, _;
  }($), function (t) {
    var e = "button",
        i = "4.0.0",
        o = "bs.button",
        s = "." + o,
        a = ".data-api",
        l = t.fn[e],
        h = { ACTIVE: "active", BUTTON: "btn", FOCUS: "focus" },
        c = { DATA_TOGGLE_CARROT: '[data-toggle^="button"]', DATA_TOGGLE: '[data-toggle="buttons"]', INPUT: "input", ACTIVE: ".active", BUTTON: ".btn" },
        u = { CLICK_DATA_API: "click" + s + a, FOCUS_BLUR_DATA_API: "focus" + s + a + " " + ("blur" + s + a) },
        f = function () {
      function e(t) {
        n(this, e), this._element = t;
      }return e.prototype.toggle = function () {
        var e = !0,
            n = !0,
            i = t(this._element).closest(c.DATA_TOGGLE)[0];if (i) {
          var o = t(this._element).find(c.INPUT)[0];if (o) {
            if ("radio" === o.type) if (o.checked && t(this._element).hasClass(h.ACTIVE)) e = !1;else {
              var r = t(i).find(c.ACTIVE)[0];r && t(r).removeClass(h.ACTIVE);
            }if (e) {
              if (o.hasAttribute("disabled") || i.hasAttribute("disabled") || o.classList.contains("disabled") || i.classList.contains("disabled")) return;o.checked = !t(this._element).hasClass(h.ACTIVE), t(o).trigger("change");
            }o.focus(), n = !1;
          }
        }n && this._element.setAttribute("aria-pressed", !t(this._element).hasClass(h.ACTIVE)), e && t(this._element).toggleClass(h.ACTIVE);
      }, e.prototype.dispose = function () {
        t.removeData(this._element, o), this._element = null;
      }, e._jQueryInterface = function (n) {
        return this.each(function () {
          var i = t(this).data(o);i || (i = new e(this), t(this).data(o, i)), "toggle" === n && i[n]();
        });
      }, r(e, null, [{ key: "VERSION", get: function get() {
          return i;
        } }]), e;
    }();return t(document).on(u.CLICK_DATA_API, c.DATA_TOGGLE_CARROT, function (e) {
      e.preventDefault();var n = e.target;t(n).hasClass(h.BUTTON) || (n = t(n).closest(c.BUTTON)), f._jQueryInterface.call(t(n), "toggle");
    }).on(u.FOCUS_BLUR_DATA_API, c.DATA_TOGGLE_CARROT, function (e) {
      var n = t(e.target).closest(c.BUTTON)[0];t(n).toggleClass(h.FOCUS, /^focus(in)?$/.test(e.type));
    }), t.fn[e] = f._jQueryInterface, t.fn[e].Constructor = f, t.fn[e].noConflict = function () {
      return t.fn[e] = l, f._jQueryInterface;
    }, f;
  }($), function (t) {
    var e = "carousel",
        a = "4.0.0",
        l = "bs.carousel",
        h = "." + l,
        c = ".data-api",
        u = t.fn[e],
        f = 600,
        d = 37,
        _ = 39,
        p = 500,
        g = { interval: 5e3, keyboard: !0, slide: !1, pause: "hover", wrap: !0 },
        m = { interval: "(number|boolean)", keyboard: "boolean", slide: "(boolean|string)", pause: "(string|boolean)", wrap: "boolean" },
        E = { NEXT: "next", PREV: "prev", LEFT: "left", RIGHT: "right" },
        v = { SLIDE: "slide" + h, SLID: "slid" + h, KEYDOWN: "keydown" + h, MOUSEENTER: "mouseenter" + h, MOUSELEAVE: "mouseleave" + h, TOUCHEND: "touchend" + h, LOAD_DATA_API: "load" + h + c, CLICK_DATA_API: "click" + h + c },
        T = { CAROUSEL: "carousel", ACTIVE: "active", SLIDE: "slide", RIGHT: "carousel-item-right", LEFT: "carousel-item-left", NEXT: "carousel-item-next", PREV: "carousel-item-prev", ITEM: "carousel-item" },
        y = { ACTIVE: ".active", ACTIVE_ITEM: ".active.carousel-item", ITEM: ".carousel-item", NEXT_PREV: ".carousel-item-next, .carousel-item-prev", INDICATORS: ".carousel-indicators", DATA_SLIDE: "[data-slide], [data-slide-to]", DATA_RIDE: '[data-ride="carousel"]' },
        I = function () {
      function c(e, i) {
        n(this, c), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(i), this._element = t(e)[0], this._indicatorsElement = t(this._element).find(y.INDICATORS)[0], this._addEventListeners();
      }return c.prototype.next = function () {
        this._isSliding || this._slide(E.NEXT);
      }, c.prototype.nextWhenVisible = function () {
        !document.hidden && t(this._element).is(":visible") && "hidden" !== t(this._element).css("visibility") && this.next();
      }, c.prototype.prev = function () {
        this._isSliding || this._slide(E.PREV);
      }, c.prototype.pause = function (e) {
        e || (this._isPaused = !0), t(this._element).find(y.NEXT_PREV)[0] && s.supportsTransitionEnd() && (s.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
      }, c.prototype.cycle = function (t) {
        t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
      }, c.prototype.to = function (e) {
        var n = this;this._activeElement = t(this._element).find(y.ACTIVE_ITEM)[0];var i = this._getItemIndex(this._activeElement);if (!(e > this._items.length - 1 || e < 0)) {
          if (this._isSliding) return void t(this._element).one(v.SLID, function () {
            return n.to(e);
          });if (i === e) return this.pause(), void this.cycle();var o = e > i ? E.NEXT : E.PREV;this._slide(o, this._items[e]);
        }
      }, c.prototype.dispose = function () {
        t(this._element).off(h), t.removeData(this._element, l), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
      }, c.prototype._getConfig = function (t) {
        return t = o({}, g, t), s.typeCheckConfig(e, t, m), t;
      }, c.prototype._addEventListeners = function () {
        var e = this;this._config.keyboard && t(this._element).on(v.KEYDOWN, function (t) {
          return e._keydown(t);
        }), "hover" === this._config.pause && (t(this._element).on(v.MOUSEENTER, function (t) {
          return e.pause(t);
        }).on(v.MOUSELEAVE, function (t) {
          return e.cycle(t);
        }), "ontouchstart" in document.documentElement && t(this._element).on(v.TOUCHEND, function () {
          e.pause(), e.touchTimeout && clearTimeout(e.touchTimeout), e.touchTimeout = setTimeout(function (t) {
            return e.cycle(t);
          }, p + e._config.interval);
        }));
      }, c.prototype._keydown = function (t) {
        if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {case d:
            t.preventDefault(), this.prev();break;case _:
            t.preventDefault(), this.next();}
      }, c.prototype._getItemIndex = function (e) {
        return this._items = t.makeArray(t(e).parent().find(y.ITEM)), this._items.indexOf(e);
      }, c.prototype._getItemByDirection = function (t, e) {
        var n = t === E.NEXT,
            i = t === E.PREV,
            o = this._getItemIndex(e),
            r = this._items.length - 1,
            s = i && 0 === o || n && o === r;if (s && !this._config.wrap) return e;var a = t === E.PREV ? -1 : 1,
            l = (o + a) % this._items.length;return l === -1 ? this._items[this._items.length - 1] : this._items[l];
      }, c.prototype._triggerSlideEvent = function (e, n) {
        var i = this._getItemIndex(e),
            o = this._getItemIndex(t(this._element).find(y.ACTIVE_ITEM)[0]),
            r = t.Event(v.SLIDE, { relatedTarget: e, direction: n, from: o, to: i });return t(this._element).trigger(r), r;
      }, c.prototype._setActiveIndicatorElement = function (e) {
        if (this._indicatorsElement) {
          t(this._indicatorsElement).find(y.ACTIVE).removeClass(T.ACTIVE);var n = this._indicatorsElement.children[this._getItemIndex(e)];n && t(n).addClass(T.ACTIVE);
        }
      }, c.prototype._slide = function (e, n) {
        var i = this,
            o = t(this._element).find(y.ACTIVE_ITEM)[0],
            r = this._getItemIndex(o),
            a = n || o && this._getItemByDirection(e, o),
            l = this._getItemIndex(a),
            h = Boolean(this._interval),
            c = void 0,
            u = void 0,
            d = void 0;if (e === E.NEXT ? (c = T.LEFT, u = T.NEXT, d = E.LEFT) : (c = T.RIGHT, u = T.PREV, d = E.RIGHT), a && t(a).hasClass(T.ACTIVE)) return void (this._isSliding = !1);var _ = this._triggerSlideEvent(a, d);if (!_.isDefaultPrevented() && o && a) {
          this._isSliding = !0, h && this.pause(), this._setActiveIndicatorElement(a);var p = t.Event(v.SLID, { relatedTarget: a, direction: d, from: r, to: l });s.supportsTransitionEnd() && t(this._element).hasClass(T.SLIDE) ? (t(a).addClass(u), s.reflow(a), t(o).addClass(c), t(a).addClass(c), t(o).one(s.TRANSITION_END, function () {
            t(a).removeClass(c + " " + u).addClass(T.ACTIVE), t(o).removeClass(T.ACTIVE + " " + u + " " + c), i._isSliding = !1, setTimeout(function () {
              return t(i._element).trigger(p);
            }, 0);
          }).emulateTransitionEnd(f)) : (t(o).removeClass(T.ACTIVE), t(a).addClass(T.ACTIVE), this._isSliding = !1, t(this._element).trigger(p)), h && this.cycle();
        }
      }, c._jQueryInterface = function (e) {
        return this.each(function () {
          var n = t(this).data(l),
              r = o({}, g, t(this).data());"object" === ("undefined" == typeof e ? "undefined" : i(e)) && (r = o({}, r, e));var s = "string" == typeof e ? e : r.slide;if (n || (n = new c(this, r), t(this).data(l, n)), "number" == typeof e) n.to(e);else if ("string" == typeof s) {
            if ("undefined" == typeof n[s]) throw new TypeError('No method named "' + s + '"');n[s]();
          } else r.interval && (n.pause(), n.cycle());
        });
      }, c._dataApiClickHandler = function (e) {
        var n = s.getSelectorFromElement(this);if (n) {
          var i = t(n)[0];if (i && t(i).hasClass(T.CAROUSEL)) {
            var r = o({}, t(i).data(), t(this).data()),
                a = this.getAttribute("data-slide-to");a && (r.interval = !1), c._jQueryInterface.call(t(i), r), a && t(i).data(l).to(a), e.preventDefault();
          }
        }
      }, r(c, null, [{ key: "VERSION", get: function get() {
          return a;
        } }, { key: "Default", get: function get() {
          return g;
        } }]), c;
    }();return t(document).on(v.CLICK_DATA_API, y.DATA_SLIDE, I._dataApiClickHandler), t(window).on(v.LOAD_DATA_API, function () {
      t(y.DATA_RIDE).each(function () {
        var e = t(this);I._jQueryInterface.call(e, e.data());
      });
    }), t.fn[e] = I._jQueryInterface, t.fn[e].Constructor = I, t.fn[e].noConflict = function () {
      return t.fn[e] = u, I._jQueryInterface;
    }, I;
  }($), function (t) {
    var e = "collapse",
        a = "4.0.0",
        l = "bs.collapse",
        h = "." + l,
        c = ".data-api",
        u = t.fn[e],
        f = 600,
        d = { toggle: !0, parent: "" },
        _ = { toggle: "boolean", parent: "(string|element)" },
        p = { SHOW: "show" + h, SHOWN: "shown" + h, HIDE: "hide" + h, HIDDEN: "hidden" + h, CLICK_DATA_API: "click" + h + c },
        g = { SHOW: "show", COLLAPSE: "collapse", COLLAPSING: "collapsing", COLLAPSED: "collapsed" },
        m = { WIDTH: "width", HEIGHT: "height" },
        E = { ACTIVES: ".show, .collapsing", DATA_TOGGLE: '[data-toggle="collapse"]' },
        v = function () {
      function h(e, i) {
        n(this, h), this._isTransitioning = !1, this._element = e, this._config = this._getConfig(i), this._triggerArray = t.makeArray(t('[data-toggle="collapse"][href="#' + e.id + '"],' + ('[data-toggle="collapse"][data-target="#' + e.id + '"]')));for (var o = t(E.DATA_TOGGLE), r = 0; r < o.length; r++) {
          var a = o[r],
              l = s.getSelectorFromElement(a);null !== l && t(l).filter(e).length > 0 && (this._selector = l, this._triggerArray.push(a));
        }this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();
      }return h.prototype.toggle = function () {
        t(this._element).hasClass(g.SHOW) ? this.hide() : this.show();
      }, h.prototype.show = function () {
        var e = this;if (!this._isTransitioning && !t(this._element).hasClass(g.SHOW)) {
          var n = void 0,
              i = void 0;if (this._parent && (n = t.makeArray(t(this._parent).find(E.ACTIVES).filter('[data-parent="' + this._config.parent + '"]')), 0 === n.length && (n = null)), !(n && (i = t(n).not(this._selector).data(l), i && i._isTransitioning))) {
            var o = t.Event(p.SHOW);if (t(this._element).trigger(o), !o.isDefaultPrevented()) {
              n && (h._jQueryInterface.call(t(n).not(this._selector), "hide"), i || t(n).data(l, null));var r = this._getDimension();t(this._element).removeClass(g.COLLAPSE).addClass(g.COLLAPSING), this._element.style[r] = 0, this._triggerArray.length > 0 && t(this._triggerArray).removeClass(g.COLLAPSED).attr("aria-expanded", !0), this.setTransitioning(!0);var a = function a() {
                t(e._element).removeClass(g.COLLAPSING).addClass(g.COLLAPSE).addClass(g.SHOW), e._element.style[r] = "", e.setTransitioning(!1), t(e._element).trigger(p.SHOWN);
              };if (!s.supportsTransitionEnd()) return void a();var c = r[0].toUpperCase() + r.slice(1),
                  u = "scroll" + c;t(this._element).one(s.TRANSITION_END, a).emulateTransitionEnd(f), this._element.style[r] = this._element[u] + "px";
            }
          }
        }
      }, h.prototype.hide = function () {
        var e = this;if (!this._isTransitioning && t(this._element).hasClass(g.SHOW)) {
          var n = t.Event(p.HIDE);if (t(this._element).trigger(n), !n.isDefaultPrevented()) {
            var i = this._getDimension();if (this._element.style[i] = this._element.getBoundingClientRect()[i] + "px", s.reflow(this._element), t(this._element).addClass(g.COLLAPSING).removeClass(g.COLLAPSE).removeClass(g.SHOW), this._triggerArray.length > 0) for (var o = 0; o < this._triggerArray.length; o++) {
              var r = this._triggerArray[o],
                  a = s.getSelectorFromElement(r);if (null !== a) {
                var l = t(a);l.hasClass(g.SHOW) || t(r).addClass(g.COLLAPSED).attr("aria-expanded", !1);
              }
            }this.setTransitioning(!0);var h = function h() {
              e.setTransitioning(!1), t(e._element).removeClass(g.COLLAPSING).addClass(g.COLLAPSE).trigger(p.HIDDEN);
            };return this._element.style[i] = "", s.supportsTransitionEnd() ? void t(this._element).one(s.TRANSITION_END, h).emulateTransitionEnd(f) : void h();
          }
        }
      }, h.prototype.setTransitioning = function (t) {
        this._isTransitioning = t;
      }, h.prototype.dispose = function () {
        t.removeData(this._element, l), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
      }, h.prototype._getConfig = function (t) {
        return t = o({}, d, t), t.toggle = Boolean(t.toggle), s.typeCheckConfig(e, t, _), t;
      }, h.prototype._getDimension = function () {
        var e = t(this._element).hasClass(m.WIDTH);return e ? m.WIDTH : m.HEIGHT;
      }, h.prototype._getParent = function () {
        var e = this,
            n = null;s.isElement(this._config.parent) ? (n = this._config.parent, "undefined" != typeof this._config.parent.jquery && (n = this._config.parent[0])) : n = t(this._config.parent)[0];var i = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';return t(n).find(i).each(function (t, n) {
          e._addAriaAndCollapsedClass(h._getTargetFromElement(n), [n]);
        }), n;
      }, h.prototype._addAriaAndCollapsedClass = function (e, n) {
        if (e) {
          var i = t(e).hasClass(g.SHOW);n.length > 0 && t(n).toggleClass(g.COLLAPSED, !i).attr("aria-expanded", i);
        }
      }, h._getTargetFromElement = function (e) {
        var n = s.getSelectorFromElement(e);return n ? t(n)[0] : null;
      }, h._jQueryInterface = function (e) {
        return this.each(function () {
          var n = t(this),
              r = n.data(l),
              s = o({}, d, n.data(), "object" === ("undefined" == typeof e ? "undefined" : i(e)) && e);if (!r && s.toggle && /show|hide/.test(e) && (s.toggle = !1), r || (r = new h(this, s), n.data(l, r)), "string" == typeof e) {
            if ("undefined" == typeof r[e]) throw new TypeError('No method named "' + e + '"');r[e]();
          }
        });
      }, r(h, null, [{ key: "VERSION", get: function get() {
          return a;
        } }, { key: "Default", get: function get() {
          return d;
        } }]), h;
    }();return t(document).on(p.CLICK_DATA_API, E.DATA_TOGGLE, function (e) {
      "A" === e.currentTarget.tagName && e.preventDefault();var n = t(this),
          i = s.getSelectorFromElement(this);t(i).each(function () {
        var e = t(this),
            i = e.data(l),
            o = i ? "toggle" : n.data();v._jQueryInterface.call(e, o);
      });
    }), t.fn[e] = v._jQueryInterface, t.fn[e].Constructor = v, t.fn[e].noConflict = function () {
      return t.fn[e] = u, v._jQueryInterface;
    }, v;
  }($), function (t) {
    var e = "dropdown",
        a = "4.0.0",
        l = "bs.dropdown",
        h = "." + l,
        c = ".data-api",
        u = t.fn[e],
        f = 27,
        d = 32,
        _ = 9,
        p = 38,
        g = 40,
        m = 3,
        E = new RegExp(p + "|" + g + "|" + f),
        v = { HIDE: "hide" + h, HIDDEN: "hidden" + h, SHOW: "show" + h, SHOWN: "shown" + h, CLICK: "click" + h, CLICK_DATA_API: "click" + h + c, KEYDOWN_DATA_API: "keydown" + h + c, KEYUP_DATA_API: "keyup" + h + c },
        T = { DISABLED: "disabled", SHOW: "show", DROPUP: "dropup", DROPRIGHT: "dropright", DROPLEFT: "dropleft", MENURIGHT: "dropdown-menu-right", MENULEFT: "dropdown-menu-left", POSITION_STATIC: "position-static" },
        y = { DATA_TOGGLE: '[data-toggle="dropdown"]', FORM_CHILD: ".dropdown form", MENU: ".dropdown-menu", NAVBAR_NAV: ".navbar-nav", VISIBLE_ITEMS: ".dropdown-menu .dropdown-item:not(.disabled)" },
        I = { TOP: "top-start", TOPEND: "top-end", BOTTOM: "bottom-start", BOTTOMEND: "bottom-end", RIGHT: "right-start", RIGHTEND: "right-end", LEFT: "left-start", LEFTEND: "left-end" },
        C = { offset: 0, flip: !0, boundary: "scrollParent", reference: "toggle" },
        O = { offset: "(number|string|function)", flip: "boolean", boundary: "(string|element)", reference: "(string|element)" },
        A = function () {
      function c(t, e) {
        n(this, c), this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();
      }return c.prototype.toggle = function () {
        if (!this._element.disabled && !t(this._element).hasClass(T.DISABLED)) {
          var e = c._getParentFromElement(this._element),
              n = t(this._menu).hasClass(T.SHOW);if (c._clearMenus(), !n) {
            var i = { relatedTarget: this._element },
                o = t.Event(v.SHOW, i);if (t(e).trigger(o), !o.isDefaultPrevented()) {
              if (!this._inNavbar) {
                if ("undefined" == typeof Popper) throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var r = this._element;"parent" === this._config.reference ? r = e : s.isElement(this._config.reference) && (r = this._config.reference, "undefined" != typeof this._config.reference.jquery && (r = this._config.reference[0])), "scrollParent" !== this._config.boundary && t(e).addClass(T.POSITION_STATIC), this._popper = new Popper(r, this._menu, this._getPopperConfig());
              }"ontouchstart" in document.documentElement && 0 === t(e).closest(y.NAVBAR_NAV).length && t("body").children().on("mouseover", null, t.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), t(this._menu).toggleClass(T.SHOW), t(e).toggleClass(T.SHOW).trigger(t.Event(v.SHOWN, i));
            }
          }
        }
      }, c.prototype.dispose = function () {
        t.removeData(this._element, l), t(this._element).off(h), this._element = null, this._menu = null, null !== this._popper && (this._popper.destroy(), this._popper = null);
      }, c.prototype.update = function () {
        this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
      }, c.prototype._addEventListeners = function () {
        var e = this;t(this._element).on(v.CLICK, function (t) {
          t.preventDefault(), t.stopPropagation(), e.toggle();
        });
      }, c.prototype._getConfig = function (n) {
        return n = o({}, this.constructor.Default, t(this._element).data(), n), s.typeCheckConfig(e, n, this.constructor.DefaultType), n;
      }, c.prototype._getMenuElement = function () {
        if (!this._menu) {
          var e = c._getParentFromElement(this._element);this._menu = t(e).find(y.MENU)[0];
        }return this._menu;
      }, c.prototype._getPlacement = function () {
        var e = t(this._element).parent(),
            n = I.BOTTOM;return e.hasClass(T.DROPUP) ? (n = I.TOP, t(this._menu).hasClass(T.MENURIGHT) && (n = I.TOPEND)) : e.hasClass(T.DROPRIGHT) ? n = I.RIGHT : e.hasClass(T.DROPLEFT) ? n = I.LEFT : t(this._menu).hasClass(T.MENURIGHT) && (n = I.BOTTOMEND), n;
      }, c.prototype._detectNavbar = function () {
        return t(this._element).closest(".navbar").length > 0;
      }, c.prototype._getPopperConfig = function () {
        var t = this,
            e = {};"function" == typeof this._config.offset ? e.fn = function (e) {
          return e.offsets = o({}, e.offsets, t._config.offset(e.offsets) || {}), e;
        } : e.offset = this._config.offset;var n = { placement: this._getPlacement(), modifiers: { offset: e, flip: { enabled: this._config.flip }, preventOverflow: { boundariesElement: this._config.boundary } } };return n;
      }, c._jQueryInterface = function (e) {
        return this.each(function () {
          var n = t(this).data(l),
              o = "object" === ("undefined" == typeof e ? "undefined" : i(e)) ? e : null;if (n || (n = new c(this, o), t(this).data(l, n)), "string" == typeof e) {
            if ("undefined" == typeof n[e]) throw new TypeError('No method named "' + e + '"');n[e]();
          }
        });
      }, c._clearMenus = function (e) {
        if (!e || e.which !== m && ("keyup" !== e.type || e.which === _)) for (var n = t.makeArray(t(y.DATA_TOGGLE)), i = 0; i < n.length; i++) {
          var o = c._getParentFromElement(n[i]),
              r = t(n[i]).data(l),
              s = { relatedTarget: n[i] };if (r) {
            var a = r._menu;if (t(o).hasClass(T.SHOW) && !(e && ("click" === e.type && /input|textarea/i.test(e.target.tagName) || "keyup" === e.type && e.which === _) && t.contains(o, e.target))) {
              var h = t.Event(v.HIDE, s);t(o).trigger(h), h.isDefaultPrevented() || ("ontouchstart" in document.documentElement && t("body").children().off("mouseover", null, t.noop), n[i].setAttribute("aria-expanded", "false"), t(a).removeClass(T.SHOW), t(o).removeClass(T.SHOW).trigger(t.Event(v.HIDDEN, s)));
            }
          }
        }
      }, c._getParentFromElement = function (e) {
        var n = void 0,
            i = s.getSelectorFromElement(e);return i && (n = t(i)[0]), n || e.parentNode;
      }, c._dataApiKeydownHandler = function (e) {
        if ((/input|textarea/i.test(e.target.tagName) ? !(e.which === d || e.which !== f && (e.which !== g && e.which !== p || t(e.target).closest(y.MENU).length)) : E.test(e.which)) && (e.preventDefault(), e.stopPropagation(), !this.disabled && !t(this).hasClass(T.DISABLED))) {
          var n = c._getParentFromElement(this),
              i = t(n).hasClass(T.SHOW);if (!i && (e.which !== f || e.which !== d) || i && (e.which === f || e.which === d)) {
            if (e.which === f) {
              var o = t(n).find(y.DATA_TOGGLE)[0];t(o).trigger("focus");
            }return void t(this).trigger("click");
          }var r = t(n).find(y.VISIBLE_ITEMS).get();if (0 !== r.length) {
            var s = r.indexOf(e.target);e.which === p && s > 0 && s--, e.which === g && s < r.length - 1 && s++, s < 0 && (s = 0), r[s].focus();
          }
        }
      }, r(c, null, [{ key: "VERSION", get: function get() {
          return a;
        } }, { key: "Default", get: function get() {
          return C;
        } }, { key: "DefaultType", get: function get() {
          return O;
        } }]), c;
    }();return t(document).on(v.KEYDOWN_DATA_API, y.DATA_TOGGLE, A._dataApiKeydownHandler).on(v.KEYDOWN_DATA_API, y.MENU, A._dataApiKeydownHandler).on(v.CLICK_DATA_API + " " + v.KEYUP_DATA_API, A._clearMenus).on(v.CLICK_DATA_API, y.DATA_TOGGLE, function (e) {
      e.preventDefault(), e.stopPropagation(), A._jQueryInterface.call(t(this), "toggle");
    }).on(v.CLICK_DATA_API, y.FORM_CHILD, function (t) {
      t.stopPropagation();
    }), t.fn[e] = A._jQueryInterface, t.fn[e].Constructor = A, t.fn[e].noConflict = function () {
      return t.fn[e] = u, A._jQueryInterface;
    }, A;
  }($, Popper), function (t) {
    var e = "modal",
        a = "4.0.0",
        l = "bs.modal",
        h = "." + l,
        c = ".data-api",
        u = t.fn[e],
        f = 300,
        d = 150,
        _ = 27,
        p = { backdrop: !0, keyboard: !0, focus: !0, show: !0 },
        g = { backdrop: "(boolean|string)", keyboard: "boolean", focus: "boolean", show: "boolean" },
        m = { HIDE: "hide" + h, HIDDEN: "hidden" + h, SHOW: "show" + h, SHOWN: "shown" + h, FOCUSIN: "focusin" + h, RESIZE: "resize" + h, CLICK_DISMISS: "click.dismiss" + h, KEYDOWN_DISMISS: "keydown.dismiss" + h, MOUSEUP_DISMISS: "mouseup.dismiss" + h, MOUSEDOWN_DISMISS: "mousedown.dismiss" + h, CLICK_DATA_API: "click" + h + c },
        E = { SCROLLBAR_MEASURER: "modal-scrollbar-measure", BACKDROP: "modal-backdrop", OPEN: "modal-open", FADE: "fade", SHOW: "show" },
        v = { DIALOG: ".modal-dialog", DATA_TOGGLE: '[data-toggle="modal"]', DATA_DISMISS: '[data-dismiss="modal"]', FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", STICKY_CONTENT: ".sticky-top", NAVBAR_TOGGLER: ".navbar-toggler" },
        T = function () {
      function c(e, i) {
        n(this, c), this._config = this._getConfig(i), this._element = e, this._dialog = t(e).find(v.DIALOG)[0], this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._originalBodyPadding = 0, this._scrollbarWidth = 0;
      }return c.prototype.toggle = function (t) {
        return this._isShown ? this.hide() : this.show(t);
      }, c.prototype.show = function (e) {
        var n = this;if (!this._isTransitioning && !this._isShown) {
          s.supportsTransitionEnd() && t(this._element).hasClass(E.FADE) && (this._isTransitioning = !0);var i = t.Event(m.SHOW, { relatedTarget: e });t(this._element).trigger(i), this._isShown || i.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), t(document.body).addClass(E.OPEN), this._setEscapeEvent(), this._setResizeEvent(), t(this._element).on(m.CLICK_DISMISS, v.DATA_DISMISS, function (t) {
            return n.hide(t);
          }), t(this._dialog).on(m.MOUSEDOWN_DISMISS, function () {
            t(n._element).one(m.MOUSEUP_DISMISS, function (e) {
              t(e.target).is(n._element) && (n._ignoreBackdropClick = !0);
            });
          }), this._showBackdrop(function () {
            return n._showElement(e);
          }));
        }
      }, c.prototype.hide = function (e) {
        var n = this;if (e && e.preventDefault(), !this._isTransitioning && this._isShown) {
          var i = t.Event(m.HIDE);if (t(this._element).trigger(i), this._isShown && !i.isDefaultPrevented()) {
            this._isShown = !1;var o = s.supportsTransitionEnd() && t(this._element).hasClass(E.FADE);o && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), t(document).off(m.FOCUSIN), t(this._element).removeClass(E.SHOW), t(this._element).off(m.CLICK_DISMISS), t(this._dialog).off(m.MOUSEDOWN_DISMISS), o ? t(this._element).one(s.TRANSITION_END, function (t) {
              return n._hideModal(t);
            }).emulateTransitionEnd(f) : this._hideModal();
          }
        }
      }, c.prototype.dispose = function () {
        t.removeData(this._element, l), t(window, document, this._element, this._backdrop).off(h), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._scrollbarWidth = null;
      }, c.prototype.handleUpdate = function () {
        this._adjustDialog();
      }, c.prototype._getConfig = function (t) {
        return t = o({}, p, t), s.typeCheckConfig(e, t, g), t;
      }, c.prototype._showElement = function (e) {
        var n = this,
            i = s.supportsTransitionEnd() && t(this._element).hasClass(E.FADE);this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.scrollTop = 0, i && s.reflow(this._element), t(this._element).addClass(E.SHOW), this._config.focus && this._enforceFocus();var o = t.Event(m.SHOWN, { relatedTarget: e }),
            r = function r() {
          n._config.focus && n._element.focus(), n._isTransitioning = !1, t(n._element).trigger(o);
        };i ? t(this._dialog).one(s.TRANSITION_END, r).emulateTransitionEnd(f) : r();
      }, c.prototype._enforceFocus = function () {
        var e = this;t(document).off(m.FOCUSIN).on(m.FOCUSIN, function (n) {
          document !== n.target && e._element !== n.target && 0 === t(e._element).has(n.target).length && e._element.focus();
        });
      }, c.prototype._setEscapeEvent = function () {
        var e = this;this._isShown && this._config.keyboard ? t(this._element).on(m.KEYDOWN_DISMISS, function (t) {
          t.which === _ && (t.preventDefault(), e.hide());
        }) : this._isShown || t(this._element).off(m.KEYDOWN_DISMISS);
      }, c.prototype._setResizeEvent = function () {
        var e = this;this._isShown ? t(window).on(m.RESIZE, function (t) {
          return e.handleUpdate(t);
        }) : t(window).off(m.RESIZE);
      }, c.prototype._hideModal = function () {
        var e = this;this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._isTransitioning = !1, this._showBackdrop(function () {
          t(document.body).removeClass(E.OPEN), e._resetAdjustments(), e._resetScrollbar(), t(e._element).trigger(m.HIDDEN);
        });
      }, c.prototype._removeBackdrop = function () {
        this._backdrop && (t(this._backdrop).remove(), this._backdrop = null);
      }, c.prototype._showBackdrop = function (e) {
        var n = this,
            i = t(this._element).hasClass(E.FADE) ? E.FADE : "";if (this._isShown && this._config.backdrop) {
          var o = s.supportsTransitionEnd() && i;if (this._backdrop = document.createElement("div"), this._backdrop.className = E.BACKDROP, i && t(this._backdrop).addClass(i), t(this._backdrop).appendTo(document.body), t(this._element).on(m.CLICK_DISMISS, function (t) {
            return n._ignoreBackdropClick ? void (n._ignoreBackdropClick = !1) : void (t.target === t.currentTarget && ("static" === n._config.backdrop ? n._element.focus() : n.hide()));
          }), o && s.reflow(this._backdrop), t(this._backdrop).addClass(E.SHOW), !e) return;if (!o) return void e();t(this._backdrop).one(s.TRANSITION_END, e).emulateTransitionEnd(d);
        } else if (!this._isShown && this._backdrop) {
          t(this._backdrop).removeClass(E.SHOW);var r = function r() {
            n._removeBackdrop(), e && e();
          };s.supportsTransitionEnd() && t(this._element).hasClass(E.FADE) ? t(this._backdrop).one(s.TRANSITION_END, r).emulateTransitionEnd(d) : r();
        } else e && e();
      }, c.prototype._adjustDialog = function () {
        var t = this._element.scrollHeight > document.documentElement.clientHeight;!this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px");
      }, c.prototype._resetAdjustments = function () {
        this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
      }, c.prototype._checkScrollbar = function () {
        var t = document.body.getBoundingClientRect();this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
      }, c.prototype._setScrollbar = function () {
        var e = this;if (this._isBodyOverflowing) {
          t(v.FIXED_CONTENT).each(function (n, i) {
            var o = t(i)[0].style.paddingRight,
                r = t(i).css("padding-right");t(i).data("padding-right", o).css("padding-right", parseFloat(r) + e._scrollbarWidth + "px");
          }), t(v.STICKY_CONTENT).each(function (n, i) {
            var o = t(i)[0].style.marginRight,
                r = t(i).css("margin-right");t(i).data("margin-right", o).css("margin-right", parseFloat(r) - e._scrollbarWidth + "px");
          }), t(v.NAVBAR_TOGGLER).each(function (n, i) {
            var o = t(i)[0].style.marginRight,
                r = t(i).css("margin-right");t(i).data("margin-right", o).css("margin-right", parseFloat(r) + e._scrollbarWidth + "px");
          });var n = document.body.style.paddingRight,
              i = t("body").css("padding-right");t("body").data("padding-right", n).css("padding-right", parseFloat(i) + this._scrollbarWidth + "px");
        }
      }, c.prototype._resetScrollbar = function () {
        t(v.FIXED_CONTENT).each(function (e, n) {
          var i = t(n).data("padding-right");"undefined" != typeof i && t(n).css("padding-right", i).removeData("padding-right");
        }), t(v.STICKY_CONTENT + ", " + v.NAVBAR_TOGGLER).each(function (e, n) {
          var i = t(n).data("margin-right");"undefined" != typeof i && t(n).css("margin-right", i).removeData("margin-right");
        });var e = t("body").data("padding-right");"undefined" != typeof e && t("body").css("padding-right", e).removeData("padding-right");
      }, c.prototype._getScrollbarWidth = function () {
        var t = document.createElement("div");t.className = E.SCROLLBAR_MEASURER, document.body.appendChild(t);var e = t.getBoundingClientRect().width - t.clientWidth;return document.body.removeChild(t), e;
      }, c._jQueryInterface = function (e, n) {
        return this.each(function () {
          var r = t(this).data(l),
              s = o({}, c.Default, t(this).data(), "object" === ("undefined" == typeof e ? "undefined" : i(e)) && e);
          if (r || (r = new c(this, s), t(this).data(l, r)), "string" == typeof e) {
            if ("undefined" == typeof r[e]) throw new TypeError('No method named "' + e + '"');r[e](n);
          } else s.show && r.show(n);
        });
      }, r(c, null, [{ key: "VERSION", get: function get() {
          return a;
        } }, { key: "Default", get: function get() {
          return p;
        } }]), c;
    }();return t(document).on(m.CLICK_DATA_API, v.DATA_TOGGLE, function (e) {
      var n = this,
          i = void 0,
          r = s.getSelectorFromElement(this);r && (i = t(r)[0]);var a = t(i).data(l) ? "toggle" : o({}, t(i).data(), t(this).data());"A" !== this.tagName && "AREA" !== this.tagName || e.preventDefault();var h = t(i).one(m.SHOW, function (e) {
        e.isDefaultPrevented() || h.one(m.HIDDEN, function () {
          t(n).is(":visible") && n.focus();
        });
      });T._jQueryInterface.call(t(i), a, this);
    }), t.fn[e] = T._jQueryInterface, t.fn[e].Constructor = T, t.fn[e].noConflict = function () {
      return t.fn[e] = u, T._jQueryInterface;
    }, T;
  }($), function (t) {
    var e = "tooltip",
        a = "4.0.0",
        l = "bs.tooltip",
        h = "." + l,
        c = t.fn[e],
        u = 150,
        f = "bs-tooltip",
        d = new RegExp("(^|\\s)" + f + "\\S+", "g"),
        _ = { animation: "boolean", template: "string", title: "(string|element|function)", trigger: "string", delay: "(number|object)", html: "boolean", selector: "(string|boolean)", placement: "(string|function)", offset: "(number|string)", container: "(string|element|boolean)", fallbackPlacement: "(string|array)", boundary: "(string|element)" },
        p = { AUTO: "auto", TOP: "top", RIGHT: "right", BOTTOM: "bottom", LEFT: "left" },
        g = { animation: !0, template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, selector: !1, placement: "top", offset: 0, container: !1, fallbackPlacement: "flip", boundary: "scrollParent" },
        m = { SHOW: "show", OUT: "out" },
        E = { HIDE: "hide" + h, HIDDEN: "hidden" + h, SHOW: "show" + h, SHOWN: "shown" + h, INSERTED: "inserted" + h, CLICK: "click" + h, FOCUSIN: "focusin" + h, FOCUSOUT: "focusout" + h, MOUSEENTER: "mouseenter" + h, MOUSELEAVE: "mouseleave" + h },
        v = { FADE: "fade", SHOW: "show" },
        T = { TOOLTIP: ".tooltip", TOOLTIP_INNER: ".tooltip-inner", ARROW: ".arrow" },
        y = { HOVER: "hover", FOCUS: "focus", CLICK: "click", MANUAL: "manual" },
        I = function () {
      function c(t, e) {
        if (n(this, c), "undefined" == typeof Popper) throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();
      }return c.prototype.enable = function () {
        this._isEnabled = !0;
      }, c.prototype.disable = function () {
        this._isEnabled = !1;
      }, c.prototype.toggleEnabled = function () {
        this._isEnabled = !this._isEnabled;
      }, c.prototype.toggle = function (e) {
        if (this._isEnabled) if (e) {
          var n = this.constructor.DATA_KEY,
              i = t(e.currentTarget).data(n);i || (i = new this.constructor(e.currentTarget, this._getDelegateConfig()), t(e.currentTarget).data(n, i)), i._activeTrigger.click = !i._activeTrigger.click, i._isWithActiveTrigger() ? i._enter(null, i) : i._leave(null, i);
        } else {
          if (t(this.getTipElement()).hasClass(v.SHOW)) return void this._leave(null, this);this._enter(null, this);
        }
      }, c.prototype.dispose = function () {
        clearTimeout(this._timeout), t.removeData(this.element, this.constructor.DATA_KEY), t(this.element).off(this.constructor.EVENT_KEY), t(this.element).closest(".modal").off("hide.bs.modal"), this.tip && t(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, null !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;
      }, c.prototype.show = function () {
        var e = this;if ("none" === t(this.element).css("display")) throw new Error("Please use show on visible elements");var n = t.Event(this.constructor.Event.SHOW);if (this.isWithContent() && this._isEnabled) {
          t(this.element).trigger(n);var i = t.contains(this.element.ownerDocument.documentElement, this.element);if (n.isDefaultPrevented() || !i) return;var o = this.getTipElement(),
              r = s.getUID(this.constructor.NAME);o.setAttribute("id", r), this.element.setAttribute("aria-describedby", r), this.setContent(), this.config.animation && t(o).addClass(v.FADE);var a = "function" == typeof this.config.placement ? this.config.placement.call(this, o, this.element) : this.config.placement,
              l = this._getAttachment(a);this.addAttachmentClass(l);var h = this.config.container === !1 ? document.body : t(this.config.container);t(o).data(this.constructor.DATA_KEY, this), t.contains(this.element.ownerDocument.documentElement, this.tip) || t(o).appendTo(h), t(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new Popper(this.element, o, { placement: l, modifiers: { offset: { offset: this.config.offset }, flip: { behavior: this.config.fallbackPlacement }, arrow: { element: T.ARROW }, preventOverflow: { boundariesElement: this.config.boundary } }, onCreate: function onCreate(t) {
              t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);
            }, onUpdate: function onUpdate(t) {
              e._handlePopperPlacementChange(t);
            } }), t(o).addClass(v.SHOW), "ontouchstart" in document.documentElement && t("body").children().on("mouseover", null, t.noop);var u = function u() {
            e.config.animation && e._fixTransition();var n = e._hoverState;e._hoverState = null, t(e.element).trigger(e.constructor.Event.SHOWN), n === m.OUT && e._leave(null, e);
          };s.supportsTransitionEnd() && t(this.tip).hasClass(v.FADE) ? t(this.tip).one(s.TRANSITION_END, u).emulateTransitionEnd(c._TRANSITION_DURATION) : u();
        }
      }, c.prototype.hide = function (e) {
        var n = this,
            i = this.getTipElement(),
            o = t.Event(this.constructor.Event.HIDE),
            r = function r() {
          n._hoverState !== m.SHOW && i.parentNode && i.parentNode.removeChild(i), n._cleanTipClass(), n.element.removeAttribute("aria-describedby"), t(n.element).trigger(n.constructor.Event.HIDDEN), null !== n._popper && n._popper.destroy(), e && e();
        };t(this.element).trigger(o), o.isDefaultPrevented() || (t(i).removeClass(v.SHOW), "ontouchstart" in document.documentElement && t("body").children().off("mouseover", null, t.noop), this._activeTrigger[y.CLICK] = !1, this._activeTrigger[y.FOCUS] = !1, this._activeTrigger[y.HOVER] = !1, s.supportsTransitionEnd() && t(this.tip).hasClass(v.FADE) ? t(i).one(s.TRANSITION_END, r).emulateTransitionEnd(u) : r(), this._hoverState = "");
      }, c.prototype.update = function () {
        null !== this._popper && this._popper.scheduleUpdate();
      }, c.prototype.isWithContent = function () {
        return Boolean(this.getTitle());
      }, c.prototype.addAttachmentClass = function (e) {
        t(this.getTipElement()).addClass(f + "-" + e);
      }, c.prototype.getTipElement = function () {
        return this.tip = this.tip || t(this.config.template)[0], this.tip;
      }, c.prototype.setContent = function () {
        var e = t(this.getTipElement());this.setElementContent(e.find(T.TOOLTIP_INNER), this.getTitle()), e.removeClass(v.FADE + " " + v.SHOW);
      }, c.prototype.setElementContent = function (e, n) {
        var o = this.config.html;"object" === ("undefined" == typeof n ? "undefined" : i(n)) && (n.nodeType || n.jquery) ? o ? t(n).parent().is(e) || e.empty().append(n) : e.text(t(n).text()) : e[o ? "html" : "text"](n);
      }, c.prototype.getTitle = function () {
        var t = this.element.getAttribute("data-original-title");return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;
      }, c.prototype._getAttachment = function (t) {
        return p[t.toUpperCase()];
      }, c.prototype._setListeners = function () {
        var e = this,
            n = this.config.trigger.split(" ");n.forEach(function (n) {
          if ("click" === n) t(e.element).on(e.constructor.Event.CLICK, e.config.selector, function (t) {
            return e.toggle(t);
          });else if (n !== y.MANUAL) {
            var i = n === y.HOVER ? e.constructor.Event.MOUSEENTER : e.constructor.Event.FOCUSIN,
                o = n === y.HOVER ? e.constructor.Event.MOUSELEAVE : e.constructor.Event.FOCUSOUT;t(e.element).on(i, e.config.selector, function (t) {
              return e._enter(t);
            }).on(o, e.config.selector, function (t) {
              return e._leave(t);
            });
          }t(e.element).closest(".modal").on("hide.bs.modal", function () {
            return e.hide();
          });
        }), this.config.selector ? this.config = o({}, this.config, { trigger: "manual", selector: "" }) : this._fixTitle();
      }, c.prototype._fixTitle = function () {
        var t = i(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title") || "string" !== t) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
      }, c.prototype._enter = function (e, n) {
        var i = this.constructor.DATA_KEY;return n = n || t(e.currentTarget).data(i), n || (n = new this.constructor(e.currentTarget, this._getDelegateConfig()), t(e.currentTarget).data(i, n)), e && (n._activeTrigger["focusin" === e.type ? y.FOCUS : y.HOVER] = !0), t(n.getTipElement()).hasClass(v.SHOW) || n._hoverState === m.SHOW ? void (n._hoverState = m.SHOW) : (clearTimeout(n._timeout), n._hoverState = m.SHOW, n.config.delay && n.config.delay.show ? void (n._timeout = setTimeout(function () {
          n._hoverState === m.SHOW && n.show();
        }, n.config.delay.show)) : void n.show());
      }, c.prototype._leave = function (e, n) {
        var i = this.constructor.DATA_KEY;if (n = n || t(e.currentTarget).data(i), n || (n = new this.constructor(e.currentTarget, this._getDelegateConfig()), t(e.currentTarget).data(i, n)), e && (n._activeTrigger["focusout" === e.type ? y.FOCUS : y.HOVER] = !1), !n._isWithActiveTrigger()) return clearTimeout(n._timeout), n._hoverState = m.OUT, n.config.delay && n.config.delay.hide ? void (n._timeout = setTimeout(function () {
          n._hoverState === m.OUT && n.hide();
        }, n.config.delay.hide)) : void n.hide();
      }, c.prototype._isWithActiveTrigger = function () {
        for (var t in this._activeTrigger) {
          if (this._activeTrigger[t]) return !0;
        }return !1;
      }, c.prototype._getConfig = function (n) {
        return n = o({}, this.constructor.Default, t(this.element).data(), n), "number" == typeof n.delay && (n.delay = { show: n.delay, hide: n.delay }), "number" == typeof n.title && (n.title = n.title.toString()), "number" == typeof n.content && (n.content = n.content.toString()), s.typeCheckConfig(e, n, this.constructor.DefaultType), n;
      }, c.prototype._getDelegateConfig = function () {
        var t = {};if (this.config) for (var e in this.config) {
          this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
        }return t;
      }, c.prototype._cleanTipClass = function () {
        var e = t(this.getTipElement()),
            n = e.attr("class").match(d);null !== n && n.length > 0 && e.removeClass(n.join(""));
      }, c.prototype._handlePopperPlacementChange = function (t) {
        this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));
      }, c.prototype._fixTransition = function () {
        var e = this.getTipElement(),
            n = this.config.animation;null === e.getAttribute("x-placement") && (t(e).removeClass(v.FADE), this.config.animation = !1, this.hide(), this.show(), this.config.animation = n);
      }, c._jQueryInterface = function (e) {
        return this.each(function () {
          var n = t(this).data(l),
              o = "object" === ("undefined" == typeof e ? "undefined" : i(e)) && e;if ((n || !/dispose|hide/.test(e)) && (n || (n = new c(this, o), t(this).data(l, n)), "string" == typeof e)) {
            if ("undefined" == typeof n[e]) throw new TypeError('No method named "' + e + '"');n[e]();
          }
        });
      }, r(c, null, [{ key: "VERSION", get: function get() {
          return a;
        } }, { key: "Default", get: function get() {
          return g;
        } }, { key: "NAME", get: function get() {
          return e;
        } }, { key: "DATA_KEY", get: function get() {
          return l;
        } }, { key: "Event", get: function get() {
          return E;
        } }, { key: "EVENT_KEY", get: function get() {
          return h;
        } }, { key: "DefaultType", get: function get() {
          return _;
        } }]), c;
    }();return t.fn[e] = I._jQueryInterface, t.fn[e].Constructor = I, t.fn[e].noConflict = function () {
      return t.fn[e] = c, I._jQueryInterface;
    }, I;
  }($, Popper));(function (s) {
    var l = "popover",
        h = "4.0.0",
        c = "bs.popover",
        u = "." + c,
        f = s.fn[l],
        d = "bs-popover",
        _ = new RegExp("(^|\\s)" + d + "\\S+", "g"),
        p = o({}, a.Default, { placement: "right", trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>' }),
        g = o({}, a.DefaultType, { content: "(string|element|function)" }),
        m = { FADE: "fade", SHOW: "show" },
        E = { TITLE: ".popover-header", CONTENT: ".popover-body" },
        v = { HIDE: "hide" + u, HIDDEN: "hidden" + u, SHOW: "show" + u, SHOWN: "shown" + u, INSERTED: "inserted" + u, CLICK: "click" + u, FOCUSIN: "focusin" + u, FOCUSOUT: "focusout" + u, MOUSEENTER: "mouseenter" + u, MOUSELEAVE: "mouseleave" + u },
        T = function (o) {
      function a() {
        return n(this, a), t(this, o.apply(this, arguments));
      }return e(a, o), a.prototype.isWithContent = function () {
        return this.getTitle() || this._getContent();
      }, a.prototype.addAttachmentClass = function (t) {
        s(this.getTipElement()).addClass(d + "-" + t);
      }, a.prototype.getTipElement = function () {
        return this.tip = this.tip || s(this.config.template)[0], this.tip;
      }, a.prototype.setContent = function () {
        var t = s(this.getTipElement());this.setElementContent(t.find(E.TITLE), this.getTitle());var e = this._getContent();"function" == typeof e && (e = e.call(this.element)), this.setElementContent(t.find(E.CONTENT), e), t.removeClass(m.FADE + " " + m.SHOW);
      }, a.prototype._getContent = function () {
        return this.element.getAttribute("data-content") || this.config.content;
      }, a.prototype._cleanTipClass = function () {
        var t = s(this.getTipElement()),
            e = t.attr("class").match(_);null !== e && e.length > 0 && t.removeClass(e.join(""));
      }, a._jQueryInterface = function (t) {
        return this.each(function () {
          var e = s(this).data(c),
              n = "object" === ("undefined" == typeof t ? "undefined" : i(t)) ? t : null;if ((e || !/destroy|hide/.test(t)) && (e || (e = new a(this, n), s(this).data(c, e)), "string" == typeof t)) {
            if ("undefined" == typeof e[t]) throw new TypeError('No method named "' + t + '"');e[t]();
          }
        });
      }, r(a, null, [{ key: "VERSION", get: function get() {
          return h;
        } }, { key: "Default", get: function get() {
          return p;
        } }, { key: "NAME", get: function get() {
          return l;
        } }, { key: "DATA_KEY", get: function get() {
          return c;
        } }, { key: "Event", get: function get() {
          return v;
        } }, { key: "EVENT_KEY", get: function get() {
          return u;
        } }, { key: "DefaultType", get: function get() {
          return g;
        } }]), a;
    }(a);return s.fn[l] = T._jQueryInterface, s.fn[l].Constructor = T, s.fn[l].noConflict = function () {
      return s.fn[l] = f, T._jQueryInterface;
    }, T;
  })($), function (t) {
    var e = "scrollspy",
        a = "4.0.0",
        l = "bs.scrollspy",
        h = "." + l,
        c = ".data-api",
        u = t.fn[e],
        f = { offset: 10, method: "auto", target: "" },
        d = { offset: "number", method: "string", target: "(string|element)" },
        _ = { ACTIVATE: "activate" + h, SCROLL: "scroll" + h, LOAD_DATA_API: "load" + h + c },
        p = { DROPDOWN_ITEM: "dropdown-item", DROPDOWN_MENU: "dropdown-menu", ACTIVE: "active" },
        g = { DATA_SPY: '[data-spy="scroll"]', ACTIVE: ".active", NAV_LIST_GROUP: ".nav, .list-group", NAV_LINKS: ".nav-link", NAV_ITEMS: ".nav-item", LIST_ITEMS: ".list-group-item", DROPDOWN: ".dropdown", DROPDOWN_ITEMS: ".dropdown-item", DROPDOWN_TOGGLE: ".dropdown-toggle" },
        m = { OFFSET: "offset", POSITION: "position" },
        E = function () {
      function c(e, i) {
        var o = this;n(this, c), this._element = e, this._scrollElement = "BODY" === e.tagName ? window : e, this._config = this._getConfig(i), this._selector = this._config.target + " " + g.NAV_LINKS + "," + (this._config.target + " " + g.LIST_ITEMS + ",") + (this._config.target + " " + g.DROPDOWN_ITEMS), this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, t(this._scrollElement).on(_.SCROLL, function (t) {
          return o._process(t);
        }), this.refresh(), this._process();
      }return c.prototype.refresh = function () {
        var e = this,
            n = this._scrollElement === this._scrollElement.window ? m.OFFSET : m.POSITION,
            i = "auto" === this._config.method ? n : this._config.method,
            o = i === m.POSITION ? this._getScrollTop() : 0;this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight();var r = t.makeArray(t(this._selector));r.map(function (e) {
          var n = void 0,
              r = s.getSelectorFromElement(e);if (r && (n = t(r)[0]), n) {
            var a = n.getBoundingClientRect();if (a.width || a.height) return [t(n)[i]().top + o, r];
          }return null;
        }).filter(function (t) {
          return t;
        }).sort(function (t, e) {
          return t[0] - e[0];
        }).forEach(function (t) {
          e._offsets.push(t[0]), e._targets.push(t[1]);
        });
      }, c.prototype.dispose = function () {
        t.removeData(this._element, l), t(this._scrollElement).off(h), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
      }, c.prototype._getConfig = function (n) {
        if (n = o({}, f, n), "string" != typeof n.target) {
          var i = t(n.target).attr("id");i || (i = s.getUID(e), t(n.target).attr("id", i)), n.target = "#" + i;
        }return s.typeCheckConfig(e, n, d), n;
      }, c.prototype._getScrollTop = function () {
        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
      }, c.prototype._getScrollHeight = function () {
        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
      }, c.prototype._getOffsetHeight = function () {
        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
      }, c.prototype._process = function () {
        var t = this._getScrollTop() + this._config.offset,
            e = this._getScrollHeight(),
            n = this._config.offset + e - this._getOffsetHeight();if (this._scrollHeight !== e && this.refresh(), t >= n) {
          var i = this._targets[this._targets.length - 1];return void (this._activeTarget !== i && this._activate(i));
        }if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();for (var o = this._offsets.length; o--;) {
          var r = this._activeTarget !== this._targets[o] && t >= this._offsets[o] && ("undefined" == typeof this._offsets[o + 1] || t < this._offsets[o + 1]);r && this._activate(this._targets[o]);
        }
      }, c.prototype._activate = function (e) {
        this._activeTarget = e, this._clear();var n = this._selector.split(",");n = n.map(function (t) {
          return t + '[data-target="' + e + '"],' + (t + '[href="' + e + '"]');
        });var i = t(n.join(","));i.hasClass(p.DROPDOWN_ITEM) ? (i.closest(g.DROPDOWN).find(g.DROPDOWN_TOGGLE).addClass(p.ACTIVE), i.addClass(p.ACTIVE)) : (i.addClass(p.ACTIVE), i.parents(g.NAV_LIST_GROUP).prev(g.NAV_LINKS + ", " + g.LIST_ITEMS).addClass(p.ACTIVE), i.parents(g.NAV_LIST_GROUP).prev(g.NAV_ITEMS).children(g.NAV_LINKS).addClass(p.ACTIVE)), t(this._scrollElement).trigger(_.ACTIVATE, { relatedTarget: e });
      }, c.prototype._clear = function () {
        t(this._selector).filter(g.ACTIVE).removeClass(p.ACTIVE);
      }, c._jQueryInterface = function (e) {
        return this.each(function () {
          var n = t(this).data(l),
              o = "object" === ("undefined" == typeof e ? "undefined" : i(e)) && e;if (n || (n = new c(this, o), t(this).data(l, n)), "string" == typeof e) {
            if ("undefined" == typeof n[e]) throw new TypeError('No method named "' + e + '"');n[e]();
          }
        });
      }, r(c, null, [{ key: "VERSION", get: function get() {
          return a;
        } }, { key: "Default", get: function get() {
          return f;
        } }]), c;
    }();return t(window).on(_.LOAD_DATA_API, function () {
      for (var e = t.makeArray(t(g.DATA_SPY)), n = e.length; n--;) {
        var i = t(e[n]);E._jQueryInterface.call(i, i.data());
      }
    }), t.fn[e] = E._jQueryInterface, t.fn[e].Constructor = E, t.fn[e].noConflict = function () {
      return t.fn[e] = u, E._jQueryInterface;
    }, E;
  }($), function (t) {
    var e = "tab",
        i = "4.0.0",
        o = "bs.tab",
        a = "." + o,
        l = ".data-api",
        h = t.fn[e],
        c = 150,
        u = { HIDE: "hide" + a, HIDDEN: "hidden" + a, SHOW: "show" + a, SHOWN: "shown" + a, CLICK_DATA_API: "click" + a + l },
        f = { DROPDOWN_MENU: "dropdown-menu", ACTIVE: "active", DISABLED: "disabled", FADE: "fade", SHOW: "show" },
        d = { DROPDOWN: ".dropdown", NAV_LIST_GROUP: ".nav, .list-group", ACTIVE: ".active", ACTIVE_UL: "> li > .active", DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]', DROPDOWN_TOGGLE: ".dropdown-toggle", DROPDOWN_ACTIVE_CHILD: "> .dropdown-menu .active" },
        _ = function () {
      function e(t) {
        n(this, e), this._element = t;
      }return e.prototype.show = function () {
        var e = this;if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && t(this._element).hasClass(f.ACTIVE) || t(this._element).hasClass(f.DISABLED))) {
          var n = void 0,
              i = void 0,
              o = t(this._element).closest(d.NAV_LIST_GROUP)[0],
              r = s.getSelectorFromElement(this._element);if (o) {
            var a = "UL" === o.nodeName ? d.ACTIVE_UL : d.ACTIVE;i = t.makeArray(t(o).find(a)), i = i[i.length - 1];
          }var l = t.Event(u.HIDE, { relatedTarget: this._element }),
              h = t.Event(u.SHOW, { relatedTarget: i });if (i && t(i).trigger(l), t(this._element).trigger(h), !h.isDefaultPrevented() && !l.isDefaultPrevented()) {
            r && (n = t(r)[0]), this._activate(this._element, o);var c = function c() {
              var n = t.Event(u.HIDDEN, { relatedTarget: e._element }),
                  o = t.Event(u.SHOWN, { relatedTarget: i });t(i).trigger(n), t(e._element).trigger(o);
            };n ? this._activate(n, n.parentNode, c) : c();
          }
        }
      }, e.prototype.dispose = function () {
        t.removeData(this._element, o), this._element = null;
      }, e.prototype._activate = function (e, n, i) {
        var o = this,
            r = void 0;r = "UL" === n.nodeName ? t(n).find(d.ACTIVE_UL) : t(n).children(d.ACTIVE);var a = r[0],
            l = i && s.supportsTransitionEnd() && a && t(a).hasClass(f.FADE),
            h = function h() {
          return o._transitionComplete(e, a, i);
        };a && l ? t(a).one(s.TRANSITION_END, h).emulateTransitionEnd(c) : h();
      }, e.prototype._transitionComplete = function (e, n, i) {
        if (n) {
          t(n).removeClass(f.SHOW + " " + f.ACTIVE);var o = t(n.parentNode).find(d.DROPDOWN_ACTIVE_CHILD)[0];o && t(o).removeClass(f.ACTIVE), "tab" === n.getAttribute("role") && n.setAttribute("aria-selected", !1);
        }if (t(e).addClass(f.ACTIVE), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !0), s.reflow(e), t(e).addClass(f.SHOW), e.parentNode && t(e.parentNode).hasClass(f.DROPDOWN_MENU)) {
          var r = t(e).closest(d.DROPDOWN)[0];r && t(r).find(d.DROPDOWN_TOGGLE).addClass(f.ACTIVE), e.setAttribute("aria-expanded", !0);
        }i && i();
      }, e._jQueryInterface = function (n) {
        return this.each(function () {
          var i = t(this),
              r = i.data(o);if (r || (r = new e(this), i.data(o, r)), "string" == typeof n) {
            if ("undefined" == typeof r[n]) throw new TypeError('No method named "' + n + '"');r[n]();
          }
        });
      }, r(e, null, [{ key: "VERSION", get: function get() {
          return i;
        } }]), e;
    }();return t(document).on(u.CLICK_DATA_API, d.DATA_TOGGLE, function (e) {
      e.preventDefault(), _._jQueryInterface.call(t(this), "show");
    }), t.fn[e] = _._jQueryInterface, t.fn[e].Constructor = _, t.fn[e].noConflict = function () {
      return t.fn[e] = h, _._jQueryInterface;
    }, _;
  }($) + function (t) {
    function e(e) {
      return this.each(function () {
        var o = t(this),
            r = o.data("bs.affix"),
            s = "object" == ("undefined" == typeof e ? "undefined" : i(e)) && e;r || o.data("bs.affix", r = new n(this, s)), "string" == typeof e && r[e]();
      });
    }var n = function r(e, n) {
      this.options = t.extend({}, r.DEFAULTS, n), this.$target = t(this.options.target).on("scroll.bs.affix.data-api", t.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", t.proxy(this.checkPositionWithEventLoop, this)), this.$element = t(e), this.affixed = null, this.unpin = null, this.pinnedOffset = null, this.checkPosition();
    };n.VERSION = "3.3.6", n.RESET = "affix affix-top affix-bottom", n.DEFAULTS = { offset: 0, target: window }, n.prototype.getState = function (t, e, n, i) {
      var o = this.$target.scrollTop(),
          r = this.$element.offset(),
          s = this.$target.height();if (null != n && "top" == this.affixed) return o < n && "top";if ("bottom" == this.affixed) return null != n ? !(o + this.unpin <= r.top) && "bottom" : !(o + s <= t - i) && "bottom";var a = null == this.affixed,
          l = a ? o : r.top,
          h = a ? s : e;return null != n && o <= n ? "top" : null != i && l + h >= t - i && "bottom";
    }, n.prototype.getPinnedOffset = function () {
      if (this.pinnedOffset) return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t = this.$target.scrollTop(),
          e = this.$element.offset();return this.pinnedOffset = e.top - t;
    }, n.prototype.checkPositionWithEventLoop = function () {
      setTimeout(t.proxy(this.checkPosition, this), 1);
    }, n.prototype.checkPosition = function () {
      if (this.$element.is(":visible")) {
        var e = this.$element.height(),
            o = this.options.offset,
            r = o.top,
            s = o.bottom,
            a = Math.max(t(document).height(), t(document.body).height());"object" != ("undefined" == typeof o ? "undefined" : i(o)) && (s = r = o), "function" == typeof r && (r = o.top(this.$element)), "function" == typeof s && (s = o.bottom(this.$element));var l = this.getState(a, e, r, s);if (this.affixed != l) {
          null != this.unpin && this.$element.css("top", "");var h = "affix" + (l ? "-" + l : ""),
              c = t.Event(h + ".bs.affix");if (this.$element.trigger(c), c.isDefaultPrevented()) return;this.affixed = l, this.unpin = "bottom" == l ? this.getPinnedOffset() : null, this.$element.removeClass(n.RESET).addClass(h).trigger(h.replace("affix", "affixed") + ".bs.affix");
        }"bottom" == l && this.$element.offset({ top: a - e - s });
      }
    };var o = t.fn.affix;t.fn.affix = e, t.fn.affix.Constructor = n, t.fn.affix.noConflict = function () {
      return t.fn.affix = o, this;
    }, t(window).on("load", function () {
      t('[data-spy="affix"]').each(function () {
        var n = t(this),
            i = n.data();i.offset = i.offset || {}, null != i.offsetBottom && (i.offset.bottom = i.offsetBottom), null != i.offsetTop && (i.offset.top = i.offsetTop), e.call(n, i);
      });
    });
  }(jQuery), function (t) {
    var e = "imageGrid",
        o = "bs.image-grid",
        r = '[data-grid="images"]',
        s = "." + o,
        a = t.fn[e],
        l = { padding: 10, targetHeight: 300, display: "inline-block" },
        h = { RESIZE: "resize" + s },
        c = function () {
      function e(i, o) {
        n(this, e), this._cleanWhitespace(i), this._row = 0, this._rownum = 1, this._elements = [], this._element = i, this._albumWidth = t(i).width(), this._images = t(i).children(), this._config = t.extend({}, l, o), t(window).on(h.RESIZE, t.proxy(this._handleResize, this)), this._processImages();
      }return e.prototype.dispose = function () {
        t(window).off(s), t.removeData(this._element, o), this._row = null, this._rownum = null, this._elements = null, this._element = null, this._albumWidth = null, this._images = null, this._config = null;
      }, e.prototype._handleResize = function () {
        this._row = 0, this._rownum = 1, this._elements = [], this._albumWidth = t(this._element).width(), this._images = t(this._element).children(), this._processImages();
      }, e.prototype._processImages = function () {
        var e = this;this._images.each(function (n) {
          var i = t(this),
              o = i.is("img") ? i : i.find("img"),
              r = "undefined" != typeof o.data("width") ? o.data("width") : o.width(),
              s = "undefined" != typeof o.data("height") ? o.data("height") : o.height();o.data("width", r), o.data("height", s);var a = Math.ceil(r / s * e._config.targetHeight),
              l = Math.ceil(e._config.targetHeight);e._elements.push([this, a, l]), e._row += a + e._config.padding, e._row > e._albumWidth && e._elements.length && (e._resizeRow(e._row - e._config.padding), e._row = 0, e._elements = [], e._rownum += 1), e._images.length - 1 == n && e._elements.length && (e._resizeRow(e._row), e._row = 0, e._elements = [], e._rownum += 1);
        });
      }, e.prototype._resizeRow = function (e) {
        for (var n = this._config.padding * (this._elements.length - 1), i = this._albumWidth - n, o = i / (e - n), r = n, s = (e < this._albumWidth, 0); s < this._elements.length; s++) {
          var a = t(this._elements[s][0]),
              l = Math.floor(this._elements[s][1] * o),
              h = Math.floor(this._elements[s][2] * o),
              c = s < this._elements.length - 1;r += l, !c && r < this._albumWidth && (l += this._albumWidth - r), l--;var u = a.is("img") ? a : a.find("img");u.width(l), u.height(h), this._applyModifications(a, c);
        }
      }, e.prototype._applyModifications = function (t, e) {
        var n = { "margin-bottom": this._config.padding + "px", "margin-right": e ? this._config.padding + "px" : 0, display: this._config.display, "vertical-align": "bottom" };t.css(n);
      }, e.prototype._cleanWhitespace = function (e) {
        t(e).contents().filter(function () {
          return 3 == this.nodeType && !/\S/.test(this.nodeValue);
        }).remove();
      }, e._jQueryInterface = function (n) {
        return this.each(function () {
          var n = t(this),
              r = n.data(o),
              s = t.extend({}, l, n.data(), "object" === ("undefined" == typeof s ? "undefined" : i(s)) && s);r || n.data(o, r = new e(this, s)), "string" == typeof s && r[s].call(n);
        });
      }, e;
    }();return t.fn[e] = c._jQueryInterface, t.fn[e].Constructor = c, t.fn[e].noConflict = function () {
      return t.fn[e] = a, Enter._jQueryInterface;
    }, t(function () {
      t(r).imageGrid();
    }), c;
  }(jQuery), function (t) {
    var e = "zoom",
        i = "bs.zoom",
        o = "v4.0.0",
        a = '[data-action="zoom"]',
        l = "." + i,
        h = (t.fn[e], 80),
        c = { CLICK: "click" + l, SCROLL: "scroll" + l, KEYUP: "keyup" + l, TOUCHSTART: "touchstart" + l, TOUCHMOVE: "touchmove" + l },
        u = { ZOOM_OVERLAY_OPEN: "zoom-overlay-open", ZOOM_OVERLAY_TRANSITIONING: "zoom-overlay-transitioning", ZOOM_OVERLAY: "zoom-overlay", ZOOM_IMG_WRAP: "zoom-img-wrap", ZOOM_IMG: "zoom-img" },
        f = { ZOOM: "zoom", ZOOM_OUT: "zoom-out" },
        d = function () {
      function e(i, o) {
        n(this, e), this._activeZoom = null, this._initialScrollPosition = null, this._initialTouchPosition = null, this._touchMoveListener = null, this._$document = t(document), this._$window = t(window), this._$body = t(document.body), this._boundClick = t.proxy(this._clickHandler, this);
      }return e.prototype._zoom = function (e) {
        var n = e.target;if (n && "IMG" === n.tagName && !this._$body.hasClass(u.ZOOM_OVERLAY_OPEN)) return e.metaKey || e.ctrlKey ? window.open(e.target.getAttribute("data-original") || e.target.src, "_blank") : void (n.width >= t(window).width() - h || (this._activeZoomClose(!0), this._activeZoom = new _(n), this._activeZoom.zoomImage(), this._$window.on(c.SCROLL, t.proxy(this._scrollHandler, this)), this._$document.on(c.KEYUP, t.proxy(this._keyHandler, this)), this._$document.on(c.TOUCHSTART, t.proxy(this._touchStart, this)), document.addEventListener ? document.addEventListener("click", this._boundClick, !0) : document.attachEvent("onclick", this._boundClick, !0), "bubbles" in e ? e.bubbles && e.stopPropagation() : e.cancelBubble = !0));
      }, e.prototype._activeZoomClose = function (t) {
        this._activeZoom && (t ? this._activeZoom.dispose() : this._activeZoom.close(), this._$window.off(l), this._$document.off(l), document.removeEventListener("click", this._boundClick, !0), this._activeZoom = null);
      }, e.prototype._scrollHandler = function (e) {
        null === this._initialScrollPosition && (this._initialScrollPosition = t(window).scrollTop());var n = this._initialScrollPosition - t(window).scrollTop();Math.abs(n) >= 40 && this._activeZoomClose();
      }, e.prototype._keyHandler = function (t) {
        27 === t.keyCode && this._activeZoomClose();
      }, e.prototype._clickHandler = function (t) {
        t.preventDefault ? t.preventDefault() : event.returnValue = !1, "bubbles" in t ? t.bubbles && t.stopPropagation() : t.cancelBubble = !0, this._activeZoomClose();
      }, e.prototype._touchStart = function (e) {
        this._initialTouchPosition = e.touches[0].pageY, t(e.target).on(c.TOUCHMOVE, t.proxy(this._touchMove, this));
      }, e.prototype._touchMove = function (e) {
        Math.abs(e.touches[0].pageY - this._initialTouchPosition) > 10 && (this._activeZoomClose(), t(e.target).off(c.TOUCHMOVE));
      }, e.prototype.listen = function () {
        this._$body.on(c.CLICK, a, t.proxy(this._zoom, this));
      }, r(e, null, [{ key: "VERSION", get: function get() {
          return o;
        } }, { key: "Default", get: function get() {
          return Default;
        } }]), e;
    }(),
        _ = function () {
      function e(i) {
        n(this, e), this._fullHeight = null, this._fullWidth = null, this._overlay = null, this._targetImageWrap = null, this._targetImage = i, this._$body = t(document.body);
      }return e.prototype.zoomImage = function () {
        var e = document.createElement("img");e.onload = t.proxy(function () {
          this._fullHeight = Number(e.height), this._fullWidth = Number(e.width), this._zoomOriginal();
        }, this), e.src = this._targetImage.src;
      }, e.prototype._zoomOriginal = function () {
        this._targetImageWrap = document.createElement("div"), this._targetImageWrap.className = u.ZOOM_IMG_WRAP, this._targetImage.parentNode.insertBefore(this._targetImageWrap, this._targetImage), this._targetImageWrap.appendChild(this._targetImage), t(this._targetImage).addClass(u.ZOOM_IMG).attr("data-action", f.ZOOM_OUT), this._overlay = document.createElement("div"), this._overlay.className = u.ZOOM_OVERLAY, document.body.appendChild(this._overlay), this._calculateZoom(), this._triggerAnimation();
      }, e.prototype._calculateZoom = function () {
        this._targetImage.offsetWidth;var e = this._fullWidth,
            n = this._fullHeight,
            i = (t(window).scrollTop(), e / this._targetImage.width),
            o = t(window).height() - h,
            r = t(window).width() - h,
            s = e / n,
            a = r / o;e < r && n < o ? this._imgScaleFactor = i : s < a ? this._imgScaleFactor = o / n * i : this._imgScaleFactor = r / e * i;
      }, e.prototype._triggerAnimation = function () {
        this._targetImage.offsetWidth;var e = t(this._targetImage).offset(),
            n = t(window).scrollTop(),
            i = n + t(window).height() / 2,
            o = t(window).width() / 2,
            r = e.top + this._targetImage.height / 2,
            a = e.left + this._targetImage.width / 2;this._translateY = i - r, this._translateX = o - a;var l = "scale(" + this._imgScaleFactor + ")",
            h = "translate(" + this._translateX + "px, " + this._translateY + "px)";s.supportsTransitionEnd() || (h += " translateZ(0)"), t(this._targetImage).css({ "-webkit-transform": l, "-ms-transform": l, transform: l }), t(this._targetImageWrap).css({ "-webkit-transform": h, "-ms-transform": h, transform: h }), this._$body.addClass(u.ZOOM_OVERLAY_OPEN);
      }, e.prototype.close = function () {
        return this._$body.removeClass(u.ZOOM_OVERLAY_OPEN).addClass(u.ZOOM_OVERLAY_TRANSITIONING), t(this._targetImage).css({ "-webkit-transform": "", "-ms-transform": "", transform: "" }), t(this._targetImageWrap).css({ "-webkit-transform": "", "-ms-transform": "", transform: "" }), s.supportsTransitionEnd() ? void t(this._targetImage).one(s.TRANSITION_END, t.proxy(this.dispose, this)).emulateTransitionEnd(300) : this.dispose();
      }, e.prototype.dispose = function () {
        this._targetImageWrap && this._targetImageWrap.parentNode && (t(this._targetImage).removeClass(u.ZOOM_IMG).attr("data-action", f.ZOOM), this._targetImageWrap.parentNode.replaceChild(this._targetImage, this._targetImageWrap), this._overlay.parentNode.removeChild(this._overlay), this._$body.removeClass(u.ZOOM_OVERLAY_TRANSITIONING));
      }, e;
    }();t(function () {
      new d().listen();
    });
  }(jQuery);
}();
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Utils = function () {
    function Utils() {
        _classCallCheck(this, Utils);

        this.sortingConfig = {

            "A": function A(page) {
                page.sort(function (a, b) {
                    return a.email > b.email ? 1 : -1;
                });
                return page;
            },
            "Z": function Z(page) {
                page.sort(function (a, b) {
                    return a.email < b.email ? 1 : -1;;
                });
                return page;
            },
            "Admin": function Admin(page) {
                return page.filter(function (item) {
                    return item.role == "Admin";
                });
            },
            "User": function User(page) {
                return page.filter(function (item) {
                    return item.role == "User";
                });
            },
            "Find": function Find(page) {
                var exp = new RegExp(event.target.value, "i");
                return page.filter(function (item) {
                    return exp.test(item.name);
                });
            }
        };
    }

    _createClass(Utils, null, [{
        key: "showView",
        value: function showView(views) {
            views.forEach(function (element) {
                element.classList.remove("hide");
            });
        }
    }, {
        key: "hideView",
        value: function hideView(views) {
            views.forEach(function (element) {
                element.classList.add("hide");
            });
        }
    }, {
        key: "navigateTo",
        value: function navigateTo(routeName) {
            window.location.hash = "#" + routeName;
        }

        // static isLoggedIn() {
        //     let credentials = JSON.parse(localStorage.getItem('credentials'));
        //     return !!credentials;
        // }

    }, {
        key: "isLoggedIn",
        value: function isLoggedIn() {
            //let credentials = JSON.parse(localStorage.getItem('credentials'));
            return true;
        }
    }, {
        key: "activateBtn",
        value: function activateBtn(btns) {
            btns.forEach(function (element) {
                element.parentElement.classList.add("active");
            });
        }
    }, {
        key: "disactivateBtn",
        value: function disactivateBtn(btns) {
            btns.forEach(function (element) {
                element.parentElement.classList.remove("active");
            });
        }
    }]);

    return Utils;
}();

exports.default = Utils;
"use strict";

Object.defineProperty(exports, "__esModule", {
				value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GalleryController = function () {
				function GalleryController(model, view, observer, utils) {
								_classCallCheck(this, GalleryController);

								this.model = model;
								this.view = view;
								this.observer = observer;
								this.utils = utils;
								this.pageConfig = {
												itemsPerPage: 10,
												currentPage: 0
								};
								this.init();
				}

				_createClass(GalleryController, [{
								key: "initListeners",
								value: function initListeners() {
												this.view.DOMElements.userList.addEventListener("click", this.tableLineHandler.bind(this));

												this.view.DOMElements.search.addEventListener("keyup", this.searchHandler.bind(this));
												this.view.DOMElements.emailDropdown.addEventListener("click", this.sortingHandler.bind(this));
												this.view.DOMElements.roleDropdown.addEventListener("click", this.sortingHandler.bind(this));

												this.view.DOMElements.nextBtn.addEventListener("click", this.getNextPageHandler.bind(this));
								}
				}, {
								key: "tableLineHandler",
								value: function tableLineHandler(event) {
												event.preventDefault();
												var isButton = event.target.getAttribute("data-row-id");
												isButton ? this.openDetail(isButton) : this.view.selectTableLine(event);
								}
				}, {
								key: "openDetail",
								value: function openDetail(buttonId) {
												var _this = this;

												var user = this.model.getUserById(buttonId).then(function (data) {
																_this.view.showSingleUser(data);
												});
								}
				}, {
								key: "searchHandler",
								value: function searchHandler(event) {
												event.preventDefault();
												var value = event.target.value;
												if (event.keyCode === 13 && (value.length == 0 || value.length > 2)) {
																this.pageConfig.currentPage = 0;
																this.view.clearList();
																this.view.buildUsersList(this.getNextPage(), this.utils.sortingConfig["Find"]);
												}
								}
				}, {
								key: "sortingHandler",
								value: function sortingHandler(event) {
												event.preventDefault();
												this.view.updateButtonText(event);
												this.applySortingMethod(this.view.getSortingType(event));
								}
				}, {
								key: "getNextPageHandler",
								value: function getNextPageHandler(event) {
												event && event.preventDefault();
												this.view.buildUsersList(this.getNextPage());
												this.isLastPage();
								}
				}, {
								key: "applySortingMethod",
								value: function applySortingMethod(sortingType) {
												if (!sortingType) {
																return;
												}
												this.pageConfig.currentPage = 0;
												this.view.clearList();
												this.view.buildUsersList(this.getNextPage(), this.utils.sortingConfig[sortingType]);
								}
				}, {
								key: "getNextPage",
								value: function getNextPage() {
												var start = this.pageConfig.itemsPerPage * this.pageConfig.currentPage;
												var end = this.pageConfig.itemsPerPage + start;
												this.pageConfig.currentPage++;
												return this.model.usersListData.slice(start, end);
								}
				}, {
								key: "isLastPage",
								value: function isLastPage() {
												if (this.isMaxPage()) {
																this.view.hideNextPage();
																this.countStats();
												}
								}
				}, {
								key: "isMaxPage",
								value: function isMaxPage() {
												return this.pageConfig.currentPage * this.pageConfig.itemsPerPage >= this.model.usersListData.length;
								}
				}, {
								key: "countStats",
								value: function countStats() {
												var stats = this.model.usersListData.reduce(function (sum, item) {
																item.role == "Admin" ? sum.admins++ : sum.users++;
																return sum;
												}, { admins: 0, users: 0 });
												this.view.showStats(stats);
								}
				}, {
								key: "init",
								value: function init() {
												console.log("gallery inited");
												// this.model.getUserList().then((data) => {
												//     this.initListeners()
												//     this.view.buildUsersList(this.getNextPage());
												//     this.isLastPage();
												// }); 	
								}
				}]);

				return GalleryController;
}();

exports.default = GalleryController;
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GalleryModel = function () {
    function GalleryModel() {
        _classCallCheck(this, GalleryModel);

        this.getUrl = 'http://localhost:3000/usersList';
        this.usersListData = [];
    }

    _createClass(GalleryModel, [{
        key: "getUserList",
        value: function getUserList() {
            var _this = this;

            return fetch(this.getUrl).then(function (responce) {
                return responce.json();
            }).then(function (data) {
                console.log("Data is loaded");
                _this.usersListData = data;
                return data;
            });
        }
    }, {
        key: "getUserById",
        value: function getUserById(id) {
            return fetch(this.getUrl + "/" + id).then(function (responce) {
                return responce.json();
            }).then(function (data) {
                return data;
            });
        }
    }, {
        key: "saveUser",
        value: function saveUser(item) {}
    }, {
        key: "updateUser",
        value: function updateUser(counter) {}
    }]);

    return GalleryModel;
}();

exports.default = GalleryModel;
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GalleryView = function GalleryView() {
    _classCallCheck(this, GalleryView);

    this.DOMElements = {};
};

exports.default = GalleryView;
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Observer = function () {
    function Observer() {
        _classCallCheck(this, Observer);

        this.events = {};
    }

    _createClass(Observer, [{
        key: "subscribeEvent",
        value: function subscribeEvent(name, func) {
            this.events[name] = func;
        }
    }, {
        key: "callEvent",
        value: function callEvent(name, arg) {
            if (this.events[name]) {
                this.events[name](arg);
            }
        }
    }]);

    return Observer;
}();

exports.default = Observer;
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoginController = function () {
    function LoginController(model, view, utils) {
        _classCallCheck(this, LoginController);

        this.model = model;
        this.view = view;
        this.utils = utils;
        //this.initListeners();
    }

    _createClass(LoginController, [{
        key: "initListeners",
        value: function initListeners() {
            this.view.DOMElements.logInBtn.addEventListener("click", this.loginHandler.bind(this));
            this.view.DOMElements.logOutBtn.addEventListener("click", this.logoutHandler.bind(this));
        }
    }, {
        key: "loginHandler",
        value: function loginHandler(e) {
            var _this = this;

            e.preventDefault();
            var credentials = this.view.getCredentials();
            if (this.model.validate(credentials)) {
                this.model.login(credentials).then(function (data) {
                    if (data.loginStatus) {
                        _this.view.hideMsg();
                        _this.view.showLogout();
                        _this.utils.navigateTo("gallery");
                    } else {
                        _this.view.showMsg(_this.model.getErrorMsg());
                    }
                });
            } else {
                this.view.showMsg(this.model.getErrorMsg());
            }
        }
    }, {
        key: "logoutHandler",
        value: function logoutHandler() {
            this.view.hideLogout();
            this.model.logout();
            this.utils.navigateTo("");
        }
    }, {
        key: "init",
        value: function init() {
            console.log("login inited");
        }
    }]);

    return LoginController;
}();

exports.default = LoginController;
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoginModel = function () {
    function LoginModel() {
        _classCallCheck(this, LoginModel);

        this.loginUrl = "http://localhost:3000/login";
        this.emailPattern = /^\w+@\w+\.\w{2,4}$/i;
        this.passwordPattern = /^[a-zA-Z0-9]{8,30}$/;
        this.errorMsg = null;
        this.errorMsgMap = {
            "empty": 'Пожалуйста заполните поля логин и пароль',
            "loginError": 'Логин введен неверно. Только латинские буквы.',
            "passError": 'Пароль введен неверно. Тольк латинские буквы, цифры. Длина не менее 8 символов',
            "missmatch": 'Неправильные логин или пароль.'
        };
    }

    _createClass(LoginModel, [{
        key: "validate",
        value: function validate(credentials) {
            return this.isEmpty(credentials) && this.isEmailAssertPattern(credentials) && this.isPasswordAssertPattern(credentials);
        }
    }, {
        key: "login",
        value: function login(credentials) {
            var _this = this;

            var options = {
                headers: {
                    'Content-type': 'application/json; charset=utf-8'
                },
                method: 'post',
                body: JSON.stringify(credentials)
            };
            return fetch(this.loginUrl, options).then(function (responce) {
                return responce.json();
            }).then(function (data) {
                if (data.loginStatus) {
                    localStorage.setItem('credentials', JSON.stringify(credentials));
                } else {
                    _this.setErrorMsg("missmatch");
                }
                return data;
            });
        }
    }, {
        key: "getErrorMsg",
        value: function getErrorMsg() {
            return this.errorMsg;
        }
    }, {
        key: "setErrorMsg",
        value: function setErrorMsg(key) {
            this.errorMsg = this.errorMsgMap[key];
            return false;
        }
    }, {
        key: "isEmpty",
        value: function isEmpty(credentials) {
            return credentials.login && credentials.password || this.setErrorMsg("empty");
        }
    }, {
        key: "isEmailAssertPattern",
        value: function isEmailAssertPattern(credentials) {
            return this.emailPattern.test(credentials.login) || this.setErrorMsg("loginError");
        }
    }, {
        key: "isPasswordAssertPattern",
        value: function isPasswordAssertPattern(credentials) {
            return this.passwordPattern.test(credentials.password) || this.setErrorMsg("passError");
        }
    }, {
        key: "logout",
        value: function logout() {
            localStorage.removeItem('credentials');
        }
    }]);

    return LoginModel;
}();

exports.default = LoginModel;
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoginView = function () {
    function LoginView() {
        _classCallCheck(this, LoginView);

        this.DOMElements = {
            login: document.querySelector('#inputEmail'),
            password: document.querySelector('#inputPassword'),
            alert: document.querySelector('.alert'),

            logInBtn: document.querySelector('#log-in-btn'),
            logOutBtn: document.querySelector('#log-out-btn')
        };
    }

    _createClass(LoginView, [{
        key: 'showMsg',
        value: function showMsg(msg) {
            if (msg) {
                this.DOMElements.alert.classList.remove("hide");
                this.DOMElements.alert.innerHTML = msg;
            }
        }
    }, {
        key: 'hideMsg',
        value: function hideMsg() {
            this.DOMElements.alert.classList.add("hide");
        }
    }, {
        key: 'showLogout',
        value: function showLogout() {
            this.DOMElements.logOutBtn.classList.remove("hide");
        }
    }, {
        key: 'hideLogout',
        value: function hideLogout() {
            this.DOMElements.logOutBtn.classList.add("hide");
        }
    }, {
        key: 'getCredentials',
        value: function getCredentials() {
            return {
                login: this.DOMElements.login.value,
                password: this.DOMElements.password.value
            };
        }
    }]);

    return LoginView;
}();

exports.default = LoginView;
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MainController = function () {
    function MainController(model, view, utils) {
        _classCallCheck(this, MainController);

        this.model = model;
        this.view = view;
        this.utils = utils;
    }

    _createClass(MainController, [{
        key: "init",
        value: function init() {
            console.log("main inited");
            // this.model.getUserList().then((data) => {
            //     this.initListeners()
            //     this.view.buildUsersList(this.getNextPage());
            //     this.isLastPage();
            // }); 	
        }
    }]);

    return MainController;
}();

exports.default = MainController;
"use strict";

Object.defineProperty(exports, "__esModule", {
   value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MainModel = function MainModel() {
   _classCallCheck(this, MainModel);
};

exports.default = MainModel;
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MainView = function MainView() {
    _classCallCheck(this, MainView);

    this.DOMElements = {};
};

exports.default = MainView;
"use strict";

Object.defineProperty(exports, "__esModule", {
		value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProfileController = function () {
		function ProfileController(model, view, utils) {
				_classCallCheck(this, ProfileController);

				this.model = model;
				this.view = view;
				this.utils = utils;
		}

		_createClass(ProfileController, [{
				key: "init",
				value: function init() {
						console.log("profile inited");
						// this.model.getUserList().then((data) => {
						//     this.initListeners()
						//     this.view.buildUsersList(this.getNextPage());
						//     this.isLastPage();
						// }); 	
				}
		}]);

		return ProfileController;
}();

exports.default = ProfileController;
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProfileModel = function ProfileModel() {
    _classCallCheck(this, ProfileModel);
};

exports.default = ProfileModel;
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProfileView = function ProfileView() {
    _classCallCheck(this, ProfileView);

    this.DOMElements = {};
};

exports.default = ProfileView;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
